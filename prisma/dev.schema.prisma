generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model User {
  id                   String             @id @map("_id")
  username             String             @unique
  discordUsername      String?            @unique
  role                 Role               @default(USER)
  created_at           DateTime           @default(now())
  updated_at           DateTime?          @updatedAt
  auth_key             Key[]
  auth_session         Session[]
  biography            String?
  profile_pic_url      String             @default("profile_pics/default_pfp.png")
  spellbooks           Spellbook[]
  characters           Character[]
  friends              Friends[]          @relation(fields: [friend_ids], references: [user_id])
  friend_ids           String[]
  requested_friends    RequestedFriends[] @relation(fields: [requested_friend_ids], references: [user_id])
  requested_friend_ids String[]
  sent_requests        SentRequests[]     @relation(fields: [sent_request_ids], references: [user_id])
  sent_request_ids     String[]
  owned_campaigns      Campaign[]         @relation("OwnerUser")
  joined_campaigns     Campaign[]         @relation("MemberUsers", fields: [joined_campaign_ids], references: [id])
  joined_campaign_ids  String[]           @db.ObjectId

  @@map("users")
}

model Friends {
  user_id    String   @id @map("_id")
  friends    User[]   @relation(fields: [friend_ids], references: [id])
  friend_ids String[]

  @@map("friends")
}

model RequestedFriends {
  user_id              String   @id @map("_id")
  requested_friends    User[]   @relation(fields: [requested_friend_ids], references: [id])
  requested_friend_ids String[]

  @@map("requested_friends")
}

model SentRequests {
  user_id          String   @id @map("_id")
  sent_requests    User[]   @relation(fields: [sent_request_ids], references: [id])
  sent_request_ids String[]

  @@map("sent_requests")
}

model Session {
  id             String @id @map("_id")
  active_expires BigInt
  idle_expires   BigInt
  user_id        String
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Key {
  id              String  @id @map("_id")
  hashed_password String?
  user_id         String
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("keys")
}

model Spellbook {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  spellbook_name        String     @unique
  character_name        String
  spellbook_description String?
  image_url             String?
  created_at            DateTime   @default(now())
  updated_at            DateTime?  @updatedAt
  user_id               String
  auth_user             User       @relation(fields: [user_id], references: [id])
  character_id          String?    @db.ObjectId
  character             Character? @relation(fields: [character_id], references: [id])
  spell_ids             String[]   @db.ObjectId
  spells                Spell[]    @relation(fields: [spell_ids], references: [id])
  class_ids             String[]   @db.ObjectId
  classes               Class[]    @relation(fields: [class_ids], references: [id])
  race_ids              String[]   @db.ObjectId
  races                 Race[]     @relation(fields: [race_ids], references: [id])

  @@map("spellbooks")
}

model Campaign {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  campaign_name       String
  capaign_description String?
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  owner_id            String
  auth_user           User      @relation("OwnerUser", fields: [owner_id], references: [id])
  user_ids            String[]
  users               User[]    @relation("MemberUsers", fields: [user_ids], references: [id])

  @@unique([id, owner_id], name: "user_campaign")
  @@map("campaigns")
}

model Spell {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  index          String
  name           String
  url            String
  desc           String[]
  higher_level   String[]
  range          String
  components     Components[]
  material       String?
  area_of_effect AreaOfEffect?
  ritual         Boolean
  duration       String
  concentration  Boolean
  casting_time   String
  level          Int
  attack_type    String?
  damage         Json?
  dc             DifficultyClass?
  school         APIReference
  classes        APIReference[]
  subclasses     APIReference[]
  spellbook_ids  String[]         @db.ObjectId
  spellbooks     Spellbook[]      @relation(fields: [spellbook_ids], references: [id])

  @@map("spells")
}

model Class {
  id                         String              @id @default(auto()) @map("_id") @db.ObjectId
  index                      String              @unique
  name                       String              @unique
  url                        String
  hit_die                    Int
  class_levels               String
  multi_classing             Multiclassing?
  spells                     String?
  starting_equipment         StartingEquipment[]
  starting_equipment_options Choice[]
  proficiency_ids            String[]            @db.ObjectId
  proficiencies              Proficiency[]       @relation(fields: [proficiency_ids], references: [id])
  proficiency_choices        Choice[]
  saving_throws              APIReference[]
  subclasses                 APIReference[]
  spellbook_ids              String[]            @db.ObjectId
  spellbooks                 Spellbook[]         @relation(fields: [spellbook_ids], references: [id])
  character_ids              String[]            @db.ObjectId
  characters                 Character[]         @relation(fields: [character_ids], references: [id])

  @@map("classes")
}

model Race {
  id                           String         @id @default(auto()) @map("_id") @db.ObjectId
  index                        String         @unique
  name                         String         @unique
  url                          String
  speed                        Int
  ability_bonuses              AbilityBonus[]
  alignment                    String
  age                          String
  size                         String
  size_description             String
  starting_proficiencies       APIReference[]
  starting_proficiency_options Choice?
  languages                    APIReference[]
  language_desc                String
  traits                       APIReference[]
  subraces                     APIReference[]
  spellbook_ids                String[]       @db.ObjectId
  spellbooks                   Spellbook[]    @relation(fields: [spellbook_ids], references: [id])
  characters                   Character[]

  @@map("races")
}

model Character {
  id               String                  @id @default(auto()) @map("_id") @db.ObjectId
  spellbooks       Spellbook[]
  character_name   String
  player_name      String
  description      String?
  backstory        String?
  level            Int
  experience       Int?
  next_level       Int?
  age              Int?
  Height           String?
  weight           Int?
  size             String?
  gender           String?
  eye_color        String?
  hair_color       String?
  skin_color       String?
  scores_original  CharacterAbilityScore[]
  scores_current   CharacterAbilityScore[]
  saving_throw_ids String[]                @db.ObjectId
  saving_throws    AbilityScore[]          @relation(fields: [saving_throw_ids], references: [id])
  skill_ids        String[]                @db.ObjectId
  skills           Skill[]                 @relation(fields: [skill_ids], references: [id])
  armor_class      Int?
  death_saves      DeathSave?
  language_ids     String[]                @db.ObjectId
  languages        Language[]              @relation(fields: [language_ids], references: [id])
  proficiency_ids  String[]                @db.ObjectId
  proficiencies    Proficiency[]           @relation(fields: [proficiency_ids], references: [id])
  items            String[]
  coins            CoinType?
  image_url        String?
  created_at       DateTime                @default(now())
  updated_at       DateTime?               @updatedAt
  user_id          String
  auth_user        User                    @relation(fields: [user_id], references: [id])
  class_ids        String[]                @db.ObjectId
  classes          Class[]                 @relation(fields: [class_ids], references: [id])
  race_id          String                  @db.ObjectId
  race             Race                    @relation(fields: [race_id], references: [id])

  @@unique([id, user_id], name: "user_character")
  @@map("characters")
}

model AbilityScore {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  index         String
  name          String
  url           String
  full_name     String
  desc          String[]
  skills        APIReference[]
  character     Character[]    @relation(fields: [character_ids], references: [id])
  character_ids String[]       @db.ObjectId

  @@map("ability_scores")
}

model Skill {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  index         String
  name          String
  url           String
  desc          String[]
  ability_score APIReference
  characters    Character[]  @relation(fields: [character_ids], references: [id])
  character_ids String[]     @db.ObjectId

  @@map("skills")
}

model Language {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  index            String
  name             String
  url              String
  type             String
  typical_speakers String[]
  script           String
  character_ids    String[]    @db.ObjectId
  characters       Character[] @relation(fields: [character_ids], references: [id])

  @@map("languages")
}

model Proficiency {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  index         String
  name          String
  url           String
  type          String
  race_ids      String[]     @db.ObjectId
  reference     APIReference
  class_ids     String[]     @db.ObjectId
  classes       Class[]      @relation(fields: [class_ids], references: [id])
  character_ids String[]     @db.ObjectId
  characters    Character[]  @relation(fields: [character_ids], references: [id])

  @@map("proficiencies")
}

type APIReference {
  index String
  name  String
  url   String
}

type DifficultyClass {
  dc_success String
  dc_type    APIReference
  desc       String?
}

type Choice {
  desc   String?
  choose Int?
  type   String?
  from   Json?
}

type AreaOfEffect {
  size Int
  type AOEType
}

type StartingEquipment {
  quantity  Int
  equipment APIReference
}

type Prerequisite {
  ability_score APIReference?
  minimum_score Int?
}

type Info {
  name        String
  description String[]
}

type Spellcasting {
  level                Int
  info                 Info[]
  spellcasting_ability APIReference[]
  spells               String
}

type Multiclassing {
  prerequisites        Prerequisite[]
  prerequisite_options Json?
  proficiencies        APIReference[]
  proficiency_choices  Choice[]
}

type CharacterAbilityScore {
  type  String
  value Int
}

type AbilityBonus {
  bonus         Int
  ability_score APIReference
}

type DeathSave {
  successes Int
  failures  Int
}

type CoinType {
  copper_pieces   Int
  silver_pieces   Int
  electrum_pieces Int
  gold_pieces     Int
  platinum_pieces Int
}

enum Role {
  USER
  ADMIN
}

enum Components {
  V
  S
  M
}

enum AOEType {
  sphere
  cone
  cylinder
  line
  cube
}

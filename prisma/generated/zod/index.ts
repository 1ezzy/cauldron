import { z } from 'zod';
import { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const UserScalarFieldEnumSchema = z.enum(['id','username','discordUsername','role','created_at','updated_at','biography','profile_pic_url','friend_ids','requested_friend_ids','sent_request_ids','joined_campaign_ids','requested_campaign_ids']);

export const FriendsScalarFieldEnumSchema = z.enum(['user_id','friend_ids']);

export const RequestedFriendsScalarFieldEnumSchema = z.enum(['user_id','requested_friend_ids']);

export const SentRequestsScalarFieldEnumSchema = z.enum(['user_id','sent_request_ids']);

export const SessionScalarFieldEnumSchema = z.enum(['id','active_expires','idle_expires','user_id']);

export const KeyScalarFieldEnumSchema = z.enum(['id','hashed_password','user_id']);

export const SpellbookScalarFieldEnumSchema = z.enum(['id','spellbook_name','character_name','spellbook_description','image_url','created_at','updated_at','user_id','character_id','spell_ids','class_ids','race_ids']);

export const CampaignScalarFieldEnumSchema = z.enum(['id','campaign_name','capaign_description','created_at','updated_at','owner_id','user_ids','requested_user_ids']);

export const SpellScalarFieldEnumSchema = z.enum(['id','index','name','url','desc','higher_level','range','components','material','ritual','duration','concentration','casting_time','level','attack_type','damage','spellbook_ids']);

export const ClassScalarFieldEnumSchema = z.enum(['id','index','name','url','hit_die','class_levels','spells','proficiency_ids','spellbook_ids','character_ids']);

export const RaceScalarFieldEnumSchema = z.enum(['id','index','name','url','speed','alignment','age','size','size_description','language_desc','spellbook_ids']);

export const CharacterScalarFieldEnumSchema = z.enum(['id','character_name','player_name','description','backstory','level','experience','next_level','age','Height','weight','size','gender','eye_color','hair_color','skin_color','saving_throw_ids','skill_ids','armor_class','language_ids','proficiency_ids','items','image_url','created_at','updated_at','user_id','class_ids','race_id']);

export const AbilityScoreScalarFieldEnumSchema = z.enum(['id','index','name','url','full_name','desc','character_ids']);

export const SkillScalarFieldEnumSchema = z.enum(['id','index','name','url','desc','character_ids']);

export const LanguageScalarFieldEnumSchema = z.enum(['id','index','name','url','type','typical_speakers','script','character_ids']);

export const ProficiencyScalarFieldEnumSchema = z.enum(['id','index','name','url','type','race_ids','class_ids','character_ids']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const RoleSchema = z.enum(['USER','ADMIN']);

export type RoleType = `${z.infer<typeof RoleSchema>}`

export const ComponentsSchema = z.enum(['V','S','M']);

export type ComponentsType = `${z.infer<typeof ComponentsSchema>}`

export const AOETypeSchema = z.enum(['sphere','cone','cylinder','line','cube']);

export type AOETypeType = `${z.infer<typeof AOETypeSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  role: RoleSchema,
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date().nullable(),
  biography: z.string().nullable(),
  profile_pic_url: z.string(),
  friend_ids: z.string().array(),
  requested_friend_ids: z.string().array(),
  sent_request_ids: z.string().array(),
  joined_campaign_ids: z.string().array(),
  requested_campaign_ids: z.string().array(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// FRIENDS SCHEMA
/////////////////////////////////////////

export const FriendsSchema = z.object({
  user_id: z.string(),
  friend_ids: z.string().array(),
})

export type Friends = z.infer<typeof FriendsSchema>

/////////////////////////////////////////
// REQUESTED FRIENDS SCHEMA
/////////////////////////////////////////

export const RequestedFriendsSchema = z.object({
  user_id: z.string(),
  requested_friend_ids: z.string().array(),
})

export type RequestedFriends = z.infer<typeof RequestedFriendsSchema>

/////////////////////////////////////////
// SENT REQUESTS SCHEMA
/////////////////////////////////////////

export const SentRequestsSchema = z.object({
  user_id: z.string(),
  sent_request_ids: z.string().array(),
})

export type SentRequests = z.infer<typeof SentRequestsSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint(),
  user_id: z.string(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// KEY SCHEMA
/////////////////////////////////////////

export const KeySchema = z.object({
  id: z.string(),
  hashed_password: z.string().nullable(),
  user_id: z.string(),
})

export type Key = z.infer<typeof KeySchema>

/////////////////////////////////////////
// SPELLBOOK SCHEMA
/////////////////////////////////////////

export const SpellbookSchema = z.object({
  id: z.string(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().nullable(),
  image_url: z.string().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date().nullable(),
  user_id: z.string(),
  character_id: z.string().nullable(),
  spell_ids: z.string().array(),
  class_ids: z.string().array(),
  race_ids: z.string().array(),
})

export type Spellbook = z.infer<typeof SpellbookSchema>

/////////////////////////////////////////
// CAMPAIGN SCHEMA
/////////////////////////////////////////

export const CampaignSchema = z.object({
  id: z.string(),
  campaign_name: z.string(),
  capaign_description: z.string().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date().nullable(),
  owner_id: z.string(),
  user_ids: z.string().array(),
  requested_user_ids: z.string().array(),
})

export type Campaign = z.infer<typeof CampaignSchema>

/////////////////////////////////////////
// SPELL SCHEMA
/////////////////////////////////////////

export const SpellSchema = z.object({
  components: ComponentsSchema.array(),
  id: z.string(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.string().array(),
  higher_level: z.string().array(),
  range: z.string(),
  material: z.string().nullable(),
  ritual: z.boolean(),
  duration: z.string(),
  concentration: z.boolean(),
  casting_time: z.string(),
  level: z.number().int(),
  attack_type: z.string().nullable(),
  damage: JsonValueSchema,
  spellbook_ids: z.string().array(),
})

export type Spell = z.infer<typeof SpellSchema>

/////////////////////////////////////////
// CLASS SCHEMA
/////////////////////////////////////////

export const ClassSchema = z.object({
  id: z.string(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  hit_die: z.number().int(),
  class_levels: z.string(),
  spells: z.string().nullable(),
  proficiency_ids: z.string().array(),
  spellbook_ids: z.string().array(),
  character_ids: z.string().array(),
})

export type Class = z.infer<typeof ClassSchema>

/////////////////////////////////////////
// RACE SCHEMA
/////////////////////////////////////////

export const RaceSchema = z.object({
  id: z.string(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  speed: z.number().int(),
  alignment: z.string(),
  age: z.string(),
  size: z.string(),
  size_description: z.string(),
  language_desc: z.string(),
  spellbook_ids: z.string().array(),
})

export type Race = z.infer<typeof RaceSchema>

/////////////////////////////////////////
// CHARACTER SCHEMA
/////////////////////////////////////////

export const CharacterSchema = z.object({
  id: z.string(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().nullable(),
  backstory: z.string().nullable(),
  level: z.number().int(),
  experience: z.number().int().nullable(),
  next_level: z.number().int().nullable(),
  age: z.number().int().nullable(),
  Height: z.string().nullable(),
  weight: z.number().int().nullable(),
  size: z.string().nullable(),
  gender: z.string().nullable(),
  eye_color: z.string().nullable(),
  hair_color: z.string().nullable(),
  skin_color: z.string().nullable(),
  saving_throw_ids: z.string().array(),
  skill_ids: z.string().array(),
  armor_class: z.number().int().nullable(),
  language_ids: z.string().array(),
  proficiency_ids: z.string().array(),
  items: z.string().array(),
  image_url: z.string().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date().nullable(),
  user_id: z.string(),
  class_ids: z.string().array(),
  race_id: z.string(),
})

export type Character = z.infer<typeof CharacterSchema>

/////////////////////////////////////////
// ABILITY SCORE SCHEMA
/////////////////////////////////////////

export const AbilityScoreSchema = z.object({
  id: z.string(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  full_name: z.string(),
  desc: z.string().array(),
  character_ids: z.string().array(),
})

export type AbilityScore = z.infer<typeof AbilityScoreSchema>

/////////////////////////////////////////
// SKILL SCHEMA
/////////////////////////////////////////

export const SkillSchema = z.object({
  id: z.string(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.string().array(),
  character_ids: z.string().array(),
})

export type Skill = z.infer<typeof SkillSchema>

/////////////////////////////////////////
// LANGUAGE SCHEMA
/////////////////////////////////////////

export const LanguageSchema = z.object({
  id: z.string(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  typical_speakers: z.string().array(),
  script: z.string(),
  character_ids: z.string().array(),
})

export type Language = z.infer<typeof LanguageSchema>

/////////////////////////////////////////
// PROFICIENCY SCHEMA
/////////////////////////////////////////

export const ProficiencySchema = z.object({
  id: z.string(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  race_ids: z.string().array(),
  class_ids: z.string().array(),
  character_ids: z.string().array(),
})

export type Proficiency = z.infer<typeof ProficiencySchema>

/////////////////////////////////////////
// MONGODB TYPES
/////////////////////////////////////////
// API REFERENCE
//------------------------------------------------------


/////////////////////////////////////////
// API REFERENCE SCHEMA
/////////////////////////////////////////

export const APIReferenceSchema = z.object({
  index: z.string(),
  name: z.string(),
  url: z.string(),
})

export type APIReference = z.infer<typeof APIReferenceSchema>
// DIFFICULTY CLASS
//------------------------------------------------------


/////////////////////////////////////////
// DIFFICULTY CLASS SCHEMA
/////////////////////////////////////////

export const DifficultyClassSchema = z.object({
  dc_success: z.string(),
  desc: z.string().nullable(),
})

export type DifficultyClass = z.infer<typeof DifficultyClassSchema>
// CHOICE
//------------------------------------------------------


/////////////////////////////////////////
// CHOICE SCHEMA
/////////////////////////////////////////

export const ChoiceSchema = z.object({
  desc: z.string().nullable(),
  choose: z.number().int().nullable(),
  type: z.string().nullable(),
  from: JsonValueSchema,
})

export type Choice = z.infer<typeof ChoiceSchema>
// AREA OF EFFECT
//------------------------------------------------------


/////////////////////////////////////////
// AREA OF EFFECT SCHEMA
/////////////////////////////////////////

export const AreaOfEffectSchema = z.object({
  type: AOETypeSchema,
  size: z.number().int(),
})

export type AreaOfEffect = z.infer<typeof AreaOfEffectSchema>
// STARTING EQUIPMENT
//------------------------------------------------------


/////////////////////////////////////////
// STARTING EQUIPMENT SCHEMA
/////////////////////////////////////////

export const StartingEquipmentSchema = z.object({
  quantity: z.number().int(),
})

export type StartingEquipment = z.infer<typeof StartingEquipmentSchema>
// PREREQUISITE
//------------------------------------------------------


/////////////////////////////////////////
// PREREQUISITE SCHEMA
/////////////////////////////////////////

export const PrerequisiteSchema = z.object({
  minimum_score: z.number().int().nullable(),
})

export type Prerequisite = z.infer<typeof PrerequisiteSchema>
// INFO
//------------------------------------------------------


/////////////////////////////////////////
// INFO SCHEMA
/////////////////////////////////////////

export const InfoSchema = z.object({
  name: z.string(),
  description: z.string().array(),
})

export type Info = z.infer<typeof InfoSchema>
// SPELLCASTING
//------------------------------------------------------


/////////////////////////////////////////
// SPELLCASTING SCHEMA
/////////////////////////////////////////

export const SpellcastingSchema = z.object({
  level: z.number().int(),
  spells: z.string(),
})

export type Spellcasting = z.infer<typeof SpellcastingSchema>
// MULTICLASSING
//------------------------------------------------------


/////////////////////////////////////////
// MULTICLASSING SCHEMA
/////////////////////////////////////////

export const MulticlassingSchema = z.object({
  prerequisite_options: JsonValueSchema,
})

export type Multiclassing = z.infer<typeof MulticlassingSchema>
// CHARACTER ABILITY SCORE
//------------------------------------------------------


/////////////////////////////////////////
// CHARACTER ABILITY SCORE SCHEMA
/////////////////////////////////////////

export const CharacterAbilityScoreSchema = z.object({
  type: z.string(),
  value: z.number().int(),
})

export type CharacterAbilityScore = z.infer<typeof CharacterAbilityScoreSchema>
// ABILITY BONUS
//------------------------------------------------------


/////////////////////////////////////////
// ABILITY BONUS SCHEMA
/////////////////////////////////////////

export const AbilityBonusSchema = z.object({
  bonus: z.number().int(),
})

export type AbilityBonus = z.infer<typeof AbilityBonusSchema>
// DEATH SAVE
//------------------------------------------------------


/////////////////////////////////////////
// DEATH SAVE SCHEMA
/////////////////////////////////////////

export const DeathSaveSchema = z.object({
  successes: z.number().int(),
  failures: z.number().int(),
})

export type DeathSave = z.infer<typeof DeathSaveSchema>
// COIN TYPE
//------------------------------------------------------


/////////////////////////////////////////
// COIN TYPE SCHEMA
/////////////////////////////////////////

export const CoinTypeSchema = z.object({
  copper_pieces: z.number().int(),
  silver_pieces: z.number().int(),
  electrum_pieces: z.number().int(),
  gold_pieces: z.number().int(),
  platinum_pieces: z.number().int(),
})

export type CoinType = z.infer<typeof CoinTypeSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  auth_key: z.boolean().optional(),
  auth_session: z.boolean().optional(),
  spellbooks: z.boolean().optional(),
  characters: z.boolean().optional(),
  friends: z.boolean().optional(),
  requested_friends: z.boolean().optional(),
  sent_requests: z.boolean().optional(),
  owned_campaigns: z.boolean().optional(),
  joined_campaigns: z.boolean().optional(),
  requested_campaigns: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  username: z.boolean().optional(),
  discordUsername: z.boolean().optional(),
  role: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  biography: z.boolean().optional(),
  profile_pic_url: z.boolean().optional(),
  friend_ids: z.boolean().optional(),
  requested_friend_ids: z.boolean().optional(),
  sent_request_ids: z.boolean().optional(),
  joined_campaign_ids: z.boolean().optional(),
  requested_campaign_ids: z.boolean().optional(),
  auth_key: z.union([z.boolean(),z.lazy(() => KeyArgsSchema)]).optional(),
  auth_session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  spellbooks: z.union([z.boolean(),z.lazy(() => SpellbookArgsSchema)]).optional(),
  characters: z.union([z.boolean(),z.lazy(() => CharacterArgsSchema)]).optional(),
  friends: z.union([z.boolean(),z.lazy(() => FriendsArgsSchema)]).optional(),
  requested_friends: z.union([z.boolean(),z.lazy(() => RequestedFriendsArgsSchema)]).optional(),
  sent_requests: z.union([z.boolean(),z.lazy(() => SentRequestsArgsSchema)]).optional(),
  owned_campaigns: z.union([z.boolean(),z.lazy(() => CampaignArgsSchema)]).optional(),
  joined_campaigns: z.union([z.boolean(),z.lazy(() => CampaignArgsSchema)]).optional(),
  requested_campaigns: z.union([z.boolean(),z.lazy(() => CampaignArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FRIENDS
//------------------------------------------------------

export const FriendsIncludeSchema: z.ZodType<Prisma.FriendsInclude> = z.object({
}).strict()

export const FriendsArgsSchema: z.ZodType<Prisma.FriendsDefaultArgs> = z.object({
  select: z.lazy(() => FriendsSelectSchema).optional(),
  include: z.lazy(() => FriendsIncludeSchema).optional(),
}).strict();

export const FriendsCountOutputTypeArgsSchema: z.ZodType<Prisma.FriendsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => FriendsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const FriendsCountOutputTypeSelectSchema: z.ZodType<Prisma.FriendsCountOutputTypeSelect> = z.object({
  friends: z.boolean().optional(),
}).strict();

export const FriendsSelectSchema: z.ZodType<Prisma.FriendsSelect> = z.object({
  user_id: z.boolean().optional(),
  friend_ids: z.boolean().optional(),
  friends: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FriendsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// REQUESTED FRIENDS
//------------------------------------------------------

export const RequestedFriendsIncludeSchema: z.ZodType<Prisma.RequestedFriendsInclude> = z.object({
}).strict()

export const RequestedFriendsArgsSchema: z.ZodType<Prisma.RequestedFriendsDefaultArgs> = z.object({
  select: z.lazy(() => RequestedFriendsSelectSchema).optional(),
  include: z.lazy(() => RequestedFriendsIncludeSchema).optional(),
}).strict();

export const RequestedFriendsCountOutputTypeArgsSchema: z.ZodType<Prisma.RequestedFriendsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RequestedFriendsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RequestedFriendsCountOutputTypeSelectSchema: z.ZodType<Prisma.RequestedFriendsCountOutputTypeSelect> = z.object({
  requested_friends: z.boolean().optional(),
}).strict();

export const RequestedFriendsSelectSchema: z.ZodType<Prisma.RequestedFriendsSelect> = z.object({
  user_id: z.boolean().optional(),
  requested_friend_ids: z.boolean().optional(),
  requested_friends: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RequestedFriendsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SENT REQUESTS
//------------------------------------------------------

export const SentRequestsIncludeSchema: z.ZodType<Prisma.SentRequestsInclude> = z.object({
}).strict()

export const SentRequestsArgsSchema: z.ZodType<Prisma.SentRequestsDefaultArgs> = z.object({
  select: z.lazy(() => SentRequestsSelectSchema).optional(),
  include: z.lazy(() => SentRequestsIncludeSchema).optional(),
}).strict();

export const SentRequestsCountOutputTypeArgsSchema: z.ZodType<Prisma.SentRequestsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SentRequestsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SentRequestsCountOutputTypeSelectSchema: z.ZodType<Prisma.SentRequestsCountOutputTypeSelect> = z.object({
  sent_requests: z.boolean().optional(),
}).strict();

export const SentRequestsSelectSchema: z.ZodType<Prisma.SentRequestsSelect> = z.object({
  user_id: z.boolean().optional(),
  sent_request_ids: z.boolean().optional(),
  sent_requests: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SentRequestsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  active_expires: z.boolean().optional(),
  idle_expires: z.boolean().optional(),
  user_id: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// KEY
//------------------------------------------------------

export const KeyIncludeSchema: z.ZodType<Prisma.KeyInclude> = z.object({
}).strict()

export const KeyArgsSchema: z.ZodType<Prisma.KeyDefaultArgs> = z.object({
  select: z.lazy(() => KeySelectSchema).optional(),
  include: z.lazy(() => KeyIncludeSchema).optional(),
}).strict();

export const KeySelectSchema: z.ZodType<Prisma.KeySelect> = z.object({
  id: z.boolean().optional(),
  hashed_password: z.boolean().optional(),
  user_id: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// SPELLBOOK
//------------------------------------------------------

export const SpellbookIncludeSchema: z.ZodType<Prisma.SpellbookInclude> = z.object({
}).strict()

export const SpellbookArgsSchema: z.ZodType<Prisma.SpellbookDefaultArgs> = z.object({
  select: z.lazy(() => SpellbookSelectSchema).optional(),
  include: z.lazy(() => SpellbookIncludeSchema).optional(),
}).strict();

export const SpellbookCountOutputTypeArgsSchema: z.ZodType<Prisma.SpellbookCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SpellbookCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SpellbookCountOutputTypeSelectSchema: z.ZodType<Prisma.SpellbookCountOutputTypeSelect> = z.object({
  spells: z.boolean().optional(),
  classes: z.boolean().optional(),
  races: z.boolean().optional(),
}).strict();

export const SpellbookSelectSchema: z.ZodType<Prisma.SpellbookSelect> = z.object({
  id: z.boolean().optional(),
  spellbook_name: z.boolean().optional(),
  character_name: z.boolean().optional(),
  spellbook_description: z.boolean().optional(),
  image_url: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  user_id: z.boolean().optional(),
  character_id: z.boolean().optional(),
  spell_ids: z.boolean().optional(),
  class_ids: z.boolean().optional(),
  race_ids: z.boolean().optional(),
  auth_user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  character: z.union([z.boolean(),z.lazy(() => CharacterArgsSchema)]).optional(),
  spells: z.union([z.boolean(),z.lazy(() => SpellArgsSchema)]).optional(),
  classes: z.union([z.boolean(),z.lazy(() => ClassArgsSchema)]).optional(),
  races: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SpellbookCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CAMPAIGN
//------------------------------------------------------

export const CampaignIncludeSchema: z.ZodType<Prisma.CampaignInclude> = z.object({
}).strict()

export const CampaignArgsSchema: z.ZodType<Prisma.CampaignDefaultArgs> = z.object({
  select: z.lazy(() => CampaignSelectSchema).optional(),
  include: z.lazy(() => CampaignIncludeSchema).optional(),
}).strict();

export const CampaignCountOutputTypeArgsSchema: z.ZodType<Prisma.CampaignCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CampaignCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CampaignCountOutputTypeSelectSchema: z.ZodType<Prisma.CampaignCountOutputTypeSelect> = z.object({
  users: z.boolean().optional(),
  requested_users: z.boolean().optional(),
}).strict();

export const CampaignSelectSchema: z.ZodType<Prisma.CampaignSelect> = z.object({
  id: z.boolean().optional(),
  campaign_name: z.boolean().optional(),
  capaign_description: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  owner_id: z.boolean().optional(),
  user_ids: z.boolean().optional(),
  requested_user_ids: z.boolean().optional(),
  owner_user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  requested_users: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CampaignCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SPELL
//------------------------------------------------------

export const SpellIncludeSchema: z.ZodType<Prisma.SpellInclude> = z.object({
}).strict()

export const SpellArgsSchema: z.ZodType<Prisma.SpellDefaultArgs> = z.object({
  select: z.lazy(() => SpellSelectSchema).optional(),
  include: z.lazy(() => SpellIncludeSchema).optional(),
}).strict();

export const SpellCountOutputTypeArgsSchema: z.ZodType<Prisma.SpellCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SpellCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SpellCountOutputTypeSelectSchema: z.ZodType<Prisma.SpellCountOutputTypeSelect> = z.object({
  classes: z.boolean().optional(),
  subclasses: z.boolean().optional(),
  spellbooks: z.boolean().optional(),
}).strict();

export const SpellSelectSchema: z.ZodType<Prisma.SpellSelect> = z.object({
  id: z.boolean().optional(),
  index: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
  desc: z.boolean().optional(),
  higher_level: z.boolean().optional(),
  range: z.boolean().optional(),
  components: z.boolean().optional(),
  material: z.boolean().optional(),
  area_of_effect: z.union([z.boolean(),z.lazy(() => AreaOfEffectArgsSchema)]).optional(),
  ritual: z.boolean().optional(),
  duration: z.boolean().optional(),
  concentration: z.boolean().optional(),
  casting_time: z.boolean().optional(),
  level: z.boolean().optional(),
  attack_type: z.boolean().optional(),
  damage: z.boolean().optional(),
  dc: z.union([z.boolean(),z.lazy(() => DifficultyClassArgsSchema)]).optional(),
  school: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  classes: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  subclasses: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  spellbook_ids: z.boolean().optional(),
  spellbooks: z.union([z.boolean(),z.lazy(() => SpellbookArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SpellCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CLASS
//------------------------------------------------------

export const ClassIncludeSchema: z.ZodType<Prisma.ClassInclude> = z.object({
}).strict()

export const ClassArgsSchema: z.ZodType<Prisma.ClassDefaultArgs> = z.object({
  select: z.lazy(() => ClassSelectSchema).optional(),
  include: z.lazy(() => ClassIncludeSchema).optional(),
}).strict();

export const ClassCountOutputTypeArgsSchema: z.ZodType<Prisma.ClassCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ClassCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ClassCountOutputTypeSelectSchema: z.ZodType<Prisma.ClassCountOutputTypeSelect> = z.object({
  starting_equipment: z.boolean().optional(),
  starting_equipment_options: z.boolean().optional(),
  proficiency_choices: z.boolean().optional(),
  saving_throws: z.boolean().optional(),
  subclasses: z.boolean().optional(),
  proficiencies: z.boolean().optional(),
  spellbooks: z.boolean().optional(),
  characters: z.boolean().optional(),
}).strict();

export const ClassSelectSchema: z.ZodType<Prisma.ClassSelect> = z.object({
  id: z.boolean().optional(),
  index: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
  hit_die: z.boolean().optional(),
  class_levels: z.boolean().optional(),
  multi_classing: z.union([z.boolean(),z.lazy(() => MulticlassingArgsSchema)]).optional(),
  spells: z.boolean().optional(),
  starting_equipment: z.union([z.boolean(),z.lazy(() => StartingEquipmentArgsSchema)]).optional(),
  starting_equipment_options: z.union([z.boolean(),z.lazy(() => ChoiceArgsSchema)]).optional(),
  proficiency_ids: z.boolean().optional(),
  proficiency_choices: z.union([z.boolean(),z.lazy(() => ChoiceArgsSchema)]).optional(),
  saving_throws: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  subclasses: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  spellbook_ids: z.boolean().optional(),
  character_ids: z.boolean().optional(),
  proficiencies: z.union([z.boolean(),z.lazy(() => ProficiencyArgsSchema)]).optional(),
  spellbooks: z.union([z.boolean(),z.lazy(() => SpellbookArgsSchema)]).optional(),
  characters: z.union([z.boolean(),z.lazy(() => CharacterArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ClassCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RACE
//------------------------------------------------------

export const RaceIncludeSchema: z.ZodType<Prisma.RaceInclude> = z.object({
}).strict()

export const RaceArgsSchema: z.ZodType<Prisma.RaceDefaultArgs> = z.object({
  select: z.lazy(() => RaceSelectSchema).optional(),
  include: z.lazy(() => RaceIncludeSchema).optional(),
}).strict();

export const RaceCountOutputTypeArgsSchema: z.ZodType<Prisma.RaceCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RaceCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RaceCountOutputTypeSelectSchema: z.ZodType<Prisma.RaceCountOutputTypeSelect> = z.object({
  ability_bonuses: z.boolean().optional(),
  starting_proficiencies: z.boolean().optional(),
  languages: z.boolean().optional(),
  traits: z.boolean().optional(),
  subraces: z.boolean().optional(),
  spellbooks: z.boolean().optional(),
  characters: z.boolean().optional(),
}).strict();

export const RaceSelectSchema: z.ZodType<Prisma.RaceSelect> = z.object({
  id: z.boolean().optional(),
  index: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
  speed: z.boolean().optional(),
  ability_bonuses: z.union([z.boolean(),z.lazy(() => AbilityBonusArgsSchema)]).optional(),
  alignment: z.boolean().optional(),
  age: z.boolean().optional(),
  size: z.boolean().optional(),
  size_description: z.boolean().optional(),
  starting_proficiencies: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  starting_proficiency_options: z.union([z.boolean(),z.lazy(() => ChoiceArgsSchema)]).optional(),
  languages: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  language_desc: z.boolean().optional(),
  traits: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  subraces: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  spellbook_ids: z.boolean().optional(),
  spellbooks: z.union([z.boolean(),z.lazy(() => SpellbookArgsSchema)]).optional(),
  characters: z.union([z.boolean(),z.lazy(() => CharacterArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RaceCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CHARACTER
//------------------------------------------------------

export const CharacterIncludeSchema: z.ZodType<Prisma.CharacterInclude> = z.object({
}).strict()

export const CharacterArgsSchema: z.ZodType<Prisma.CharacterDefaultArgs> = z.object({
  select: z.lazy(() => CharacterSelectSchema).optional(),
  include: z.lazy(() => CharacterIncludeSchema).optional(),
}).strict();

export const CharacterCountOutputTypeArgsSchema: z.ZodType<Prisma.CharacterCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CharacterCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CharacterCountOutputTypeSelectSchema: z.ZodType<Prisma.CharacterCountOutputTypeSelect> = z.object({
  scores_original: z.boolean().optional(),
  scores_current: z.boolean().optional(),
  spellbooks: z.boolean().optional(),
  saving_throws: z.boolean().optional(),
  skills: z.boolean().optional(),
  languages: z.boolean().optional(),
  proficiencies: z.boolean().optional(),
  classes: z.boolean().optional(),
}).strict();

export const CharacterSelectSchema: z.ZodType<Prisma.CharacterSelect> = z.object({
  id: z.boolean().optional(),
  character_name: z.boolean().optional(),
  player_name: z.boolean().optional(),
  description: z.boolean().optional(),
  backstory: z.boolean().optional(),
  level: z.boolean().optional(),
  experience: z.boolean().optional(),
  next_level: z.boolean().optional(),
  age: z.boolean().optional(),
  Height: z.boolean().optional(),
  weight: z.boolean().optional(),
  size: z.boolean().optional(),
  gender: z.boolean().optional(),
  eye_color: z.boolean().optional(),
  hair_color: z.boolean().optional(),
  skin_color: z.boolean().optional(),
  scores_original: z.union([z.boolean(),z.lazy(() => CharacterAbilityScoreArgsSchema)]).optional(),
  scores_current: z.union([z.boolean(),z.lazy(() => CharacterAbilityScoreArgsSchema)]).optional(),
  saving_throw_ids: z.boolean().optional(),
  skill_ids: z.boolean().optional(),
  armor_class: z.boolean().optional(),
  death_saves: z.union([z.boolean(),z.lazy(() => DeathSaveArgsSchema)]).optional(),
  language_ids: z.boolean().optional(),
  proficiency_ids: z.boolean().optional(),
  items: z.boolean().optional(),
  coins: z.union([z.boolean(),z.lazy(() => CoinTypeArgsSchema)]).optional(),
  image_url: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  user_id: z.boolean().optional(),
  class_ids: z.boolean().optional(),
  race_id: z.boolean().optional(),
  spellbooks: z.union([z.boolean(),z.lazy(() => SpellbookArgsSchema)]).optional(),
  saving_throws: z.union([z.boolean(),z.lazy(() => AbilityScoreArgsSchema)]).optional(),
  skills: z.union([z.boolean(),z.lazy(() => SkillArgsSchema)]).optional(),
  languages: z.union([z.boolean(),z.lazy(() => LanguageArgsSchema)]).optional(),
  proficiencies: z.union([z.boolean(),z.lazy(() => ProficiencyArgsSchema)]).optional(),
  auth_user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  classes: z.union([z.boolean(),z.lazy(() => ClassArgsSchema)]).optional(),
  race: z.union([z.boolean(),z.lazy(() => RaceArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CharacterCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ABILITY SCORE
//------------------------------------------------------

export const AbilityScoreIncludeSchema: z.ZodType<Prisma.AbilityScoreInclude> = z.object({
}).strict()

export const AbilityScoreArgsSchema: z.ZodType<Prisma.AbilityScoreDefaultArgs> = z.object({
  select: z.lazy(() => AbilityScoreSelectSchema).optional(),
  include: z.lazy(() => AbilityScoreIncludeSchema).optional(),
}).strict();

export const AbilityScoreCountOutputTypeArgsSchema: z.ZodType<Prisma.AbilityScoreCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => AbilityScoreCountOutputTypeSelectSchema).nullish(),
}).strict();

export const AbilityScoreCountOutputTypeSelectSchema: z.ZodType<Prisma.AbilityScoreCountOutputTypeSelect> = z.object({
  skills: z.boolean().optional(),
  character: z.boolean().optional(),
}).strict();

export const AbilityScoreSelectSchema: z.ZodType<Prisma.AbilityScoreSelect> = z.object({
  id: z.boolean().optional(),
  index: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
  full_name: z.boolean().optional(),
  desc: z.boolean().optional(),
  skills: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  character_ids: z.boolean().optional(),
  character: z.union([z.boolean(),z.lazy(() => CharacterArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AbilityScoreCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SKILL
//------------------------------------------------------

export const SkillIncludeSchema: z.ZodType<Prisma.SkillInclude> = z.object({
}).strict()

export const SkillArgsSchema: z.ZodType<Prisma.SkillDefaultArgs> = z.object({
  select: z.lazy(() => SkillSelectSchema).optional(),
  include: z.lazy(() => SkillIncludeSchema).optional(),
}).strict();

export const SkillCountOutputTypeArgsSchema: z.ZodType<Prisma.SkillCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SkillCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SkillCountOutputTypeSelectSchema: z.ZodType<Prisma.SkillCountOutputTypeSelect> = z.object({
  characters: z.boolean().optional(),
}).strict();

export const SkillSelectSchema: z.ZodType<Prisma.SkillSelect> = z.object({
  id: z.boolean().optional(),
  index: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
  desc: z.boolean().optional(),
  ability_score: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  character_ids: z.boolean().optional(),
  characters: z.union([z.boolean(),z.lazy(() => CharacterArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SkillCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LANGUAGE
//------------------------------------------------------

export const LanguageIncludeSchema: z.ZodType<Prisma.LanguageInclude> = z.object({
}).strict()

export const LanguageArgsSchema: z.ZodType<Prisma.LanguageDefaultArgs> = z.object({
  select: z.lazy(() => LanguageSelectSchema).optional(),
  include: z.lazy(() => LanguageIncludeSchema).optional(),
}).strict();

export const LanguageCountOutputTypeArgsSchema: z.ZodType<Prisma.LanguageCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => LanguageCountOutputTypeSelectSchema).nullish(),
}).strict();

export const LanguageCountOutputTypeSelectSchema: z.ZodType<Prisma.LanguageCountOutputTypeSelect> = z.object({
  characters: z.boolean().optional(),
}).strict();

export const LanguageSelectSchema: z.ZodType<Prisma.LanguageSelect> = z.object({
  id: z.boolean().optional(),
  index: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
  type: z.boolean().optional(),
  typical_speakers: z.boolean().optional(),
  script: z.boolean().optional(),
  character_ids: z.boolean().optional(),
  characters: z.union([z.boolean(),z.lazy(() => CharacterArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LanguageCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROFICIENCY
//------------------------------------------------------

export const ProficiencyIncludeSchema: z.ZodType<Prisma.ProficiencyInclude> = z.object({
}).strict()

export const ProficiencyArgsSchema: z.ZodType<Prisma.ProficiencyDefaultArgs> = z.object({
  select: z.lazy(() => ProficiencySelectSchema).optional(),
  include: z.lazy(() => ProficiencyIncludeSchema).optional(),
}).strict();

export const ProficiencyCountOutputTypeArgsSchema: z.ZodType<Prisma.ProficiencyCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProficiencyCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProficiencyCountOutputTypeSelectSchema: z.ZodType<Prisma.ProficiencyCountOutputTypeSelect> = z.object({
  classes: z.boolean().optional(),
  characters: z.boolean().optional(),
}).strict();

export const ProficiencySelectSchema: z.ZodType<Prisma.ProficiencySelect> = z.object({
  id: z.boolean().optional(),
  index: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
  type: z.boolean().optional(),
  race_ids: z.boolean().optional(),
  reference: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  class_ids: z.boolean().optional(),
  character_ids: z.boolean().optional(),
  classes: z.union([z.boolean(),z.lazy(() => ClassArgsSchema)]).optional(),
  characters: z.union([z.boolean(),z.lazy(() => CharacterArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProficiencyCountOutputTypeArgsSchema)]).optional(),
}).strict()

// AREA OF EFFECT
//------------------------------------------------------

export const AreaOfEffectArgsSchema: z.ZodType<Prisma.AreaOfEffectDefaultArgs> = z.object({
  select: z.lazy(() => AreaOfEffectSelectSchema).optional(),
}).strict();

export const AreaOfEffectSelectSchema: z.ZodType<Prisma.AreaOfEffectSelect> = z.object({
  size: z.boolean().optional(),
  type: z.boolean().optional(),
}).strict()

// DIFFICULTY CLASS
//------------------------------------------------------

export const DifficultyClassIncludeSchema: z.ZodType<Prisma.DifficultyClassInclude> = z.object({
}).strict()

export const DifficultyClassArgsSchema: z.ZodType<Prisma.DifficultyClassDefaultArgs> = z.object({
  select: z.lazy(() => DifficultyClassSelectSchema).optional(),
  include: z.lazy(() => DifficultyClassIncludeSchema).optional(),
}).strict();

export const DifficultyClassSelectSchema: z.ZodType<Prisma.DifficultyClassSelect> = z.object({
  dc_success: z.boolean().optional(),
  dc_type: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  desc: z.boolean().optional(),
}).strict()

// API REFERENCE
//------------------------------------------------------

export const APIReferenceArgsSchema: z.ZodType<Prisma.APIReferenceDefaultArgs> = z.object({
  select: z.lazy(() => APIReferenceSelectSchema).optional(),
}).strict();

export const APIReferenceSelectSchema: z.ZodType<Prisma.APIReferenceSelect> = z.object({
  index: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
}).strict()

// MULTICLASSING
//------------------------------------------------------

export const MulticlassingIncludeSchema: z.ZodType<Prisma.MulticlassingInclude> = z.object({
}).strict()

export const MulticlassingArgsSchema: z.ZodType<Prisma.MulticlassingDefaultArgs> = z.object({
  select: z.lazy(() => MulticlassingSelectSchema).optional(),
  include: z.lazy(() => MulticlassingIncludeSchema).optional(),
}).strict();

export const MulticlassingSelectSchema: z.ZodType<Prisma.MulticlassingSelect> = z.object({
  prerequisites: z.union([z.boolean(),z.lazy(() => PrerequisiteArgsSchema)]).optional(),
  prerequisite_options: z.boolean().optional(),
  proficiencies: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  proficiency_choices: z.union([z.boolean(),z.lazy(() => ChoiceArgsSchema)]).optional(),
}).strict()

// STARTING EQUIPMENT
//------------------------------------------------------

export const StartingEquipmentIncludeSchema: z.ZodType<Prisma.StartingEquipmentInclude> = z.object({
}).strict()

export const StartingEquipmentArgsSchema: z.ZodType<Prisma.StartingEquipmentDefaultArgs> = z.object({
  select: z.lazy(() => StartingEquipmentSelectSchema).optional(),
  include: z.lazy(() => StartingEquipmentIncludeSchema).optional(),
}).strict();

export const StartingEquipmentSelectSchema: z.ZodType<Prisma.StartingEquipmentSelect> = z.object({
  quantity: z.boolean().optional(),
  equipment: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
}).strict()

// CHOICE
//------------------------------------------------------

export const ChoiceArgsSchema: z.ZodType<Prisma.ChoiceDefaultArgs> = z.object({
  select: z.lazy(() => ChoiceSelectSchema).optional(),
}).strict();

export const ChoiceSelectSchema: z.ZodType<Prisma.ChoiceSelect> = z.object({
  desc: z.boolean().optional(),
  choose: z.boolean().optional(),
  type: z.boolean().optional(),
  from: z.boolean().optional(),
}).strict()

// ABILITY BONUS
//------------------------------------------------------

export const AbilityBonusIncludeSchema: z.ZodType<Prisma.AbilityBonusInclude> = z.object({
}).strict()

export const AbilityBonusArgsSchema: z.ZodType<Prisma.AbilityBonusDefaultArgs> = z.object({
  select: z.lazy(() => AbilityBonusSelectSchema).optional(),
  include: z.lazy(() => AbilityBonusIncludeSchema).optional(),
}).strict();

export const AbilityBonusSelectSchema: z.ZodType<Prisma.AbilityBonusSelect> = z.object({
  bonus: z.boolean().optional(),
  ability_score: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
}).strict()

// CHARACTER ABILITY SCORE
//------------------------------------------------------

export const CharacterAbilityScoreArgsSchema: z.ZodType<Prisma.CharacterAbilityScoreDefaultArgs> = z.object({
  select: z.lazy(() => CharacterAbilityScoreSelectSchema).optional(),
}).strict();

export const CharacterAbilityScoreSelectSchema: z.ZodType<Prisma.CharacterAbilityScoreSelect> = z.object({
  type: z.boolean().optional(),
  value: z.boolean().optional(),
}).strict()

// DEATH SAVE
//------------------------------------------------------

export const DeathSaveArgsSchema: z.ZodType<Prisma.DeathSaveDefaultArgs> = z.object({
  select: z.lazy(() => DeathSaveSelectSchema).optional(),
}).strict();

export const DeathSaveSelectSchema: z.ZodType<Prisma.DeathSaveSelect> = z.object({
  successes: z.boolean().optional(),
  failures: z.boolean().optional(),
}).strict()

// COIN TYPE
//------------------------------------------------------

export const CoinTypeArgsSchema: z.ZodType<Prisma.CoinTypeDefaultArgs> = z.object({
  select: z.lazy(() => CoinTypeSelectSchema).optional(),
}).strict();

export const CoinTypeSelectSchema: z.ZodType<Prisma.CoinTypeSelect> = z.object({
  copper_pieces: z.boolean().optional(),
  silver_pieces: z.boolean().optional(),
  electrum_pieces: z.boolean().optional(),
  gold_pieces: z.boolean().optional(),
  platinum_pieces: z.boolean().optional(),
}).strict()

// PREREQUISITE
//------------------------------------------------------

export const PrerequisiteIncludeSchema: z.ZodType<Prisma.PrerequisiteInclude> = z.object({
}).strict()

export const PrerequisiteArgsSchema: z.ZodType<Prisma.PrerequisiteDefaultArgs> = z.object({
  select: z.lazy(() => PrerequisiteSelectSchema).optional(),
  include: z.lazy(() => PrerequisiteIncludeSchema).optional(),
}).strict();

export const PrerequisiteSelectSchema: z.ZodType<Prisma.PrerequisiteSelect> = z.object({
  ability_score: z.union([z.boolean(),z.lazy(() => APIReferenceArgsSchema)]).optional(),
  minimum_score: z.boolean().optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  username: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  discordUsername: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  biography: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profile_pic_url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  sent_request_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  joined_campaign_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_campaign_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  auth_key: z.lazy(() => KeyListRelationFilterSchema).optional(),
  auth_session: z.lazy(() => SessionListRelationFilterSchema).optional(),
  spellbooks: z.lazy(() => SpellbookListRelationFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional(),
  friends: z.lazy(() => FriendsListRelationFilterSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsListRelationFilterSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsListRelationFilterSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignListRelationFilterSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignListRelationFilterSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  discordUsername: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  biography: z.lazy(() => SortOrderSchema).optional(),
  profile_pic_url: z.lazy(() => SortOrderSchema).optional(),
  friend_ids: z.lazy(() => SortOrderSchema).optional(),
  requested_friend_ids: z.lazy(() => SortOrderSchema).optional(),
  sent_request_ids: z.lazy(() => SortOrderSchema).optional(),
  joined_campaign_ids: z.lazy(() => SortOrderSchema).optional(),
  requested_campaign_ids: z.lazy(() => SortOrderSchema).optional(),
  auth_key: z.lazy(() => KeyOrderByRelationAggregateInputSchema).optional(),
  auth_session: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookOrderByRelationAggregateInputSchema).optional(),
  characters: z.lazy(() => CharacterOrderByRelationAggregateInputSchema).optional(),
  friends: z.lazy(() => FriendsOrderByRelationAggregateInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsOrderByRelationAggregateInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsOrderByRelationAggregateInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignOrderByRelationAggregateInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignOrderByRelationAggregateInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    username: z.string(),
    discordUsername: z.string()
  }),
  z.object({
    id: z.string(),
    username: z.string(),
  }),
  z.object({
    id: z.string(),
    discordUsername: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    username: z.string(),
    discordUsername: z.string(),
  }),
  z.object({
    username: z.string(),
  }),
  z.object({
    discordUsername: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  username: z.string().optional(),
  discordUsername: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  biography: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profile_pic_url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  sent_request_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  joined_campaign_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_campaign_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  auth_key: z.lazy(() => KeyListRelationFilterSchema).optional(),
  auth_session: z.lazy(() => SessionListRelationFilterSchema).optional(),
  spellbooks: z.lazy(() => SpellbookListRelationFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional(),
  friends: z.lazy(() => FriendsListRelationFilterSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsListRelationFilterSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsListRelationFilterSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignListRelationFilterSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignListRelationFilterSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  discordUsername: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  biography: z.lazy(() => SortOrderSchema).optional(),
  profile_pic_url: z.lazy(() => SortOrderSchema).optional(),
  friend_ids: z.lazy(() => SortOrderSchema).optional(),
  requested_friend_ids: z.lazy(() => SortOrderSchema).optional(),
  sent_request_ids: z.lazy(() => SortOrderSchema).optional(),
  joined_campaign_ids: z.lazy(() => SortOrderSchema).optional(),
  requested_campaign_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  username: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  discordUsername: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => EnumRoleWithAggregatesFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  biography: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  profile_pic_url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  sent_request_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  joined_campaign_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_campaign_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const FriendsWhereInputSchema: z.ZodType<Prisma.FriendsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FriendsWhereInputSchema),z.lazy(() => FriendsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FriendsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FriendsWhereInputSchema),z.lazy(() => FriendsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  friends: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict();

export const FriendsOrderByWithRelationInputSchema: z.ZodType<Prisma.FriendsOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  friend_ids: z.lazy(() => SortOrderSchema).optional(),
  friends: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional()
}).strict();

export const FriendsWhereUniqueInputSchema: z.ZodType<Prisma.FriendsWhereUniqueInput> = z.object({
  user_id: z.string()
})
.and(z.object({
  user_id: z.string().optional(),
  AND: z.union([ z.lazy(() => FriendsWhereInputSchema),z.lazy(() => FriendsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FriendsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FriendsWhereInputSchema),z.lazy(() => FriendsWhereInputSchema).array() ]).optional(),
  friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  friends: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict());

export const FriendsOrderByWithAggregationInputSchema: z.ZodType<Prisma.FriendsOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  friend_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FriendsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FriendsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FriendsMinOrderByAggregateInputSchema).optional()
}).strict();

export const FriendsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FriendsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FriendsScalarWhereWithAggregatesInputSchema),z.lazy(() => FriendsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FriendsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FriendsScalarWhereWithAggregatesInputSchema),z.lazy(() => FriendsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  friend_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const RequestedFriendsWhereInputSchema: z.ZodType<Prisma.RequestedFriendsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RequestedFriendsWhereInputSchema),z.lazy(() => RequestedFriendsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RequestedFriendsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RequestedFriendsWhereInputSchema),z.lazy(() => RequestedFriendsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requested_friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_friends: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict();

export const RequestedFriendsOrderByWithRelationInputSchema: z.ZodType<Prisma.RequestedFriendsOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  requested_friend_ids: z.lazy(() => SortOrderSchema).optional(),
  requested_friends: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RequestedFriendsWhereUniqueInputSchema: z.ZodType<Prisma.RequestedFriendsWhereUniqueInput> = z.object({
  user_id: z.string()
})
.and(z.object({
  user_id: z.string().optional(),
  AND: z.union([ z.lazy(() => RequestedFriendsWhereInputSchema),z.lazy(() => RequestedFriendsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RequestedFriendsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RequestedFriendsWhereInputSchema),z.lazy(() => RequestedFriendsWhereInputSchema).array() ]).optional(),
  requested_friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_friends: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict());

export const RequestedFriendsOrderByWithAggregationInputSchema: z.ZodType<Prisma.RequestedFriendsOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  requested_friend_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RequestedFriendsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RequestedFriendsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RequestedFriendsMinOrderByAggregateInputSchema).optional()
}).strict();

export const RequestedFriendsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RequestedFriendsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RequestedFriendsScalarWhereWithAggregatesInputSchema),z.lazy(() => RequestedFriendsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RequestedFriendsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RequestedFriendsScalarWhereWithAggregatesInputSchema),z.lazy(() => RequestedFriendsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  requested_friend_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const SentRequestsWhereInputSchema: z.ZodType<Prisma.SentRequestsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SentRequestsWhereInputSchema),z.lazy(() => SentRequestsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SentRequestsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SentRequestsWhereInputSchema),z.lazy(() => SentRequestsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sent_request_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  sent_requests: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict();

export const SentRequestsOrderByWithRelationInputSchema: z.ZodType<Prisma.SentRequestsOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  sent_request_ids: z.lazy(() => SortOrderSchema).optional(),
  sent_requests: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SentRequestsWhereUniqueInputSchema: z.ZodType<Prisma.SentRequestsWhereUniqueInput> = z.object({
  user_id: z.string()
})
.and(z.object({
  user_id: z.string().optional(),
  AND: z.union([ z.lazy(() => SentRequestsWhereInputSchema),z.lazy(() => SentRequestsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SentRequestsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SentRequestsWhereInputSchema),z.lazy(() => SentRequestsWhereInputSchema).array() ]).optional(),
  sent_request_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  sent_requests: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict());

export const SentRequestsOrderByWithAggregationInputSchema: z.ZodType<Prisma.SentRequestsOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  sent_request_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SentRequestsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SentRequestsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SentRequestsMinOrderByAggregateInputSchema).optional()
}).strict();

export const SentRequestsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SentRequestsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SentRequestsScalarWhereWithAggregatesInputSchema),z.lazy(() => SentRequestsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SentRequestsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SentRequestsScalarWhereWithAggregatesInputSchema),z.lazy(() => SentRequestsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sent_request_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SessionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SessionSumOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const KeyWhereInputSchema: z.ZodType<Prisma.KeyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const KeyOrderByWithRelationInputSchema: z.ZodType<Prisma.KeyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const KeyWhereUniqueInputSchema: z.ZodType<Prisma.KeyWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyWhereInputSchema),z.lazy(() => KeyWhereInputSchema).array() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const KeyOrderByWithAggregationInputSchema: z.ZodType<Prisma.KeyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => KeyCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => KeyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => KeyMinOrderByAggregateInputSchema).optional()
}).strict();

export const KeyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.KeyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => KeyScalarWhereWithAggregatesInputSchema),z.lazy(() => KeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyScalarWhereWithAggregatesInputSchema),z.lazy(() => KeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const SpellbookWhereInputSchema: z.ZodType<Prisma.SpellbookWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SpellbookWhereInputSchema),z.lazy(() => SpellbookWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpellbookWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpellbookWhereInputSchema),z.lazy(() => SpellbookWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  spellbook_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  character_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  spellbook_description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  image_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  character_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  spell_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  race_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  auth_user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  character: z.union([ z.lazy(() => CharacterNullableRelationFilterSchema),z.lazy(() => CharacterWhereInputSchema) ]).optional().nullable(),
  spells: z.lazy(() => SpellListRelationFilterSchema).optional(),
  classes: z.lazy(() => ClassListRelationFilterSchema).optional(),
  races: z.lazy(() => RaceListRelationFilterSchema).optional()
}).strict();

export const SpellbookOrderByWithRelationInputSchema: z.ZodType<Prisma.SpellbookOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  spellbook_name: z.lazy(() => SortOrderSchema).optional(),
  character_name: z.lazy(() => SortOrderSchema).optional(),
  spellbook_description: z.lazy(() => SortOrderSchema).optional(),
  image_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  character_id: z.lazy(() => SortOrderSchema).optional(),
  spell_ids: z.lazy(() => SortOrderSchema).optional(),
  class_ids: z.lazy(() => SortOrderSchema).optional(),
  race_ids: z.lazy(() => SortOrderSchema).optional(),
  auth_user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  character: z.lazy(() => CharacterOrderByWithRelationInputSchema).optional(),
  spells: z.lazy(() => SpellOrderByRelationAggregateInputSchema).optional(),
  classes: z.lazy(() => ClassOrderByRelationAggregateInputSchema).optional(),
  races: z.lazy(() => RaceOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SpellbookWhereUniqueInputSchema: z.ZodType<Prisma.SpellbookWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    spellbook_name: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    spellbook_name: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  spellbook_name: z.string().optional(),
  AND: z.union([ z.lazy(() => SpellbookWhereInputSchema),z.lazy(() => SpellbookWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpellbookWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpellbookWhereInputSchema),z.lazy(() => SpellbookWhereInputSchema).array() ]).optional(),
  character_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  spellbook_description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  image_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  character_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  spell_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  race_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  auth_user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  character: z.union([ z.lazy(() => CharacterNullableRelationFilterSchema),z.lazy(() => CharacterWhereInputSchema) ]).optional().nullable(),
  spells: z.lazy(() => SpellListRelationFilterSchema).optional(),
  classes: z.lazy(() => ClassListRelationFilterSchema).optional(),
  races: z.lazy(() => RaceListRelationFilterSchema).optional()
}).strict());

export const SpellbookOrderByWithAggregationInputSchema: z.ZodType<Prisma.SpellbookOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  spellbook_name: z.lazy(() => SortOrderSchema).optional(),
  character_name: z.lazy(() => SortOrderSchema).optional(),
  spellbook_description: z.lazy(() => SortOrderSchema).optional(),
  image_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  character_id: z.lazy(() => SortOrderSchema).optional(),
  spell_ids: z.lazy(() => SortOrderSchema).optional(),
  class_ids: z.lazy(() => SortOrderSchema).optional(),
  race_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SpellbookCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SpellbookMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SpellbookMinOrderByAggregateInputSchema).optional()
}).strict();

export const SpellbookScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SpellbookScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SpellbookScalarWhereWithAggregatesInputSchema),z.lazy(() => SpellbookScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpellbookScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpellbookScalarWhereWithAggregatesInputSchema),z.lazy(() => SpellbookScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  spellbook_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  character_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  spellbook_description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  image_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  character_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  spell_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  race_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const CampaignWhereInputSchema: z.ZodType<Prisma.CampaignWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CampaignWhereInputSchema),z.lazy(() => CampaignWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CampaignWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CampaignWhereInputSchema),z.lazy(() => CampaignWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  campaign_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  capaign_description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  owner_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_user_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  owner_user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  requested_users: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict();

export const CampaignOrderByWithRelationInputSchema: z.ZodType<Prisma.CampaignOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaign_name: z.lazy(() => SortOrderSchema).optional(),
  capaign_description: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  user_ids: z.lazy(() => SortOrderSchema).optional(),
  requested_user_ids: z.lazy(() => SortOrderSchema).optional(),
  owner_user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  requested_users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CampaignWhereUniqueInputSchema: z.ZodType<Prisma.CampaignWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    user_campaign: z.lazy(() => CampaignUser_campaignCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    user_campaign: z.lazy(() => CampaignUser_campaignCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  user_campaign: z.lazy(() => CampaignUser_campaignCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => CampaignWhereInputSchema),z.lazy(() => CampaignWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CampaignWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CampaignWhereInputSchema),z.lazy(() => CampaignWhereInputSchema).array() ]).optional(),
  campaign_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  capaign_description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  owner_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_user_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  owner_user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  requested_users: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict());

export const CampaignOrderByWithAggregationInputSchema: z.ZodType<Prisma.CampaignOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaign_name: z.lazy(() => SortOrderSchema).optional(),
  capaign_description: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  user_ids: z.lazy(() => SortOrderSchema).optional(),
  requested_user_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CampaignCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CampaignMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CampaignMinOrderByAggregateInputSchema).optional()
}).strict();

export const CampaignScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CampaignScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CampaignScalarWhereWithAggregatesInputSchema),z.lazy(() => CampaignScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CampaignScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CampaignScalarWhereWithAggregatesInputSchema),z.lazy(() => CampaignScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  campaign_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  capaign_description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  owner_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_user_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const SpellWhereInputSchema: z.ZodType<Prisma.SpellWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SpellWhereInputSchema),z.lazy(() => SpellWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpellWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpellWhereInputSchema),z.lazy(() => SpellWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  higher_level: z.lazy(() => StringNullableListFilterSchema).optional(),
  range: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  components: z.lazy(() => EnumComponentsNullableListFilterSchema).optional(),
  material: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableCompositeFilterSchema),z.lazy(() => AreaOfEffectObjectEqualityInputSchema) ]).optional().nullable(),
  ritual: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  duration: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  concentration: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  casting_time: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  attack_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  damage: z.lazy(() => JsonNullableFilterSchema).optional(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableCompositeFilterSchema),z.lazy(() => DifficultyClassObjectEqualityInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceCompositeFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema) ]).optional(),
  classes: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  spellbooks: z.lazy(() => SpellbookListRelationFilterSchema).optional()
}).strict();

export const SpellOrderByWithRelationInputSchema: z.ZodType<Prisma.SpellOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  desc: z.lazy(() => SortOrderSchema).optional(),
  higher_level: z.lazy(() => SortOrderSchema).optional(),
  range: z.lazy(() => SortOrderSchema).optional(),
  components: z.lazy(() => SortOrderSchema).optional(),
  material: z.lazy(() => SortOrderSchema).optional(),
  area_of_effect: z.lazy(() => AreaOfEffectOrderByInputSchema).optional(),
  ritual: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  concentration: z.lazy(() => SortOrderSchema).optional(),
  casting_time: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  attack_type: z.lazy(() => SortOrderSchema).optional(),
  damage: z.lazy(() => SortOrderSchema).optional(),
  dc: z.lazy(() => DifficultyClassOrderByInputSchema).optional(),
  school: z.lazy(() => APIReferenceOrderByInputSchema).optional(),
  classes: z.lazy(() => APIReferenceOrderByCompositeAggregateInputSchema).optional(),
  subclasses: z.lazy(() => APIReferenceOrderByCompositeAggregateInputSchema).optional(),
  spellbook_ids: z.lazy(() => SortOrderSchema).optional(),
  spellbooks: z.lazy(() => SpellbookOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SpellWhereUniqueInputSchema: z.ZodType<Prisma.SpellWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => SpellWhereInputSchema),z.lazy(() => SpellWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpellWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpellWhereInputSchema),z.lazy(() => SpellWhereInputSchema).array() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  higher_level: z.lazy(() => StringNullableListFilterSchema).optional(),
  range: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  components: z.lazy(() => EnumComponentsNullableListFilterSchema).optional(),
  material: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableCompositeFilterSchema),z.lazy(() => AreaOfEffectObjectEqualityInputSchema) ]).optional().nullable(),
  ritual: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  duration: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  concentration: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  casting_time: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  attack_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  damage: z.lazy(() => JsonNullableFilterSchema).optional(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableCompositeFilterSchema),z.lazy(() => DifficultyClassObjectEqualityInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceCompositeFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema) ]).optional(),
  classes: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  spellbooks: z.lazy(() => SpellbookListRelationFilterSchema).optional()
}).strict());

export const SpellOrderByWithAggregationInputSchema: z.ZodType<Prisma.SpellOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  desc: z.lazy(() => SortOrderSchema).optional(),
  higher_level: z.lazy(() => SortOrderSchema).optional(),
  range: z.lazy(() => SortOrderSchema).optional(),
  components: z.lazy(() => SortOrderSchema).optional(),
  material: z.lazy(() => SortOrderSchema).optional(),
  ritual: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  concentration: z.lazy(() => SortOrderSchema).optional(),
  casting_time: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  attack_type: z.lazy(() => SortOrderSchema).optional(),
  damage: z.lazy(() => SortOrderSchema).optional(),
  spellbook_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SpellCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SpellAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SpellMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SpellMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SpellSumOrderByAggregateInputSchema).optional()
}).strict();

export const SpellScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SpellScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SpellScalarWhereWithAggregatesInputSchema),z.lazy(() => SpellScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpellScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpellScalarWhereWithAggregatesInputSchema),z.lazy(() => SpellScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  higher_level: z.lazy(() => StringNullableListFilterSchema).optional(),
  range: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  components: z.lazy(() => EnumComponentsNullableListFilterSchema).optional(),
  material: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ritual: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  duration: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  concentration: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  casting_time: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  attack_type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  damage: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const ClassWhereInputSchema: z.ZodType<Prisma.ClassWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ClassWhereInputSchema),z.lazy(() => ClassWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ClassWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ClassWhereInputSchema),z.lazy(() => ClassWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  hit_die: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  class_levels: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableCompositeFilterSchema),z.lazy(() => MulticlassingObjectEqualityInputSchema) ]).optional().nullable(),
  spells: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentCompositeListFilterSchema),z.lazy(() => StartingEquipmentObjectEqualityInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceCompositeListFilterSchema),z.lazy(() => ChoiceObjectEqualityInputSchema).array() ]).optional(),
  proficiency_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceCompositeListFilterSchema),z.lazy(() => ChoiceObjectEqualityInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyListRelationFilterSchema).optional(),
  spellbooks: z.lazy(() => SpellbookListRelationFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict();

export const ClassOrderByWithRelationInputSchema: z.ZodType<Prisma.ClassOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  hit_die: z.lazy(() => SortOrderSchema).optional(),
  class_levels: z.lazy(() => SortOrderSchema).optional(),
  multi_classing: z.lazy(() => MulticlassingOrderByInputSchema).optional(),
  spells: z.lazy(() => SortOrderSchema).optional(),
  starting_equipment: z.lazy(() => StartingEquipmentOrderByCompositeAggregateInputSchema).optional(),
  starting_equipment_options: z.lazy(() => ChoiceOrderByCompositeAggregateInputSchema).optional(),
  proficiency_ids: z.lazy(() => SortOrderSchema).optional(),
  proficiency_choices: z.lazy(() => ChoiceOrderByCompositeAggregateInputSchema).optional(),
  saving_throws: z.lazy(() => APIReferenceOrderByCompositeAggregateInputSchema).optional(),
  subclasses: z.lazy(() => APIReferenceOrderByCompositeAggregateInputSchema).optional(),
  spellbook_ids: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyOrderByRelationAggregateInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookOrderByRelationAggregateInputSchema).optional(),
  characters: z.lazy(() => CharacterOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ClassWhereUniqueInputSchema: z.ZodType<Prisma.ClassWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    index: z.string(),
    name: z.string()
  }),
  z.object({
    id: z.string(),
    index: z.string(),
  }),
  z.object({
    id: z.string(),
    name: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    index: z.string(),
    name: z.string(),
  }),
  z.object({
    index: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  index: z.string().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => ClassWhereInputSchema),z.lazy(() => ClassWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ClassWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ClassWhereInputSchema),z.lazy(() => ClassWhereInputSchema).array() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  hit_die: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  class_levels: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableCompositeFilterSchema),z.lazy(() => MulticlassingObjectEqualityInputSchema) ]).optional().nullable(),
  spells: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentCompositeListFilterSchema),z.lazy(() => StartingEquipmentObjectEqualityInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceCompositeListFilterSchema),z.lazy(() => ChoiceObjectEqualityInputSchema).array() ]).optional(),
  proficiency_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceCompositeListFilterSchema),z.lazy(() => ChoiceObjectEqualityInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyListRelationFilterSchema).optional(),
  spellbooks: z.lazy(() => SpellbookListRelationFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict());

export const ClassOrderByWithAggregationInputSchema: z.ZodType<Prisma.ClassOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  hit_die: z.lazy(() => SortOrderSchema).optional(),
  class_levels: z.lazy(() => SortOrderSchema).optional(),
  spells: z.lazy(() => SortOrderSchema).optional(),
  proficiency_ids: z.lazy(() => SortOrderSchema).optional(),
  spellbook_ids: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ClassCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ClassAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ClassMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ClassMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ClassSumOrderByAggregateInputSchema).optional()
}).strict();

export const ClassScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ClassScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ClassScalarWhereWithAggregatesInputSchema),z.lazy(() => ClassScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ClassScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ClassScalarWhereWithAggregatesInputSchema),z.lazy(() => ClassScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  hit_die: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  class_levels: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  spells: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  proficiency_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const RaceWhereInputSchema: z.ZodType<Prisma.RaceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  speed: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusCompositeListFilterSchema),z.lazy(() => AbilityBonusObjectEqualityInputSchema).array() ]).optional(),
  alignment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  age: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size_description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableCompositeFilterSchema),z.lazy(() => ChoiceObjectEqualityInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  language_desc: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  traits: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  spellbooks: z.lazy(() => SpellbookListRelationFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict();

export const RaceOrderByWithRelationInputSchema: z.ZodType<Prisma.RaceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  speed: z.lazy(() => SortOrderSchema).optional(),
  ability_bonuses: z.lazy(() => AbilityBonusOrderByCompositeAggregateInputSchema).optional(),
  alignment: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  size_description: z.lazy(() => SortOrderSchema).optional(),
  starting_proficiencies: z.lazy(() => APIReferenceOrderByCompositeAggregateInputSchema).optional(),
  starting_proficiency_options: z.lazy(() => ChoiceOrderByInputSchema).optional(),
  languages: z.lazy(() => APIReferenceOrderByCompositeAggregateInputSchema).optional(),
  language_desc: z.lazy(() => SortOrderSchema).optional(),
  traits: z.lazy(() => APIReferenceOrderByCompositeAggregateInputSchema).optional(),
  subraces: z.lazy(() => APIReferenceOrderByCompositeAggregateInputSchema).optional(),
  spellbook_ids: z.lazy(() => SortOrderSchema).optional(),
  spellbooks: z.lazy(() => SpellbookOrderByRelationAggregateInputSchema).optional(),
  characters: z.lazy(() => CharacterOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RaceWhereUniqueInputSchema: z.ZodType<Prisma.RaceWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    index: z.string(),
    name: z.string()
  }),
  z.object({
    id: z.string(),
    index: z.string(),
  }),
  z.object({
    id: z.string(),
    name: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    index: z.string(),
    name: z.string(),
  }),
  z.object({
    index: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  index: z.string().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceWhereInputSchema),z.lazy(() => RaceWhereInputSchema).array() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  speed: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusCompositeListFilterSchema),z.lazy(() => AbilityBonusObjectEqualityInputSchema).array() ]).optional(),
  alignment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  age: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size_description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableCompositeFilterSchema),z.lazy(() => ChoiceObjectEqualityInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  language_desc: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  traits: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  spellbooks: z.lazy(() => SpellbookListRelationFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict());

export const RaceOrderByWithAggregationInputSchema: z.ZodType<Prisma.RaceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  speed: z.lazy(() => SortOrderSchema).optional(),
  alignment: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  size_description: z.lazy(() => SortOrderSchema).optional(),
  language_desc: z.lazy(() => SortOrderSchema).optional(),
  spellbook_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RaceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RaceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RaceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RaceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RaceSumOrderByAggregateInputSchema).optional()
}).strict();

export const RaceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RaceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RaceScalarWhereWithAggregatesInputSchema),z.lazy(() => RaceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceScalarWhereWithAggregatesInputSchema),z.lazy(() => RaceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  speed: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  alignment: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  age: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  size_description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  language_desc: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const CharacterWhereInputSchema: z.ZodType<Prisma.CharacterWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CharacterWhereInputSchema),z.lazy(() => CharacterWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CharacterWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CharacterWhereInputSchema),z.lazy(() => CharacterWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  character_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  player_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  backstory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  experience: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  next_level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  age: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  Height: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  weight: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eye_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  hair_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  skin_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreCompositeListFilterSchema),z.lazy(() => CharacterAbilityScoreObjectEqualityInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreCompositeListFilterSchema),z.lazy(() => CharacterAbilityScoreObjectEqualityInputSchema).array() ]).optional(),
  saving_throw_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  skill_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  armor_class: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCompositeFilterSchema),z.lazy(() => DeathSaveObjectEqualityInputSchema) ]).optional().nullable(),
  language_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  proficiency_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  items: z.lazy(() => StringNullableListFilterSchema).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCompositeFilterSchema),z.lazy(() => CoinTypeObjectEqualityInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  race_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  spellbooks: z.lazy(() => SpellbookListRelationFilterSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreListRelationFilterSchema).optional(),
  skills: z.lazy(() => SkillListRelationFilterSchema).optional(),
  languages: z.lazy(() => LanguageListRelationFilterSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyListRelationFilterSchema).optional(),
  auth_user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  classes: z.lazy(() => ClassListRelationFilterSchema).optional(),
  race: z.union([ z.lazy(() => RaceRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional(),
}).strict();

export const CharacterOrderByWithRelationInputSchema: z.ZodType<Prisma.CharacterOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  character_name: z.lazy(() => SortOrderSchema).optional(),
  player_name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  backstory: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  experience: z.lazy(() => SortOrderSchema).optional(),
  next_level: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  Height: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  eye_color: z.lazy(() => SortOrderSchema).optional(),
  hair_color: z.lazy(() => SortOrderSchema).optional(),
  skin_color: z.lazy(() => SortOrderSchema).optional(),
  scores_original: z.lazy(() => CharacterAbilityScoreOrderByCompositeAggregateInputSchema).optional(),
  scores_current: z.lazy(() => CharacterAbilityScoreOrderByCompositeAggregateInputSchema).optional(),
  saving_throw_ids: z.lazy(() => SortOrderSchema).optional(),
  skill_ids: z.lazy(() => SortOrderSchema).optional(),
  armor_class: z.lazy(() => SortOrderSchema).optional(),
  death_saves: z.lazy(() => DeathSaveOrderByInputSchema).optional(),
  language_ids: z.lazy(() => SortOrderSchema).optional(),
  proficiency_ids: z.lazy(() => SortOrderSchema).optional(),
  items: z.lazy(() => SortOrderSchema).optional(),
  coins: z.lazy(() => CoinTypeOrderByInputSchema).optional(),
  image_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  class_ids: z.lazy(() => SortOrderSchema).optional(),
  race_id: z.lazy(() => SortOrderSchema).optional(),
  spellbooks: z.lazy(() => SpellbookOrderByRelationAggregateInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreOrderByRelationAggregateInputSchema).optional(),
  skills: z.lazy(() => SkillOrderByRelationAggregateInputSchema).optional(),
  languages: z.lazy(() => LanguageOrderByRelationAggregateInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyOrderByRelationAggregateInputSchema).optional(),
  auth_user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  classes: z.lazy(() => ClassOrderByRelationAggregateInputSchema).optional(),
  race: z.lazy(() => RaceOrderByWithRelationInputSchema).optional()
}).strict();

export const CharacterWhereUniqueInputSchema: z.ZodType<Prisma.CharacterWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    user_character: z.lazy(() => CharacterUser_characterCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    user_character: z.lazy(() => CharacterUser_characterCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  user_character: z.lazy(() => CharacterUser_characterCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => CharacterWhereInputSchema),z.lazy(() => CharacterWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CharacterWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CharacterWhereInputSchema),z.lazy(() => CharacterWhereInputSchema).array() ]).optional(),
  character_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  player_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  backstory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  experience: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  next_level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  age: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  Height: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  weight: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eye_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  hair_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  skin_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreCompositeListFilterSchema),z.lazy(() => CharacterAbilityScoreObjectEqualityInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreCompositeListFilterSchema),z.lazy(() => CharacterAbilityScoreObjectEqualityInputSchema).array() ]).optional(),
  saving_throw_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  skill_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  armor_class: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCompositeFilterSchema),z.lazy(() => DeathSaveObjectEqualityInputSchema) ]).optional().nullable(),
  language_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  proficiency_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  items: z.lazy(() => StringNullableListFilterSchema).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCompositeFilterSchema),z.lazy(() => CoinTypeObjectEqualityInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  race_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  spellbooks: z.lazy(() => SpellbookListRelationFilterSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreListRelationFilterSchema).optional(),
  skills: z.lazy(() => SkillListRelationFilterSchema).optional(),
  languages: z.lazy(() => LanguageListRelationFilterSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyListRelationFilterSchema).optional(),
  auth_user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  classes: z.lazy(() => ClassListRelationFilterSchema).optional(),
  race: z.union([ z.lazy(() => RaceRelationFilterSchema),z.lazy(() => RaceWhereInputSchema) ]).optional(),
}).strict());

export const CharacterOrderByWithAggregationInputSchema: z.ZodType<Prisma.CharacterOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  character_name: z.lazy(() => SortOrderSchema).optional(),
  player_name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  backstory: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  experience: z.lazy(() => SortOrderSchema).optional(),
  next_level: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  Height: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  eye_color: z.lazy(() => SortOrderSchema).optional(),
  hair_color: z.lazy(() => SortOrderSchema).optional(),
  skin_color: z.lazy(() => SortOrderSchema).optional(),
  saving_throw_ids: z.lazy(() => SortOrderSchema).optional(),
  skill_ids: z.lazy(() => SortOrderSchema).optional(),
  armor_class: z.lazy(() => SortOrderSchema).optional(),
  language_ids: z.lazy(() => SortOrderSchema).optional(),
  proficiency_ids: z.lazy(() => SortOrderSchema).optional(),
  items: z.lazy(() => SortOrderSchema).optional(),
  image_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  class_ids: z.lazy(() => SortOrderSchema).optional(),
  race_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CharacterCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CharacterAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CharacterMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CharacterMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CharacterSumOrderByAggregateInputSchema).optional()
}).strict();

export const CharacterScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CharacterScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CharacterScalarWhereWithAggregatesInputSchema),z.lazy(() => CharacterScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CharacterScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CharacterScalarWhereWithAggregatesInputSchema),z.lazy(() => CharacterScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  character_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  player_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  backstory: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  experience: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  next_level: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  age: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  Height: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  weight: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  eye_color: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  hair_color: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  skin_color: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  saving_throw_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  skill_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  armor_class: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  language_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  proficiency_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  items: z.lazy(() => StringNullableListFilterSchema).optional(),
  image_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  race_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const AbilityScoreWhereInputSchema: z.ZodType<Prisma.AbilityScoreWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AbilityScoreWhereInputSchema),z.lazy(() => AbilityScoreWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AbilityScoreWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AbilityScoreWhereInputSchema),z.lazy(() => AbilityScoreWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  full_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  skills: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  character: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict();

export const AbilityScoreOrderByWithRelationInputSchema: z.ZodType<Prisma.AbilityScoreOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  full_name: z.lazy(() => SortOrderSchema).optional(),
  desc: z.lazy(() => SortOrderSchema).optional(),
  skills: z.lazy(() => APIReferenceOrderByCompositeAggregateInputSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional(),
  character: z.lazy(() => CharacterOrderByRelationAggregateInputSchema).optional()
}).strict();

export const AbilityScoreWhereUniqueInputSchema: z.ZodType<Prisma.AbilityScoreWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => AbilityScoreWhereInputSchema),z.lazy(() => AbilityScoreWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AbilityScoreWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AbilityScoreWhereInputSchema),z.lazy(() => AbilityScoreWhereInputSchema).array() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  full_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  skills: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  character: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict());

export const AbilityScoreOrderByWithAggregationInputSchema: z.ZodType<Prisma.AbilityScoreOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  full_name: z.lazy(() => SortOrderSchema).optional(),
  desc: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AbilityScoreCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AbilityScoreMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AbilityScoreMinOrderByAggregateInputSchema).optional()
}).strict();

export const AbilityScoreScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AbilityScoreScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AbilityScoreScalarWhereWithAggregatesInputSchema),z.lazy(() => AbilityScoreScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AbilityScoreScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AbilityScoreScalarWhereWithAggregatesInputSchema),z.lazy(() => AbilityScoreScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  full_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const SkillWhereInputSchema: z.ZodType<Prisma.SkillWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SkillWhereInputSchema),z.lazy(() => SkillWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SkillWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SkillWhereInputSchema),z.lazy(() => SkillWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceCompositeFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema) ]).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict();

export const SkillOrderByWithRelationInputSchema: z.ZodType<Prisma.SkillOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  desc: z.lazy(() => SortOrderSchema).optional(),
  ability_score: z.lazy(() => APIReferenceOrderByInputSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional(),
  characters: z.lazy(() => CharacterOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SkillWhereUniqueInputSchema: z.ZodType<Prisma.SkillWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => SkillWhereInputSchema),z.lazy(() => SkillWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SkillWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SkillWhereInputSchema),z.lazy(() => SkillWhereInputSchema).array() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceCompositeFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema) ]).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict());

export const SkillOrderByWithAggregationInputSchema: z.ZodType<Prisma.SkillOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  desc: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SkillCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SkillMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SkillMinOrderByAggregateInputSchema).optional()
}).strict();

export const SkillScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SkillScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SkillScalarWhereWithAggregatesInputSchema),z.lazy(() => SkillScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SkillScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SkillScalarWhereWithAggregatesInputSchema),z.lazy(() => SkillScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const LanguageWhereInputSchema: z.ZodType<Prisma.LanguageWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LanguageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  typical_speakers: z.lazy(() => StringNullableListFilterSchema).optional(),
  script: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict();

export const LanguageOrderByWithRelationInputSchema: z.ZodType<Prisma.LanguageOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  typical_speakers: z.lazy(() => SortOrderSchema).optional(),
  script: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional(),
  characters: z.lazy(() => CharacterOrderByRelationAggregateInputSchema).optional()
}).strict();

export const LanguageWhereUniqueInputSchema: z.ZodType<Prisma.LanguageWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LanguageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  typical_speakers: z.lazy(() => StringNullableListFilterSchema).optional(),
  script: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict());

export const LanguageOrderByWithAggregationInputSchema: z.ZodType<Prisma.LanguageOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  typical_speakers: z.lazy(() => SortOrderSchema).optional(),
  script: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LanguageCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LanguageMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LanguageMinOrderByAggregateInputSchema).optional()
}).strict();

export const LanguageScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LanguageScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema),z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema),z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  typical_speakers: z.lazy(() => StringNullableListFilterSchema).optional(),
  script: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const ProficiencyWhereInputSchema: z.ZodType<Prisma.ProficiencyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProficiencyWhereInputSchema),z.lazy(() => ProficiencyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProficiencyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProficiencyWhereInputSchema),z.lazy(() => ProficiencyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  race_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  reference: z.union([ z.lazy(() => APIReferenceCompositeFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema) ]).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  classes: z.lazy(() => ClassListRelationFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict();

export const ProficiencyOrderByWithRelationInputSchema: z.ZodType<Prisma.ProficiencyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  race_ids: z.lazy(() => SortOrderSchema).optional(),
  reference: z.lazy(() => APIReferenceOrderByInputSchema).optional(),
  class_ids: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional(),
  classes: z.lazy(() => ClassOrderByRelationAggregateInputSchema).optional(),
  characters: z.lazy(() => CharacterOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProficiencyWhereUniqueInputSchema: z.ZodType<Prisma.ProficiencyWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => ProficiencyWhereInputSchema),z.lazy(() => ProficiencyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProficiencyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProficiencyWhereInputSchema),z.lazy(() => ProficiencyWhereInputSchema).array() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  race_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  reference: z.union([ z.lazy(() => APIReferenceCompositeFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema) ]).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  classes: z.lazy(() => ClassListRelationFilterSchema).optional(),
  characters: z.lazy(() => CharacterListRelationFilterSchema).optional()
}).strict());

export const ProficiencyOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProficiencyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  race_ids: z.lazy(() => SortOrderSchema).optional(),
  class_ids: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProficiencyCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProficiencyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProficiencyMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProficiencyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProficiencyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProficiencyScalarWhereWithAggregatesInputSchema),z.lazy(() => ProficiencyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProficiencyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProficiencyScalarWhereWithAggregatesInputSchema),z.lazy(() => ProficiencyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  race_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const FriendsCreateInputSchema: z.ZodType<Prisma.FriendsCreateInput> = z.object({
  user_id: z.string(),
  friends: z.lazy(() => UserCreateNestedManyWithoutFriendsInputSchema).optional()
}).strict();

export const FriendsUncheckedCreateInputSchema: z.ZodType<Prisma.FriendsUncheckedCreateInput> = z.object({
  user_id: z.string(),
  friend_ids: z.union([ z.lazy(() => FriendsCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  friends: z.lazy(() => UserUncheckedCreateNestedManyWithoutFriendsInputSchema).optional()
}).strict();

export const FriendsUpdateInputSchema: z.ZodType<Prisma.FriendsUpdateInput> = z.object({
  friends: z.lazy(() => UserUpdateManyWithoutFriendsNestedInputSchema).optional()
}).strict();

export const FriendsUncheckedUpdateInputSchema: z.ZodType<Prisma.FriendsUncheckedUpdateInput> = z.object({
  friend_ids: z.union([ z.lazy(() => FriendsUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  friends: z.lazy(() => UserUncheckedUpdateManyWithoutFriendsNestedInputSchema).optional()
}).strict();

export const FriendsCreateManyInputSchema: z.ZodType<Prisma.FriendsCreateManyInput> = z.object({
  user_id: z.string(),
  friend_ids: z.union([ z.lazy(() => FriendsCreatefriend_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const FriendsUpdateManyMutationInputSchema: z.ZodType<Prisma.FriendsUpdateManyMutationInput> = z.object({
}).strict();

export const FriendsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FriendsUncheckedUpdateManyInput> = z.object({
  friend_ids: z.union([ z.lazy(() => FriendsUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const RequestedFriendsCreateInputSchema: z.ZodType<Prisma.RequestedFriendsCreateInput> = z.object({
  user_id: z.string(),
  requested_friends: z.lazy(() => UserCreateNestedManyWithoutRequested_friendsInputSchema).optional()
}).strict();

export const RequestedFriendsUncheckedCreateInputSchema: z.ZodType<Prisma.RequestedFriendsUncheckedCreateInput> = z.object({
  user_id: z.string(),
  requested_friend_ids: z.union([ z.lazy(() => RequestedFriendsCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  requested_friends: z.lazy(() => UserUncheckedCreateNestedManyWithoutRequested_friendsInputSchema).optional()
}).strict();

export const RequestedFriendsUpdateInputSchema: z.ZodType<Prisma.RequestedFriendsUpdateInput> = z.object({
  requested_friends: z.lazy(() => UserUpdateManyWithoutRequested_friendsNestedInputSchema).optional()
}).strict();

export const RequestedFriendsUncheckedUpdateInputSchema: z.ZodType<Prisma.RequestedFriendsUncheckedUpdateInput> = z.object({
  requested_friend_ids: z.union([ z.lazy(() => RequestedFriendsUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  requested_friends: z.lazy(() => UserUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema).optional()
}).strict();

export const RequestedFriendsCreateManyInputSchema: z.ZodType<Prisma.RequestedFriendsCreateManyInput> = z.object({
  user_id: z.string(),
  requested_friend_ids: z.union([ z.lazy(() => RequestedFriendsCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const RequestedFriendsUpdateManyMutationInputSchema: z.ZodType<Prisma.RequestedFriendsUpdateManyMutationInput> = z.object({
}).strict();

export const RequestedFriendsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RequestedFriendsUncheckedUpdateManyInput> = z.object({
  requested_friend_ids: z.union([ z.lazy(() => RequestedFriendsUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SentRequestsCreateInputSchema: z.ZodType<Prisma.SentRequestsCreateInput> = z.object({
  user_id: z.string(),
  sent_requests: z.lazy(() => UserCreateNestedManyWithoutSent_requestsInputSchema).optional()
}).strict();

export const SentRequestsUncheckedCreateInputSchema: z.ZodType<Prisma.SentRequestsUncheckedCreateInput> = z.object({
  user_id: z.string(),
  sent_request_ids: z.union([ z.lazy(() => SentRequestsCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  sent_requests: z.lazy(() => UserUncheckedCreateNestedManyWithoutSent_requestsInputSchema).optional()
}).strict();

export const SentRequestsUpdateInputSchema: z.ZodType<Prisma.SentRequestsUpdateInput> = z.object({
  sent_requests: z.lazy(() => UserUpdateManyWithoutSent_requestsNestedInputSchema).optional()
}).strict();

export const SentRequestsUncheckedUpdateInputSchema: z.ZodType<Prisma.SentRequestsUncheckedUpdateInput> = z.object({
  sent_request_ids: z.union([ z.lazy(() => SentRequestsUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  sent_requests: z.lazy(() => UserUncheckedUpdateManyWithoutSent_requestsNestedInputSchema).optional()
}).strict();

export const SentRequestsCreateManyInputSchema: z.ZodType<Prisma.SentRequestsCreateManyInput> = z.object({
  user_id: z.string(),
  sent_request_ids: z.union([ z.lazy(() => SentRequestsCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SentRequestsUpdateManyMutationInputSchema: z.ZodType<Prisma.SentRequestsUpdateManyMutationInput> = z.object({
}).strict();

export const SentRequestsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SentRequestsUncheckedUpdateManyInput> = z.object({
  sent_request_ids: z.union([ z.lazy(() => SentRequestsUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint(),
  user: z.lazy(() => UserCreateNestedOneWithoutAuth_sessionInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint(),
  user_id: z.string()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAuth_sessionNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint(),
  user_id: z.string()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const KeyCreateInputSchema: z.ZodType<Prisma.KeyCreateInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutAuth_keyInputSchema)
}).strict();

export const KeyUncheckedCreateInputSchema: z.ZodType<Prisma.KeyUncheckedCreateInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable(),
  user_id: z.string()
}).strict();

export const KeyUpdateInputSchema: z.ZodType<Prisma.KeyUpdateInput> = z.object({
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAuth_keyNestedInputSchema).optional()
}).strict();

export const KeyUncheckedUpdateInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateInput> = z.object({
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const KeyCreateManyInputSchema: z.ZodType<Prisma.KeyCreateManyInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable(),
  user_id: z.string()
}).strict();

export const KeyUpdateManyMutationInputSchema: z.ZodType<Prisma.KeyUpdateManyMutationInput> = z.object({
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const KeyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateManyInput> = z.object({
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpellbookCreateInputSchema: z.ZodType<Prisma.SpellbookCreateInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutSpellbooksInputSchema),
  character: z.lazy(() => CharacterCreateNestedOneWithoutSpellbooksInputSchema).optional(),
  spells: z.lazy(() => SpellCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  classes: z.lazy(() => ClassCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  races: z.lazy(() => RaceCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookUncheckedCreateInputSchema: z.ZodType<Prisma.SpellbookUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  character_id: z.string().optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookCreatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookCreaterace_idsInputSchema),z.string().array() ]).optional(),
  spells: z.lazy(() => SpellUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookUpdateInputSchema: z.ZodType<Prisma.SpellbookUpdateInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutSpellbooksNestedInputSchema).optional(),
  character: z.lazy(() => CharacterUpdateOneWithoutSpellbooksNestedInputSchema).optional(),
  spells: z.lazy(() => SpellUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  races: z.lazy(() => RaceUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookUncheckedUpdateInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  spells: z.lazy(() => SpellUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  races: z.lazy(() => RaceUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookCreateManyInputSchema: z.ZodType<Prisma.SpellbookCreateManyInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  character_id: z.string().optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookCreatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookCreaterace_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SpellbookUpdateManyMutationInputSchema: z.ZodType<Prisma.SpellbookUpdateManyMutationInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SpellbookUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateManyInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CampaignCreateInputSchema: z.ZodType<Prisma.CampaignCreateInput> = z.object({
  id: z.string().optional(),
  campaign_name: z.string(),
  capaign_description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  owner_user: z.lazy(() => UserCreateNestedOneWithoutOwned_campaignsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutJoined_campaignsInputSchema).optional(),
  requested_users: z.lazy(() => UserCreateNestedManyWithoutRequested_campaignsInputSchema).optional()
}).strict();

export const CampaignUncheckedCreateInputSchema: z.ZodType<Prisma.CampaignUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  campaign_name: z.string(),
  capaign_description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  owner_id: z.string(),
  user_ids: z.union([ z.lazy(() => CampaignCreateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignCreaterequested_user_idsInputSchema),z.string().array() ]).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutJoined_campaignsInputSchema).optional(),
  requested_users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRequested_campaignsInputSchema).optional()
}).strict();

export const CampaignUpdateInputSchema: z.ZodType<Prisma.CampaignUpdateInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_user: z.lazy(() => UserUpdateOneRequiredWithoutOwned_campaignsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutJoined_campaignsNestedInputSchema).optional(),
  requested_users: z.lazy(() => UserUpdateManyWithoutRequested_campaignsNestedInputSchema).optional()
}).strict();

export const CampaignUncheckedUpdateInputSchema: z.ZodType<Prisma.CampaignUncheckedUpdateInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_ids: z.union([ z.lazy(() => CampaignUpdateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignUpdaterequested_user_idsInputSchema),z.string().array() ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutJoined_campaignsNestedInputSchema).optional(),
  requested_users: z.lazy(() => UserUncheckedUpdateManyWithoutRequested_campaignsNestedInputSchema).optional()
}).strict();

export const CampaignCreateManyInputSchema: z.ZodType<Prisma.CampaignCreateManyInput> = z.object({
  id: z.string().optional(),
  campaign_name: z.string(),
  capaign_description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  owner_id: z.string(),
  user_ids: z.union([ z.lazy(() => CampaignCreateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignCreaterequested_user_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CampaignUpdateManyMutationInputSchema: z.ZodType<Prisma.CampaignUpdateManyMutationInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CampaignUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CampaignUncheckedUpdateManyInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_ids: z.union([ z.lazy(() => CampaignUpdateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignUpdaterequested_user_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SpellCreateInputSchema: z.ZodType<Prisma.SpellCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.union([ z.lazy(() => SpellCreatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellCreatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.string(),
  components: z.union([ z.lazy(() => SpellCreatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.string().optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableCreateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.boolean(),
  duration: z.string(),
  concentration: z.boolean(),
  casting_time: z.string(),
  level: z.number().int(),
  attack_type: z.string().optional().nullable(),
  damage: InputJsonValueSchema.optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableCreateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  classes: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutSpellsInputSchema).optional()
}).strict();

export const SpellUncheckedCreateInputSchema: z.ZodType<Prisma.SpellUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.union([ z.lazy(() => SpellCreatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellCreatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.string(),
  components: z.union([ z.lazy(() => SpellCreatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.string().optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableCreateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.boolean(),
  duration: z.string(),
  concentration: z.boolean(),
  casting_time: z.string(),
  level: z.number().int(),
  attack_type: z.string().optional().nullable(),
  damage: InputJsonValueSchema.optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableCreateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  classes: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => SpellCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutSpellsInputSchema).optional()
}).strict();

export const SpellUpdateInputSchema: z.ZodType<Prisma.SpellUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SpellUpdatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellUpdatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.union([ z.lazy(() => SpellUpdatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableUpdateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  concentration: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  casting_time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  attack_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  damage: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableUpdateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  classes: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutSpellsNestedInputSchema).optional()
}).strict();

export const SpellUncheckedUpdateInputSchema: z.ZodType<Prisma.SpellUncheckedUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SpellUpdatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellUpdatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.union([ z.lazy(() => SpellUpdatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableUpdateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  concentration: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  casting_time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  attack_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  damage: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableUpdateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  classes: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => SpellUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutSpellsNestedInputSchema).optional()
}).strict();

export const SpellCreateManyInputSchema: z.ZodType<Prisma.SpellCreateManyInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.union([ z.lazy(() => SpellCreatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellCreatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.string(),
  components: z.union([ z.lazy(() => SpellCreatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.string().optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableCreateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.boolean(),
  duration: z.string(),
  concentration: z.boolean(),
  casting_time: z.string(),
  level: z.number().int(),
  attack_type: z.string().optional().nullable(),
  damage: InputJsonValueSchema.optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableCreateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  classes: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => SpellCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SpellUpdateManyMutationInputSchema: z.ZodType<Prisma.SpellUpdateManyMutationInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SpellUpdatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellUpdatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.union([ z.lazy(() => SpellUpdatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableUpdateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  concentration: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  casting_time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  attack_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  damage: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableUpdateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  classes: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
}).strict();

export const SpellUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SpellUncheckedUpdateManyInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SpellUpdatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellUpdatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.union([ z.lazy(() => SpellUpdatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableUpdateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  concentration: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  casting_time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  attack_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  damage: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableUpdateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  classes: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => SpellUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const ClassCreateInputSchema: z.ZodType<Prisma.ClassCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  hit_die: z.number().int(),
  class_levels: z.string(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableCreateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.string().optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListCreateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyCreateNestedManyWithoutClassesInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutClassesInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutClassesInputSchema).optional()
}).strict();

export const ClassUncheckedCreateInputSchema: z.ZodType<Prisma.ClassUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  hit_die: z.number().int(),
  class_levels: z.string(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableCreateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.string().optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListCreateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedCreateNestedManyWithoutClassesInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutClassesInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutClassesInputSchema).optional()
}).strict();

export const ClassUpdateInputSchema: z.ZodType<Prisma.ClassUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyUpdateManyWithoutClassesNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutClassesNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutClassesNestedInputSchema).optional()
}).strict();

export const ClassUncheckedUpdateInputSchema: z.ZodType<Prisma.ClassUncheckedUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedUpdateManyWithoutClassesNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutClassesNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutClassesNestedInputSchema).optional()
}).strict();

export const ClassCreateManyInputSchema: z.ZodType<Prisma.ClassCreateManyInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  hit_die: z.number().int(),
  class_levels: z.string(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableCreateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.string().optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListCreateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const ClassUpdateManyMutationInputSchema: z.ZodType<Prisma.ClassUpdateManyMutationInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
}).strict();

export const ClassUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ClassUncheckedUpdateManyInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const RaceCreateInputSchema: z.ZodType<Prisma.RaceCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  speed: z.number().int(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListCreateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.string(),
  age: z.string(),
  size: z.string(),
  size_description: z.string(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.string(),
  traits: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutRacesInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUncheckedCreateInputSchema: z.ZodType<Prisma.RaceUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  speed: z.number().int(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListCreateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.string(),
  age: z.string(),
  size: z.string(),
  size_description: z.string(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.string(),
  traits: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => RaceCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutRacesInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUpdateInputSchema: z.ZodType<Prisma.RaceUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  speed: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListUpdateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  age: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size_description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  traits: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutRacesNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  speed: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListUpdateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  age: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size_description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  traits: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => RaceUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutRacesNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceCreateManyInputSchema: z.ZodType<Prisma.RaceCreateManyInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  speed: z.number().int(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListCreateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.string(),
  age: z.string(),
  size: z.string(),
  size_description: z.string(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.string(),
  traits: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => RaceCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const RaceUpdateManyMutationInputSchema: z.ZodType<Prisma.RaceUpdateManyMutationInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  speed: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListUpdateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  age: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size_description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  traits: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  speed: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListUpdateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  age: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size_description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  traits: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => RaceUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CharacterCreateInputSchema: z.ZodType<Prisma.CharacterCreateInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyCreateNestedManyWithoutCharactersInputSchema).optional(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutCharactersInputSchema),
  classes: z.lazy(() => ClassCreateNestedManyWithoutCharactersInputSchema).optional(),
  race: z.lazy(() => RaceCreateNestedOneWithoutCharactersInputSchema)
}).strict();

export const CharacterUncheckedCreateInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.string(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutCharactersInputSchema).optional()
}).strict();

export const CharacterUpdateInputSchema: z.ZodType<Prisma.CharacterUpdateInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUpdateManyWithoutCharactersNestedInputSchema).optional(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutCharactersNestedInputSchema).optional(),
  race: z.lazy(() => RaceUpdateOneRequiredWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterCreateManyInputSchema: z.ZodType<Prisma.CharacterCreateManyInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.string()
}).strict();

export const CharacterUpdateManyMutationInputSchema: z.ZodType<Prisma.CharacterUpdateManyMutationInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CharacterUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AbilityScoreCreateInputSchema: z.ZodType<Prisma.AbilityScoreCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  full_name: z.string(),
  desc: z.union([ z.lazy(() => AbilityScoreCreatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  character: z.lazy(() => CharacterCreateNestedManyWithoutSaving_throwsInputSchema).optional()
}).strict();

export const AbilityScoreUncheckedCreateInputSchema: z.ZodType<Prisma.AbilityScoreUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  full_name: z.string(),
  desc: z.union([ z.lazy(() => AbilityScoreCreatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  character_ids: z.union([ z.lazy(() => AbilityScoreCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
  character: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutSaving_throwsInputSchema).optional()
}).strict();

export const AbilityScoreUpdateInputSchema: z.ZodType<Prisma.AbilityScoreUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => AbilityScoreUpdatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  character: z.lazy(() => CharacterUpdateManyWithoutSaving_throwsNestedInputSchema).optional()
}).strict();

export const AbilityScoreUncheckedUpdateInputSchema: z.ZodType<Prisma.AbilityScoreUncheckedUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => AbilityScoreUpdatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  character_ids: z.union([ z.lazy(() => AbilityScoreUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
  character: z.lazy(() => CharacterUncheckedUpdateManyWithoutSaving_throwsNestedInputSchema).optional()
}).strict();

export const AbilityScoreCreateManyInputSchema: z.ZodType<Prisma.AbilityScoreCreateManyInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  full_name: z.string(),
  desc: z.union([ z.lazy(() => AbilityScoreCreatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  character_ids: z.union([ z.lazy(() => AbilityScoreCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const AbilityScoreUpdateManyMutationInputSchema: z.ZodType<Prisma.AbilityScoreUpdateManyMutationInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => AbilityScoreUpdatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
}).strict();

export const AbilityScoreUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AbilityScoreUncheckedUpdateManyInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => AbilityScoreUpdatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  character_ids: z.union([ z.lazy(() => AbilityScoreUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SkillCreateInputSchema: z.ZodType<Prisma.SkillCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.union([ z.lazy(() => SkillCreatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutSkillsInputSchema).optional()
}).strict();

export const SkillUncheckedCreateInputSchema: z.ZodType<Prisma.SkillUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.union([ z.lazy(() => SkillCreatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  character_ids: z.union([ z.lazy(() => SkillCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutSkillsInputSchema).optional()
}).strict();

export const SkillUpdateInputSchema: z.ZodType<Prisma.SkillUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SkillUpdatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutSkillsNestedInputSchema).optional()
}).strict();

export const SkillUncheckedUpdateInputSchema: z.ZodType<Prisma.SkillUncheckedUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SkillUpdatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  character_ids: z.union([ z.lazy(() => SkillUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutSkillsNestedInputSchema).optional()
}).strict();

export const SkillCreateManyInputSchema: z.ZodType<Prisma.SkillCreateManyInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.union([ z.lazy(() => SkillCreatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  character_ids: z.union([ z.lazy(() => SkillCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SkillUpdateManyMutationInputSchema: z.ZodType<Prisma.SkillUpdateManyMutationInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SkillUpdatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
}).strict();

export const SkillUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SkillUncheckedUpdateManyInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SkillUpdatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  character_ids: z.union([ z.lazy(() => SkillUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const LanguageCreateInputSchema: z.ZodType<Prisma.LanguageCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  typical_speakers: z.union([ z.lazy(() => LanguageCreatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.string(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutLanguagesInputSchema).optional()
}).strict();

export const LanguageUncheckedCreateInputSchema: z.ZodType<Prisma.LanguageUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  typical_speakers: z.union([ z.lazy(() => LanguageCreatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.string(),
  character_ids: z.union([ z.lazy(() => LanguageCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutLanguagesInputSchema).optional()
}).strict();

export const LanguageUpdateInputSchema: z.ZodType<Prisma.LanguageUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typical_speakers: z.union([ z.lazy(() => LanguageUpdatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutLanguagesNestedInputSchema).optional()
}).strict();

export const LanguageUncheckedUpdateInputSchema: z.ZodType<Prisma.LanguageUncheckedUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typical_speakers: z.union([ z.lazy(() => LanguageUpdatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_ids: z.union([ z.lazy(() => LanguageUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutLanguagesNestedInputSchema).optional()
}).strict();

export const LanguageCreateManyInputSchema: z.ZodType<Prisma.LanguageCreateManyInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  typical_speakers: z.union([ z.lazy(() => LanguageCreatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.string(),
  character_ids: z.union([ z.lazy(() => LanguageCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const LanguageUpdateManyMutationInputSchema: z.ZodType<Prisma.LanguageUpdateManyMutationInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typical_speakers: z.union([ z.lazy(() => LanguageUpdatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LanguageUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LanguageUncheckedUpdateManyInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typical_speakers: z.union([ z.lazy(() => LanguageUpdatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_ids: z.union([ z.lazy(() => LanguageUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const ProficiencyCreateInputSchema: z.ZodType<Prisma.ProficiencyCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  race_ids: z.union([ z.lazy(() => ProficiencyCreaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  classes: z.lazy(() => ClassCreateNestedManyWithoutProficienciesInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutProficienciesInputSchema).optional()
}).strict();

export const ProficiencyUncheckedCreateInputSchema: z.ZodType<Prisma.ProficiencyUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  race_ids: z.union([ z.lazy(() => ProficiencyCreaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  class_ids: z.union([ z.lazy(() => ProficiencyCreateclass_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ProficiencyCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutProficienciesInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutProficienciesInputSchema).optional()
}).strict();

export const ProficiencyUpdateInputSchema: z.ZodType<Prisma.ProficiencyUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  race_ids: z.union([ z.lazy(() => ProficiencyUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutProficienciesNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutProficienciesNestedInputSchema).optional()
}).strict();

export const ProficiencyUncheckedUpdateInputSchema: z.ZodType<Prisma.ProficiencyUncheckedUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  race_ids: z.union([ z.lazy(() => ProficiencyUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => ProficiencyUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ProficiencyUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutProficienciesNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutProficienciesNestedInputSchema).optional()
}).strict();

export const ProficiencyCreateManyInputSchema: z.ZodType<Prisma.ProficiencyCreateManyInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  race_ids: z.union([ z.lazy(() => ProficiencyCreaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  class_ids: z.union([ z.lazy(() => ProficiencyCreateclass_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ProficiencyCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const ProficiencyUpdateManyMutationInputSchema: z.ZodType<Prisma.ProficiencyUpdateManyMutationInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  race_ids: z.union([ z.lazy(() => ProficiencyUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
}).strict();

export const ProficiencyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProficiencyUncheckedUpdateManyInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  race_ids: z.union([ z.lazy(() => ProficiencyUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => ProficiencyUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ProficiencyUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const EnumRoleFilterSchema: z.ZodType<Prisma.EnumRoleFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleFilterSchema) ]).optional(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const KeyListRelationFilterSchema: z.ZodType<Prisma.KeyListRelationFilter> = z.object({
  every: z.lazy(() => KeyWhereInputSchema).optional(),
  some: z.lazy(() => KeyWhereInputSchema).optional(),
  none: z.lazy(() => KeyWhereInputSchema).optional()
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const SpellbookListRelationFilterSchema: z.ZodType<Prisma.SpellbookListRelationFilter> = z.object({
  every: z.lazy(() => SpellbookWhereInputSchema).optional(),
  some: z.lazy(() => SpellbookWhereInputSchema).optional(),
  none: z.lazy(() => SpellbookWhereInputSchema).optional()
}).strict();

export const CharacterListRelationFilterSchema: z.ZodType<Prisma.CharacterListRelationFilter> = z.object({
  every: z.lazy(() => CharacterWhereInputSchema).optional(),
  some: z.lazy(() => CharacterWhereInputSchema).optional(),
  none: z.lazy(() => CharacterWhereInputSchema).optional()
}).strict();

export const FriendsListRelationFilterSchema: z.ZodType<Prisma.FriendsListRelationFilter> = z.object({
  every: z.lazy(() => FriendsWhereInputSchema).optional(),
  some: z.lazy(() => FriendsWhereInputSchema).optional(),
  none: z.lazy(() => FriendsWhereInputSchema).optional()
}).strict();

export const RequestedFriendsListRelationFilterSchema: z.ZodType<Prisma.RequestedFriendsListRelationFilter> = z.object({
  every: z.lazy(() => RequestedFriendsWhereInputSchema).optional(),
  some: z.lazy(() => RequestedFriendsWhereInputSchema).optional(),
  none: z.lazy(() => RequestedFriendsWhereInputSchema).optional()
}).strict();

export const SentRequestsListRelationFilterSchema: z.ZodType<Prisma.SentRequestsListRelationFilter> = z.object({
  every: z.lazy(() => SentRequestsWhereInputSchema).optional(),
  some: z.lazy(() => SentRequestsWhereInputSchema).optional(),
  none: z.lazy(() => SentRequestsWhereInputSchema).optional()
}).strict();

export const CampaignListRelationFilterSchema: z.ZodType<Prisma.CampaignListRelationFilter> = z.object({
  every: z.lazy(() => CampaignWhereInputSchema).optional(),
  some: z.lazy(() => CampaignWhereInputSchema).optional(),
  none: z.lazy(() => CampaignWhereInputSchema).optional()
}).strict();

export const KeyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.KeyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpellbookOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SpellbookOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CharacterOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CharacterOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FriendsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FriendsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RequestedFriendsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RequestedFriendsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SentRequestsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SentRequestsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CampaignOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CampaignOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  discordUsername: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  biography: z.lazy(() => SortOrderSchema).optional(),
  profile_pic_url: z.lazy(() => SortOrderSchema).optional(),
  friend_ids: z.lazy(() => SortOrderSchema).optional(),
  requested_friend_ids: z.lazy(() => SortOrderSchema).optional(),
  sent_request_ids: z.lazy(() => SortOrderSchema).optional(),
  joined_campaign_ids: z.lazy(() => SortOrderSchema).optional(),
  requested_campaign_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  discordUsername: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  biography: z.lazy(() => SortOrderSchema).optional(),
  profile_pic_url: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  discordUsername: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  biography: z.lazy(() => SortOrderSchema).optional(),
  profile_pic_url: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const EnumRoleWithAggregatesFilterSchema: z.ZodType<Prisma.EnumRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRoleFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const UserListRelationFilterSchema: z.ZodType<Prisma.UserListRelationFilter> = z.object({
  every: z.lazy(() => UserWhereInputSchema).optional(),
  some: z.lazy(() => UserWhereInputSchema).optional(),
  none: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FriendsCountOrderByAggregateInputSchema: z.ZodType<Prisma.FriendsCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  friend_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FriendsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FriendsMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FriendsMinOrderByAggregateInputSchema: z.ZodType<Prisma.FriendsMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RequestedFriendsCountOrderByAggregateInputSchema: z.ZodType<Prisma.RequestedFriendsCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  requested_friend_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RequestedFriendsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RequestedFriendsMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RequestedFriendsMinOrderByAggregateInputSchema: z.ZodType<Prisma.RequestedFriendsMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SentRequestsCountOrderByAggregateInputSchema: z.ZodType<Prisma.SentRequestsCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  sent_request_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SentRequestsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SentRequestsMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SentRequestsMinOrderByAggregateInputSchema: z.ZodType<Prisma.SentRequestsMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntFilterSchema: z.ZodType<Prisma.BigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SessionAvgOrderByAggregateInput> = z.object({
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionSumOrderByAggregateInputSchema: z.ZodType<Prisma.SessionSumOrderByAggregateInput> = z.object({
  active_expires: z.lazy(() => SortOrderSchema).optional(),
  idle_expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntWithAggregatesFilterSchema: z.ZodType<Prisma.BigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const KeyCountOrderByAggregateInputSchema: z.ZodType<Prisma.KeyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const KeyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.KeyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const KeyMinOrderByAggregateInputSchema: z.ZodType<Prisma.KeyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  hashed_password: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CharacterNullableRelationFilterSchema: z.ZodType<Prisma.CharacterNullableRelationFilter> = z.object({
  is: z.lazy(() => CharacterWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CharacterWhereInputSchema).optional().nullable()
}).strict();

export const SpellListRelationFilterSchema: z.ZodType<Prisma.SpellListRelationFilter> = z.object({
  every: z.lazy(() => SpellWhereInputSchema).optional(),
  some: z.lazy(() => SpellWhereInputSchema).optional(),
  none: z.lazy(() => SpellWhereInputSchema).optional()
}).strict();

export const ClassListRelationFilterSchema: z.ZodType<Prisma.ClassListRelationFilter> = z.object({
  every: z.lazy(() => ClassWhereInputSchema).optional(),
  some: z.lazy(() => ClassWhereInputSchema).optional(),
  none: z.lazy(() => ClassWhereInputSchema).optional()
}).strict();

export const RaceListRelationFilterSchema: z.ZodType<Prisma.RaceListRelationFilter> = z.object({
  every: z.lazy(() => RaceWhereInputSchema).optional(),
  some: z.lazy(() => RaceWhereInputSchema).optional(),
  none: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const SpellOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SpellOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ClassOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ClassOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RaceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RaceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpellbookCountOrderByAggregateInputSchema: z.ZodType<Prisma.SpellbookCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  spellbook_name: z.lazy(() => SortOrderSchema).optional(),
  character_name: z.lazy(() => SortOrderSchema).optional(),
  spellbook_description: z.lazy(() => SortOrderSchema).optional(),
  image_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  character_id: z.lazy(() => SortOrderSchema).optional(),
  spell_ids: z.lazy(() => SortOrderSchema).optional(),
  class_ids: z.lazy(() => SortOrderSchema).optional(),
  race_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpellbookMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SpellbookMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  spellbook_name: z.lazy(() => SortOrderSchema).optional(),
  character_name: z.lazy(() => SortOrderSchema).optional(),
  spellbook_description: z.lazy(() => SortOrderSchema).optional(),
  image_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  character_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpellbookMinOrderByAggregateInputSchema: z.ZodType<Prisma.SpellbookMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  spellbook_name: z.lazy(() => SortOrderSchema).optional(),
  character_name: z.lazy(() => SortOrderSchema).optional(),
  spellbook_description: z.lazy(() => SortOrderSchema).optional(),
  image_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  character_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CampaignUser_campaignCompoundUniqueInputSchema: z.ZodType<Prisma.CampaignUser_campaignCompoundUniqueInput> = z.object({
  id: z.string(),
  owner_id: z.string()
}).strict();

export const CampaignCountOrderByAggregateInputSchema: z.ZodType<Prisma.CampaignCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaign_name: z.lazy(() => SortOrderSchema).optional(),
  capaign_description: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  user_ids: z.lazy(() => SortOrderSchema).optional(),
  requested_user_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CampaignMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CampaignMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaign_name: z.lazy(() => SortOrderSchema).optional(),
  capaign_description: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CampaignMinOrderByAggregateInputSchema: z.ZodType<Prisma.CampaignMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaign_name: z.lazy(() => SortOrderSchema).optional(),
  capaign_description: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumComponentsNullableListFilterSchema: z.ZodType<Prisma.EnumComponentsNullableListFilter> = z.object({
  equals: z.lazy(() => ComponentsSchema).array().optional().nullable(),
  has: z.lazy(() => ComponentsSchema).optional().nullable(),
  hasEvery: z.lazy(() => ComponentsSchema).array().optional(),
  hasSome: z.lazy(() => ComponentsSchema).array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const AreaOfEffectNullableCompositeFilterSchema: z.ZodType<Prisma.AreaOfEffectNullableCompositeFilter> = z.object({
  equals: z.lazy(() => AreaOfEffectObjectEqualityInputSchema).optional().nullable(),
  is: z.lazy(() => AreaOfEffectWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => AreaOfEffectWhereInputSchema).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const AreaOfEffectObjectEqualityInputSchema: z.ZodType<Prisma.AreaOfEffectObjectEqualityInput> = z.object({
  size: z.number(),
  type: z.lazy(() => AOETypeSchema)
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional().nullable(),
  not: InputJsonValueSchema.optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const DifficultyClassNullableCompositeFilterSchema: z.ZodType<Prisma.DifficultyClassNullableCompositeFilter> = z.object({
  equals: z.lazy(() => DifficultyClassObjectEqualityInputSchema).optional().nullable(),
  is: z.lazy(() => DifficultyClassWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => DifficultyClassWhereInputSchema).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const DifficultyClassObjectEqualityInputSchema: z.ZodType<Prisma.DifficultyClassObjectEqualityInput> = z.object({
  dc_success: z.string(),
  dc_type: z.lazy(() => APIReferenceObjectEqualityInputSchema),
  desc: z.string().optional().nullable()
}).strict();

export const APIReferenceCompositeFilterSchema: z.ZodType<Prisma.APIReferenceCompositeFilter> = z.object({
  equals: z.lazy(() => APIReferenceObjectEqualityInputSchema).optional(),
  is: z.lazy(() => APIReferenceWhereInputSchema).optional(),
  isNot: z.lazy(() => APIReferenceWhereInputSchema).optional()
}).strict();

export const APIReferenceObjectEqualityInputSchema: z.ZodType<Prisma.APIReferenceObjectEqualityInput> = z.object({
  index: z.string(),
  name: z.string(),
  url: z.string()
}).strict();

export const APIReferenceCompositeListFilterSchema: z.ZodType<Prisma.APIReferenceCompositeListFilter> = z.object({
  equals: z.lazy(() => APIReferenceObjectEqualityInputSchema).array().optional(),
  every: z.lazy(() => APIReferenceWhereInputSchema).optional(),
  some: z.lazy(() => APIReferenceWhereInputSchema).optional(),
  none: z.lazy(() => APIReferenceWhereInputSchema).optional(),
  isEmpty: z.boolean().optional(),
  isSet: z.boolean().optional()
}).strict();

export const AreaOfEffectOrderByInputSchema: z.ZodType<Prisma.AreaOfEffectOrderByInput> = z.object({
  size: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DifficultyClassOrderByInputSchema: z.ZodType<Prisma.DifficultyClassOrderByInput> = z.object({
  dc_success: z.lazy(() => SortOrderSchema).optional(),
  dc_type: z.lazy(() => APIReferenceOrderByInputSchema).optional(),
  desc: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const APIReferenceOrderByInputSchema: z.ZodType<Prisma.APIReferenceOrderByInput> = z.object({
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const APIReferenceOrderByCompositeAggregateInputSchema: z.ZodType<Prisma.APIReferenceOrderByCompositeAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpellCountOrderByAggregateInputSchema: z.ZodType<Prisma.SpellCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  desc: z.lazy(() => SortOrderSchema).optional(),
  higher_level: z.lazy(() => SortOrderSchema).optional(),
  range: z.lazy(() => SortOrderSchema).optional(),
  components: z.lazy(() => SortOrderSchema).optional(),
  material: z.lazy(() => SortOrderSchema).optional(),
  ritual: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  concentration: z.lazy(() => SortOrderSchema).optional(),
  casting_time: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  attack_type: z.lazy(() => SortOrderSchema).optional(),
  damage: z.lazy(() => SortOrderSchema).optional(),
  spellbook_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpellAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SpellAvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpellMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SpellMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  range: z.lazy(() => SortOrderSchema).optional(),
  material: z.lazy(() => SortOrderSchema).optional(),
  ritual: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  concentration: z.lazy(() => SortOrderSchema).optional(),
  casting_time: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  attack_type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpellMinOrderByAggregateInputSchema: z.ZodType<Prisma.SpellMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  range: z.lazy(() => SortOrderSchema).optional(),
  material: z.lazy(() => SortOrderSchema).optional(),
  ritual: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  concentration: z.lazy(() => SortOrderSchema).optional(),
  casting_time: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  attack_type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SpellSumOrderByAggregateInputSchema: z.ZodType<Prisma.SpellSumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional().nullable(),
  not: InputJsonValueSchema.optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const MulticlassingNullableCompositeFilterSchema: z.ZodType<Prisma.MulticlassingNullableCompositeFilter> = z.object({
  equals: z.lazy(() => MulticlassingObjectEqualityInputSchema).optional().nullable(),
  is: z.lazy(() => MulticlassingWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => MulticlassingWhereInputSchema).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const MulticlassingObjectEqualityInputSchema: z.ZodType<Prisma.MulticlassingObjectEqualityInput> = z.object({
  prerequisites: z.lazy(() => PrerequisiteObjectEqualityInputSchema).array().optional(),
  prerequisite_options: InputJsonValueSchema.optional().nullable(),
  proficiencies: z.lazy(() => APIReferenceObjectEqualityInputSchema).array().optional(),
  proficiency_choices: z.lazy(() => ChoiceObjectEqualityInputSchema).array().optional()
}).strict();

export const StartingEquipmentCompositeListFilterSchema: z.ZodType<Prisma.StartingEquipmentCompositeListFilter> = z.object({
  equals: z.lazy(() => StartingEquipmentObjectEqualityInputSchema).array().optional(),
  every: z.lazy(() => StartingEquipmentWhereInputSchema).optional(),
  some: z.lazy(() => StartingEquipmentWhereInputSchema).optional(),
  none: z.lazy(() => StartingEquipmentWhereInputSchema).optional(),
  isEmpty: z.boolean().optional(),
  isSet: z.boolean().optional()
}).strict();

export const StartingEquipmentObjectEqualityInputSchema: z.ZodType<Prisma.StartingEquipmentObjectEqualityInput> = z.object({
  quantity: z.number(),
  equipment: z.lazy(() => APIReferenceObjectEqualityInputSchema)
}).strict();

export const ChoiceCompositeListFilterSchema: z.ZodType<Prisma.ChoiceCompositeListFilter> = z.object({
  equals: z.lazy(() => ChoiceObjectEqualityInputSchema).array().optional(),
  every: z.lazy(() => ChoiceWhereInputSchema).optional(),
  some: z.lazy(() => ChoiceWhereInputSchema).optional(),
  none: z.lazy(() => ChoiceWhereInputSchema).optional(),
  isEmpty: z.boolean().optional(),
  isSet: z.boolean().optional()
}).strict();

export const ChoiceObjectEqualityInputSchema: z.ZodType<Prisma.ChoiceObjectEqualityInput> = z.object({
  desc: z.string().optional().nullable(),
  choose: z.number().optional().nullable(),
  type: z.string().optional().nullable(),
  from: InputJsonValueSchema.optional().nullable()
}).strict();

export const ProficiencyListRelationFilterSchema: z.ZodType<Prisma.ProficiencyListRelationFilter> = z.object({
  every: z.lazy(() => ProficiencyWhereInputSchema).optional(),
  some: z.lazy(() => ProficiencyWhereInputSchema).optional(),
  none: z.lazy(() => ProficiencyWhereInputSchema).optional()
}).strict();

export const MulticlassingOrderByInputSchema: z.ZodType<Prisma.MulticlassingOrderByInput> = z.object({
  prerequisites: z.lazy(() => PrerequisiteOrderByCompositeAggregateInputSchema).optional(),
  prerequisite_options: z.lazy(() => SortOrderSchema).optional(),
  proficiencies: z.lazy(() => APIReferenceOrderByCompositeAggregateInputSchema).optional(),
  proficiency_choices: z.lazy(() => ChoiceOrderByCompositeAggregateInputSchema).optional()
}).strict();

export const StartingEquipmentOrderByCompositeAggregateInputSchema: z.ZodType<Prisma.StartingEquipmentOrderByCompositeAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChoiceOrderByCompositeAggregateInputSchema: z.ZodType<Prisma.ChoiceOrderByCompositeAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProficiencyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProficiencyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ClassCountOrderByAggregateInputSchema: z.ZodType<Prisma.ClassCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  hit_die: z.lazy(() => SortOrderSchema).optional(),
  class_levels: z.lazy(() => SortOrderSchema).optional(),
  spells: z.lazy(() => SortOrderSchema).optional(),
  proficiency_ids: z.lazy(() => SortOrderSchema).optional(),
  spellbook_ids: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ClassAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ClassAvgOrderByAggregateInput> = z.object({
  hit_die: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ClassMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ClassMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  hit_die: z.lazy(() => SortOrderSchema).optional(),
  class_levels: z.lazy(() => SortOrderSchema).optional(),
  spells: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ClassMinOrderByAggregateInputSchema: z.ZodType<Prisma.ClassMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  hit_die: z.lazy(() => SortOrderSchema).optional(),
  class_levels: z.lazy(() => SortOrderSchema).optional(),
  spells: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ClassSumOrderByAggregateInputSchema: z.ZodType<Prisma.ClassSumOrderByAggregateInput> = z.object({
  hit_die: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AbilityBonusCompositeListFilterSchema: z.ZodType<Prisma.AbilityBonusCompositeListFilter> = z.object({
  equals: z.lazy(() => AbilityBonusObjectEqualityInputSchema).array().optional(),
  every: z.lazy(() => AbilityBonusWhereInputSchema).optional(),
  some: z.lazy(() => AbilityBonusWhereInputSchema).optional(),
  none: z.lazy(() => AbilityBonusWhereInputSchema).optional(),
  isEmpty: z.boolean().optional(),
  isSet: z.boolean().optional()
}).strict();

export const AbilityBonusObjectEqualityInputSchema: z.ZodType<Prisma.AbilityBonusObjectEqualityInput> = z.object({
  bonus: z.number(),
  ability_score: z.lazy(() => APIReferenceObjectEqualityInputSchema)
}).strict();

export const ChoiceNullableCompositeFilterSchema: z.ZodType<Prisma.ChoiceNullableCompositeFilter> = z.object({
  equals: z.lazy(() => ChoiceObjectEqualityInputSchema).optional().nullable(),
  is: z.lazy(() => ChoiceWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ChoiceWhereInputSchema).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const AbilityBonusOrderByCompositeAggregateInputSchema: z.ZodType<Prisma.AbilityBonusOrderByCompositeAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChoiceOrderByInputSchema: z.ZodType<Prisma.ChoiceOrderByInput> = z.object({
  desc: z.lazy(() => SortOrderSchema).optional(),
  choose: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  from: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RaceCountOrderByAggregateInputSchema: z.ZodType<Prisma.RaceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  speed: z.lazy(() => SortOrderSchema).optional(),
  alignment: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  size_description: z.lazy(() => SortOrderSchema).optional(),
  language_desc: z.lazy(() => SortOrderSchema).optional(),
  spellbook_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RaceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RaceAvgOrderByAggregateInput> = z.object({
  speed: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RaceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RaceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  speed: z.lazy(() => SortOrderSchema).optional(),
  alignment: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  size_description: z.lazy(() => SortOrderSchema).optional(),
  language_desc: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RaceMinOrderByAggregateInputSchema: z.ZodType<Prisma.RaceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  speed: z.lazy(() => SortOrderSchema).optional(),
  alignment: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  size_description: z.lazy(() => SortOrderSchema).optional(),
  language_desc: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RaceSumOrderByAggregateInputSchema: z.ZodType<Prisma.RaceSumOrderByAggregateInput> = z.object({
  speed: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const CharacterAbilityScoreCompositeListFilterSchema: z.ZodType<Prisma.CharacterAbilityScoreCompositeListFilter> = z.object({
  equals: z.lazy(() => CharacterAbilityScoreObjectEqualityInputSchema).array().optional(),
  every: z.lazy(() => CharacterAbilityScoreWhereInputSchema).optional(),
  some: z.lazy(() => CharacterAbilityScoreWhereInputSchema).optional(),
  none: z.lazy(() => CharacterAbilityScoreWhereInputSchema).optional(),
  isEmpty: z.boolean().optional(),
  isSet: z.boolean().optional()
}).strict();

export const CharacterAbilityScoreObjectEqualityInputSchema: z.ZodType<Prisma.CharacterAbilityScoreObjectEqualityInput> = z.object({
  type: z.string(),
  value: z.number()
}).strict();

export const DeathSaveNullableCompositeFilterSchema: z.ZodType<Prisma.DeathSaveNullableCompositeFilter> = z.object({
  equals: z.lazy(() => DeathSaveObjectEqualityInputSchema).optional().nullable(),
  is: z.lazy(() => DeathSaveWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => DeathSaveWhereInputSchema).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const DeathSaveObjectEqualityInputSchema: z.ZodType<Prisma.DeathSaveObjectEqualityInput> = z.object({
  successes: z.number(),
  failures: z.number()
}).strict();

export const CoinTypeNullableCompositeFilterSchema: z.ZodType<Prisma.CoinTypeNullableCompositeFilter> = z.object({
  equals: z.lazy(() => CoinTypeObjectEqualityInputSchema).optional().nullable(),
  is: z.lazy(() => CoinTypeWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CoinTypeWhereInputSchema).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const CoinTypeObjectEqualityInputSchema: z.ZodType<Prisma.CoinTypeObjectEqualityInput> = z.object({
  copper_pieces: z.number(),
  silver_pieces: z.number(),
  electrum_pieces: z.number(),
  gold_pieces: z.number(),
  platinum_pieces: z.number()
}).strict();

export const AbilityScoreListRelationFilterSchema: z.ZodType<Prisma.AbilityScoreListRelationFilter> = z.object({
  every: z.lazy(() => AbilityScoreWhereInputSchema).optional(),
  some: z.lazy(() => AbilityScoreWhereInputSchema).optional(),
  none: z.lazy(() => AbilityScoreWhereInputSchema).optional()
}).strict();

export const SkillListRelationFilterSchema: z.ZodType<Prisma.SkillListRelationFilter> = z.object({
  every: z.lazy(() => SkillWhereInputSchema).optional(),
  some: z.lazy(() => SkillWhereInputSchema).optional(),
  none: z.lazy(() => SkillWhereInputSchema).optional()
}).strict();

export const LanguageListRelationFilterSchema: z.ZodType<Prisma.LanguageListRelationFilter> = z.object({
  every: z.lazy(() => LanguageWhereInputSchema).optional(),
  some: z.lazy(() => LanguageWhereInputSchema).optional(),
  none: z.lazy(() => LanguageWhereInputSchema).optional()
}).strict();

export const RaceRelationFilterSchema: z.ZodType<Prisma.RaceRelationFilter> = z.object({
  is: z.lazy(() => RaceWhereInputSchema).optional(),
  isNot: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const CharacterAbilityScoreOrderByCompositeAggregateInputSchema: z.ZodType<Prisma.CharacterAbilityScoreOrderByCompositeAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DeathSaveOrderByInputSchema: z.ZodType<Prisma.DeathSaveOrderByInput> = z.object({
  successes: z.lazy(() => SortOrderSchema).optional(),
  failures: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CoinTypeOrderByInputSchema: z.ZodType<Prisma.CoinTypeOrderByInput> = z.object({
  copper_pieces: z.lazy(() => SortOrderSchema).optional(),
  silver_pieces: z.lazy(() => SortOrderSchema).optional(),
  electrum_pieces: z.lazy(() => SortOrderSchema).optional(),
  gold_pieces: z.lazy(() => SortOrderSchema).optional(),
  platinum_pieces: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AbilityScoreOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AbilityScoreOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SkillOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SkillOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LanguageOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CharacterUser_characterCompoundUniqueInputSchema: z.ZodType<Prisma.CharacterUser_characterCompoundUniqueInput> = z.object({
  id: z.string(),
  user_id: z.string()
}).strict();

export const CharacterCountOrderByAggregateInputSchema: z.ZodType<Prisma.CharacterCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  character_name: z.lazy(() => SortOrderSchema).optional(),
  player_name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  backstory: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  experience: z.lazy(() => SortOrderSchema).optional(),
  next_level: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  Height: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  eye_color: z.lazy(() => SortOrderSchema).optional(),
  hair_color: z.lazy(() => SortOrderSchema).optional(),
  skin_color: z.lazy(() => SortOrderSchema).optional(),
  saving_throw_ids: z.lazy(() => SortOrderSchema).optional(),
  skill_ids: z.lazy(() => SortOrderSchema).optional(),
  armor_class: z.lazy(() => SortOrderSchema).optional(),
  language_ids: z.lazy(() => SortOrderSchema).optional(),
  proficiency_ids: z.lazy(() => SortOrderSchema).optional(),
  items: z.lazy(() => SortOrderSchema).optional(),
  image_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  class_ids: z.lazy(() => SortOrderSchema).optional(),
  race_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CharacterAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CharacterAvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional(),
  experience: z.lazy(() => SortOrderSchema).optional(),
  next_level: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  armor_class: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CharacterMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CharacterMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  character_name: z.lazy(() => SortOrderSchema).optional(),
  player_name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  backstory: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  experience: z.lazy(() => SortOrderSchema).optional(),
  next_level: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  Height: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  eye_color: z.lazy(() => SortOrderSchema).optional(),
  hair_color: z.lazy(() => SortOrderSchema).optional(),
  skin_color: z.lazy(() => SortOrderSchema).optional(),
  armor_class: z.lazy(() => SortOrderSchema).optional(),
  image_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  race_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CharacterMinOrderByAggregateInputSchema: z.ZodType<Prisma.CharacterMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  character_name: z.lazy(() => SortOrderSchema).optional(),
  player_name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  backstory: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  experience: z.lazy(() => SortOrderSchema).optional(),
  next_level: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  Height: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  eye_color: z.lazy(() => SortOrderSchema).optional(),
  hair_color: z.lazy(() => SortOrderSchema).optional(),
  skin_color: z.lazy(() => SortOrderSchema).optional(),
  armor_class: z.lazy(() => SortOrderSchema).optional(),
  image_url: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  race_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CharacterSumOrderByAggregateInputSchema: z.ZodType<Prisma.CharacterSumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional(),
  experience: z.lazy(() => SortOrderSchema).optional(),
  next_level: z.lazy(() => SortOrderSchema).optional(),
  age: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  armor_class: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const AbilityScoreCountOrderByAggregateInputSchema: z.ZodType<Prisma.AbilityScoreCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  full_name: z.lazy(() => SortOrderSchema).optional(),
  desc: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AbilityScoreMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AbilityScoreMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  full_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AbilityScoreMinOrderByAggregateInputSchema: z.ZodType<Prisma.AbilityScoreMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  full_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SkillCountOrderByAggregateInputSchema: z.ZodType<Prisma.SkillCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  desc: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SkillMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SkillMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SkillMinOrderByAggregateInputSchema: z.ZodType<Prisma.SkillMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageCountOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  typical_speakers: z.lazy(() => SortOrderSchema).optional(),
  script: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  script: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageMinOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  script: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProficiencyCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProficiencyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  race_ids: z.lazy(() => SortOrderSchema).optional(),
  class_ids: z.lazy(() => SortOrderSchema).optional(),
  character_ids: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProficiencyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProficiencyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProficiencyMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProficiencyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  index: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const KeyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.KeyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpellbookCreateNestedManyWithoutAuth_userInputSchema: z.ZodType<Prisma.SpellbookCreateNestedManyWithoutAuth_userInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutAuth_userInputSchema),z.lazy(() => SpellbookCreateWithoutAuth_userInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutAuth_userInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutAuth_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutAuth_userInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutAuth_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpellbookCreateManyAuth_userInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CharacterCreateNestedManyWithoutAuth_userInputSchema: z.ZodType<Prisma.CharacterCreateNestedManyWithoutAuth_userInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutAuth_userInputSchema),z.lazy(() => CharacterCreateWithoutAuth_userInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutAuth_userInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutAuth_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutAuth_userInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutAuth_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CharacterCreateManyAuth_userInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FriendsCreateNestedManyWithoutFriendsInputSchema: z.ZodType<Prisma.FriendsCreateNestedManyWithoutFriendsInput> = z.object({
  create: z.union([ z.lazy(() => FriendsCreateWithoutFriendsInputSchema),z.lazy(() => FriendsCreateWithoutFriendsInputSchema).array(),z.lazy(() => FriendsUncheckedCreateWithoutFriendsInputSchema),z.lazy(() => FriendsUncheckedCreateWithoutFriendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FriendsCreateOrConnectWithoutFriendsInputSchema),z.lazy(() => FriendsCreateOrConnectWithoutFriendsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FriendsWhereUniqueInputSchema),z.lazy(() => FriendsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RequestedFriendsCreateNestedManyWithoutRequested_friendsInputSchema: z.ZodType<Prisma.RequestedFriendsCreateNestedManyWithoutRequested_friendsInput> = z.object({
  create: z.union([ z.lazy(() => RequestedFriendsCreateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsCreateWithoutRequested_friendsInputSchema).array(),z.lazy(() => RequestedFriendsUncheckedCreateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUncheckedCreateWithoutRequested_friendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RequestedFriendsCreateOrConnectWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsCreateOrConnectWithoutRequested_friendsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RequestedFriendsWhereUniqueInputSchema),z.lazy(() => RequestedFriendsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SentRequestsCreateNestedManyWithoutSent_requestsInputSchema: z.ZodType<Prisma.SentRequestsCreateNestedManyWithoutSent_requestsInput> = z.object({
  create: z.union([ z.lazy(() => SentRequestsCreateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsCreateWithoutSent_requestsInputSchema).array(),z.lazy(() => SentRequestsUncheckedCreateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUncheckedCreateWithoutSent_requestsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SentRequestsCreateOrConnectWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsCreateOrConnectWithoutSent_requestsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SentRequestsWhereUniqueInputSchema),z.lazy(() => SentRequestsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CampaignCreateNestedManyWithoutOwner_userInputSchema: z.ZodType<Prisma.CampaignCreateNestedManyWithoutOwner_userInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutOwner_userInputSchema),z.lazy(() => CampaignCreateWithoutOwner_userInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutOwner_userInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutOwner_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutOwner_userInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutOwner_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CampaignCreateManyOwner_userInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CampaignCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.CampaignCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutUsersInputSchema),z.lazy(() => CampaignCreateWithoutUsersInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutUsersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutUsersInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CampaignCreateNestedManyWithoutRequested_usersInputSchema: z.ZodType<Prisma.CampaignCreateNestedManyWithoutRequested_usersInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutRequested_usersInputSchema),z.lazy(() => CampaignCreateWithoutRequested_usersInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutRequested_usersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutRequested_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutRequested_usersInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutRequested_usersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreatefriend_idsInputSchema: z.ZodType<Prisma.UserCreatefriend_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const UserCreaterequested_friend_idsInputSchema: z.ZodType<Prisma.UserCreaterequested_friend_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const UserCreatesent_request_idsInputSchema: z.ZodType<Prisma.UserCreatesent_request_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const UserCreatejoined_campaign_idsInputSchema: z.ZodType<Prisma.UserCreatejoined_campaign_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const UserCreaterequested_campaign_idsInputSchema: z.ZodType<Prisma.UserCreaterequested_campaign_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const KeyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpellbookUncheckedCreateNestedManyWithoutAuth_userInputSchema: z.ZodType<Prisma.SpellbookUncheckedCreateNestedManyWithoutAuth_userInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutAuth_userInputSchema),z.lazy(() => SpellbookCreateWithoutAuth_userInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutAuth_userInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutAuth_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutAuth_userInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutAuth_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpellbookCreateManyAuth_userInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CharacterUncheckedCreateNestedManyWithoutAuth_userInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateNestedManyWithoutAuth_userInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutAuth_userInputSchema),z.lazy(() => CharacterCreateWithoutAuth_userInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutAuth_userInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutAuth_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutAuth_userInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutAuth_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CharacterCreateManyAuth_userInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FriendsUncheckedCreateNestedManyWithoutFriendsInputSchema: z.ZodType<Prisma.FriendsUncheckedCreateNestedManyWithoutFriendsInput> = z.object({
  create: z.union([ z.lazy(() => FriendsCreateWithoutFriendsInputSchema),z.lazy(() => FriendsCreateWithoutFriendsInputSchema).array(),z.lazy(() => FriendsUncheckedCreateWithoutFriendsInputSchema),z.lazy(() => FriendsUncheckedCreateWithoutFriendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FriendsCreateOrConnectWithoutFriendsInputSchema),z.lazy(() => FriendsCreateOrConnectWithoutFriendsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FriendsWhereUniqueInputSchema),z.lazy(() => FriendsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInputSchema: z.ZodType<Prisma.RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInput> = z.object({
  create: z.union([ z.lazy(() => RequestedFriendsCreateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsCreateWithoutRequested_friendsInputSchema).array(),z.lazy(() => RequestedFriendsUncheckedCreateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUncheckedCreateWithoutRequested_friendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RequestedFriendsCreateOrConnectWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsCreateOrConnectWithoutRequested_friendsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RequestedFriendsWhereUniqueInputSchema),z.lazy(() => RequestedFriendsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInputSchema: z.ZodType<Prisma.SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInput> = z.object({
  create: z.union([ z.lazy(() => SentRequestsCreateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsCreateWithoutSent_requestsInputSchema).array(),z.lazy(() => SentRequestsUncheckedCreateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUncheckedCreateWithoutSent_requestsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SentRequestsCreateOrConnectWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsCreateOrConnectWithoutSent_requestsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SentRequestsWhereUniqueInputSchema),z.lazy(() => SentRequestsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CampaignUncheckedCreateNestedManyWithoutOwner_userInputSchema: z.ZodType<Prisma.CampaignUncheckedCreateNestedManyWithoutOwner_userInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutOwner_userInputSchema),z.lazy(() => CampaignCreateWithoutOwner_userInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutOwner_userInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutOwner_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutOwner_userInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutOwner_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CampaignCreateManyOwner_userInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CampaignUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.CampaignUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutUsersInputSchema),z.lazy(() => CampaignCreateWithoutUsersInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutUsersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutUsersInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CampaignUncheckedCreateNestedManyWithoutRequested_usersInputSchema: z.ZodType<Prisma.CampaignUncheckedCreateNestedManyWithoutRequested_usersInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutRequested_usersInputSchema),z.lazy(() => CampaignCreateWithoutRequested_usersInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutRequested_usersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutRequested_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutRequested_usersInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutRequested_usersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable(),
  unset: z.boolean().optional()
}).strict();

export const EnumRoleFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumRoleFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => RoleSchema).optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable(),
  unset: z.boolean().optional()
}).strict();

export const KeyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.KeyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpellbookUpdateManyWithoutAuth_userNestedInputSchema: z.ZodType<Prisma.SpellbookUpdateManyWithoutAuth_userNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutAuth_userInputSchema),z.lazy(() => SpellbookCreateWithoutAuth_userInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutAuth_userInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutAuth_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutAuth_userInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutAuth_userInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutAuth_userInputSchema),z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutAuth_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpellbookCreateManyAuth_userInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutAuth_userInputSchema),z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutAuth_userInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellbookUpdateManyWithWhereWithoutAuth_userInputSchema),z.lazy(() => SpellbookUpdateManyWithWhereWithoutAuth_userInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CharacterUpdateManyWithoutAuth_userNestedInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithoutAuth_userNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutAuth_userInputSchema),z.lazy(() => CharacterCreateWithoutAuth_userInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutAuth_userInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutAuth_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutAuth_userInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutAuth_userInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutAuth_userInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutAuth_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CharacterCreateManyAuth_userInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutAuth_userInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutAuth_userInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutAuth_userInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutAuth_userInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FriendsUpdateManyWithoutFriendsNestedInputSchema: z.ZodType<Prisma.FriendsUpdateManyWithoutFriendsNestedInput> = z.object({
  create: z.union([ z.lazy(() => FriendsCreateWithoutFriendsInputSchema),z.lazy(() => FriendsCreateWithoutFriendsInputSchema).array(),z.lazy(() => FriendsUncheckedCreateWithoutFriendsInputSchema),z.lazy(() => FriendsUncheckedCreateWithoutFriendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FriendsCreateOrConnectWithoutFriendsInputSchema),z.lazy(() => FriendsCreateOrConnectWithoutFriendsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FriendsUpsertWithWhereUniqueWithoutFriendsInputSchema),z.lazy(() => FriendsUpsertWithWhereUniqueWithoutFriendsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => FriendsWhereUniqueInputSchema),z.lazy(() => FriendsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FriendsWhereUniqueInputSchema),z.lazy(() => FriendsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FriendsWhereUniqueInputSchema),z.lazy(() => FriendsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FriendsWhereUniqueInputSchema),z.lazy(() => FriendsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FriendsUpdateWithWhereUniqueWithoutFriendsInputSchema),z.lazy(() => FriendsUpdateWithWhereUniqueWithoutFriendsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FriendsUpdateManyWithWhereWithoutFriendsInputSchema),z.lazy(() => FriendsUpdateManyWithWhereWithoutFriendsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FriendsScalarWhereInputSchema),z.lazy(() => FriendsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RequestedFriendsUpdateManyWithoutRequested_friendsNestedInputSchema: z.ZodType<Prisma.RequestedFriendsUpdateManyWithoutRequested_friendsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RequestedFriendsCreateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsCreateWithoutRequested_friendsInputSchema).array(),z.lazy(() => RequestedFriendsUncheckedCreateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUncheckedCreateWithoutRequested_friendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RequestedFriendsCreateOrConnectWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsCreateOrConnectWithoutRequested_friendsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RequestedFriendsUpsertWithWhereUniqueWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUpsertWithWhereUniqueWithoutRequested_friendsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RequestedFriendsWhereUniqueInputSchema),z.lazy(() => RequestedFriendsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RequestedFriendsWhereUniqueInputSchema),z.lazy(() => RequestedFriendsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RequestedFriendsWhereUniqueInputSchema),z.lazy(() => RequestedFriendsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RequestedFriendsWhereUniqueInputSchema),z.lazy(() => RequestedFriendsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RequestedFriendsUpdateWithWhereUniqueWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUpdateWithWhereUniqueWithoutRequested_friendsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RequestedFriendsUpdateManyWithWhereWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUpdateManyWithWhereWithoutRequested_friendsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RequestedFriendsScalarWhereInputSchema),z.lazy(() => RequestedFriendsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SentRequestsUpdateManyWithoutSent_requestsNestedInputSchema: z.ZodType<Prisma.SentRequestsUpdateManyWithoutSent_requestsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SentRequestsCreateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsCreateWithoutSent_requestsInputSchema).array(),z.lazy(() => SentRequestsUncheckedCreateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUncheckedCreateWithoutSent_requestsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SentRequestsCreateOrConnectWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsCreateOrConnectWithoutSent_requestsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SentRequestsUpsertWithWhereUniqueWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUpsertWithWhereUniqueWithoutSent_requestsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SentRequestsWhereUniqueInputSchema),z.lazy(() => SentRequestsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SentRequestsWhereUniqueInputSchema),z.lazy(() => SentRequestsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SentRequestsWhereUniqueInputSchema),z.lazy(() => SentRequestsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SentRequestsWhereUniqueInputSchema),z.lazy(() => SentRequestsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SentRequestsUpdateWithWhereUniqueWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUpdateWithWhereUniqueWithoutSent_requestsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SentRequestsUpdateManyWithWhereWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUpdateManyWithWhereWithoutSent_requestsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SentRequestsScalarWhereInputSchema),z.lazy(() => SentRequestsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CampaignUpdateManyWithoutOwner_userNestedInputSchema: z.ZodType<Prisma.CampaignUpdateManyWithoutOwner_userNestedInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutOwner_userInputSchema),z.lazy(() => CampaignCreateWithoutOwner_userInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutOwner_userInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutOwner_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutOwner_userInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutOwner_userInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CampaignUpsertWithWhereUniqueWithoutOwner_userInputSchema),z.lazy(() => CampaignUpsertWithWhereUniqueWithoutOwner_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CampaignCreateManyOwner_userInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CampaignUpdateWithWhereUniqueWithoutOwner_userInputSchema),z.lazy(() => CampaignUpdateWithWhereUniqueWithoutOwner_userInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CampaignUpdateManyWithWhereWithoutOwner_userInputSchema),z.lazy(() => CampaignUpdateManyWithWhereWithoutOwner_userInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CampaignScalarWhereInputSchema),z.lazy(() => CampaignScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CampaignUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.CampaignUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutUsersInputSchema),z.lazy(() => CampaignCreateWithoutUsersInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutUsersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutUsersInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CampaignUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => CampaignUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CampaignUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => CampaignUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CampaignUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => CampaignUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CampaignScalarWhereInputSchema),z.lazy(() => CampaignScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CampaignUpdateManyWithoutRequested_usersNestedInputSchema: z.ZodType<Prisma.CampaignUpdateManyWithoutRequested_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutRequested_usersInputSchema),z.lazy(() => CampaignCreateWithoutRequested_usersInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutRequested_usersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutRequested_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutRequested_usersInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutRequested_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CampaignUpsertWithWhereUniqueWithoutRequested_usersInputSchema),z.lazy(() => CampaignUpsertWithWhereUniqueWithoutRequested_usersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CampaignUpdateWithWhereUniqueWithoutRequested_usersInputSchema),z.lazy(() => CampaignUpdateWithWhereUniqueWithoutRequested_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CampaignUpdateManyWithWhereWithoutRequested_usersInputSchema),z.lazy(() => CampaignUpdateManyWithWhereWithoutRequested_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CampaignScalarWhereInputSchema),z.lazy(() => CampaignScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdatefriend_idsInputSchema: z.ZodType<Prisma.UserUpdatefriend_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const UserUpdaterequested_friend_idsInputSchema: z.ZodType<Prisma.UserUpdaterequested_friend_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const UserUpdatesent_request_idsInputSchema: z.ZodType<Prisma.UserUpdatesent_request_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const UserUpdatejoined_campaign_idsInputSchema: z.ZodType<Prisma.UserUpdatejoined_campaign_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const UserUpdaterequested_campaign_idsInputSchema: z.ZodType<Prisma.UserUpdaterequested_campaign_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const KeyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyCreateWithoutUserInputSchema).array(),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => KeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => KeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => KeyWhereUniqueInputSchema),z.lazy(() => KeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => KeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => KeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpellbookUncheckedUpdateManyWithoutAuth_userNestedInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateManyWithoutAuth_userNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutAuth_userInputSchema),z.lazy(() => SpellbookCreateWithoutAuth_userInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutAuth_userInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutAuth_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutAuth_userInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutAuth_userInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutAuth_userInputSchema),z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutAuth_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpellbookCreateManyAuth_userInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutAuth_userInputSchema),z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutAuth_userInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellbookUpdateManyWithWhereWithoutAuth_userInputSchema),z.lazy(() => SpellbookUpdateManyWithWhereWithoutAuth_userInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CharacterUncheckedUpdateManyWithoutAuth_userNestedInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutAuth_userNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutAuth_userInputSchema),z.lazy(() => CharacterCreateWithoutAuth_userInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutAuth_userInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutAuth_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutAuth_userInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutAuth_userInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutAuth_userInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutAuth_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CharacterCreateManyAuth_userInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutAuth_userInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutAuth_userInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutAuth_userInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutAuth_userInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FriendsUncheckedUpdateManyWithoutFriendsNestedInputSchema: z.ZodType<Prisma.FriendsUncheckedUpdateManyWithoutFriendsNestedInput> = z.object({
  create: z.union([ z.lazy(() => FriendsCreateWithoutFriendsInputSchema),z.lazy(() => FriendsCreateWithoutFriendsInputSchema).array(),z.lazy(() => FriendsUncheckedCreateWithoutFriendsInputSchema),z.lazy(() => FriendsUncheckedCreateWithoutFriendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FriendsCreateOrConnectWithoutFriendsInputSchema),z.lazy(() => FriendsCreateOrConnectWithoutFriendsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FriendsUpsertWithWhereUniqueWithoutFriendsInputSchema),z.lazy(() => FriendsUpsertWithWhereUniqueWithoutFriendsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => FriendsWhereUniqueInputSchema),z.lazy(() => FriendsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FriendsWhereUniqueInputSchema),z.lazy(() => FriendsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FriendsWhereUniqueInputSchema),z.lazy(() => FriendsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FriendsWhereUniqueInputSchema),z.lazy(() => FriendsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FriendsUpdateWithWhereUniqueWithoutFriendsInputSchema),z.lazy(() => FriendsUpdateWithWhereUniqueWithoutFriendsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FriendsUpdateManyWithWhereWithoutFriendsInputSchema),z.lazy(() => FriendsUpdateManyWithWhereWithoutFriendsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FriendsScalarWhereInputSchema),z.lazy(() => FriendsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema: z.ZodType<Prisma.RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RequestedFriendsCreateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsCreateWithoutRequested_friendsInputSchema).array(),z.lazy(() => RequestedFriendsUncheckedCreateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUncheckedCreateWithoutRequested_friendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RequestedFriendsCreateOrConnectWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsCreateOrConnectWithoutRequested_friendsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RequestedFriendsUpsertWithWhereUniqueWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUpsertWithWhereUniqueWithoutRequested_friendsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RequestedFriendsWhereUniqueInputSchema),z.lazy(() => RequestedFriendsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RequestedFriendsWhereUniqueInputSchema),z.lazy(() => RequestedFriendsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RequestedFriendsWhereUniqueInputSchema),z.lazy(() => RequestedFriendsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RequestedFriendsWhereUniqueInputSchema),z.lazy(() => RequestedFriendsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RequestedFriendsUpdateWithWhereUniqueWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUpdateWithWhereUniqueWithoutRequested_friendsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RequestedFriendsUpdateManyWithWhereWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUpdateManyWithWhereWithoutRequested_friendsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RequestedFriendsScalarWhereInputSchema),z.lazy(() => RequestedFriendsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInputSchema: z.ZodType<Prisma.SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SentRequestsCreateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsCreateWithoutSent_requestsInputSchema).array(),z.lazy(() => SentRequestsUncheckedCreateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUncheckedCreateWithoutSent_requestsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SentRequestsCreateOrConnectWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsCreateOrConnectWithoutSent_requestsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SentRequestsUpsertWithWhereUniqueWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUpsertWithWhereUniqueWithoutSent_requestsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SentRequestsWhereUniqueInputSchema),z.lazy(() => SentRequestsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SentRequestsWhereUniqueInputSchema),z.lazy(() => SentRequestsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SentRequestsWhereUniqueInputSchema),z.lazy(() => SentRequestsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SentRequestsWhereUniqueInputSchema),z.lazy(() => SentRequestsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SentRequestsUpdateWithWhereUniqueWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUpdateWithWhereUniqueWithoutSent_requestsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SentRequestsUpdateManyWithWhereWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUpdateManyWithWhereWithoutSent_requestsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SentRequestsScalarWhereInputSchema),z.lazy(() => SentRequestsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CampaignUncheckedUpdateManyWithoutOwner_userNestedInputSchema: z.ZodType<Prisma.CampaignUncheckedUpdateManyWithoutOwner_userNestedInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutOwner_userInputSchema),z.lazy(() => CampaignCreateWithoutOwner_userInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutOwner_userInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutOwner_userInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutOwner_userInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutOwner_userInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CampaignUpsertWithWhereUniqueWithoutOwner_userInputSchema),z.lazy(() => CampaignUpsertWithWhereUniqueWithoutOwner_userInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CampaignCreateManyOwner_userInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CampaignUpdateWithWhereUniqueWithoutOwner_userInputSchema),z.lazy(() => CampaignUpdateWithWhereUniqueWithoutOwner_userInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CampaignUpdateManyWithWhereWithoutOwner_userInputSchema),z.lazy(() => CampaignUpdateManyWithWhereWithoutOwner_userInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CampaignScalarWhereInputSchema),z.lazy(() => CampaignScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CampaignUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.CampaignUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutUsersInputSchema),z.lazy(() => CampaignCreateWithoutUsersInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutUsersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutUsersInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CampaignUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => CampaignUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CampaignUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => CampaignUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CampaignUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => CampaignUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CampaignScalarWhereInputSchema),z.lazy(() => CampaignScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CampaignUncheckedUpdateManyWithoutRequested_usersNestedInputSchema: z.ZodType<Prisma.CampaignUncheckedUpdateManyWithoutRequested_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => CampaignCreateWithoutRequested_usersInputSchema),z.lazy(() => CampaignCreateWithoutRequested_usersInputSchema).array(),z.lazy(() => CampaignUncheckedCreateWithoutRequested_usersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutRequested_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CampaignCreateOrConnectWithoutRequested_usersInputSchema),z.lazy(() => CampaignCreateOrConnectWithoutRequested_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CampaignUpsertWithWhereUniqueWithoutRequested_usersInputSchema),z.lazy(() => CampaignUpsertWithWhereUniqueWithoutRequested_usersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CampaignWhereUniqueInputSchema),z.lazy(() => CampaignWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CampaignUpdateWithWhereUniqueWithoutRequested_usersInputSchema),z.lazy(() => CampaignUpdateWithWhereUniqueWithoutRequested_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CampaignUpdateManyWithWhereWithoutRequested_usersInputSchema),z.lazy(() => CampaignUpdateManyWithWhereWithoutRequested_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CampaignScalarWhereInputSchema),z.lazy(() => CampaignScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutFriendsInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutFriendsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFriendsInputSchema),z.lazy(() => UserCreateWithoutFriendsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutFriendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutFriendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutFriendsInputSchema),z.lazy(() => UserCreateOrConnectWithoutFriendsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FriendsCreatefriend_idsInputSchema: z.ZodType<Prisma.FriendsCreatefriend_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const UserUncheckedCreateNestedManyWithoutFriendsInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutFriendsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFriendsInputSchema),z.lazy(() => UserCreateWithoutFriendsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutFriendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutFriendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutFriendsInputSchema),z.lazy(() => UserCreateOrConnectWithoutFriendsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateManyWithoutFriendsNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutFriendsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFriendsInputSchema),z.lazy(() => UserCreateWithoutFriendsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutFriendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutFriendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutFriendsInputSchema),z.lazy(() => UserCreateOrConnectWithoutFriendsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutFriendsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutFriendsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutFriendsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutFriendsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutFriendsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutFriendsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FriendsUpdatefriend_idsInputSchema: z.ZodType<Prisma.FriendsUpdatefriend_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutFriendsNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutFriendsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFriendsInputSchema),z.lazy(() => UserCreateWithoutFriendsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutFriendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutFriendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutFriendsInputSchema),z.lazy(() => UserCreateOrConnectWithoutFriendsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutFriendsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutFriendsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutFriendsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutFriendsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutFriendsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutFriendsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutRequested_friendsInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutRequested_friendsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_friendsInputSchema),z.lazy(() => UserCreateWithoutRequested_friendsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRequested_friendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_friendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRequested_friendsInputSchema),z.lazy(() => UserCreateOrConnectWithoutRequested_friendsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RequestedFriendsCreaterequested_friend_idsInputSchema: z.ZodType<Prisma.RequestedFriendsCreaterequested_friend_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const UserUncheckedCreateNestedManyWithoutRequested_friendsInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutRequested_friendsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_friendsInputSchema),z.lazy(() => UserCreateWithoutRequested_friendsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRequested_friendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_friendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRequested_friendsInputSchema),z.lazy(() => UserCreateOrConnectWithoutRequested_friendsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateManyWithoutRequested_friendsNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutRequested_friendsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_friendsInputSchema),z.lazy(() => UserCreateWithoutRequested_friendsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRequested_friendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_friendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRequested_friendsInputSchema),z.lazy(() => UserCreateOrConnectWithoutRequested_friendsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutRequested_friendsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutRequested_friendsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutRequested_friendsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutRequested_friendsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutRequested_friendsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutRequested_friendsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RequestedFriendsUpdaterequested_friend_idsInputSchema: z.ZodType<Prisma.RequestedFriendsUpdaterequested_friend_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutRequested_friendsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_friendsInputSchema),z.lazy(() => UserCreateWithoutRequested_friendsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRequested_friendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_friendsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRequested_friendsInputSchema),z.lazy(() => UserCreateOrConnectWithoutRequested_friendsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutRequested_friendsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutRequested_friendsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutRequested_friendsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutRequested_friendsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutRequested_friendsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutRequested_friendsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutSent_requestsInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutSent_requestsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSent_requestsInputSchema),z.lazy(() => UserCreateWithoutSent_requestsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSent_requestsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSent_requestsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSent_requestsInputSchema),z.lazy(() => UserCreateOrConnectWithoutSent_requestsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SentRequestsCreatesent_request_idsInputSchema: z.ZodType<Prisma.SentRequestsCreatesent_request_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const UserUncheckedCreateNestedManyWithoutSent_requestsInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutSent_requestsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSent_requestsInputSchema),z.lazy(() => UserCreateWithoutSent_requestsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSent_requestsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSent_requestsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSent_requestsInputSchema),z.lazy(() => UserCreateOrConnectWithoutSent_requestsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateManyWithoutSent_requestsNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutSent_requestsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSent_requestsInputSchema),z.lazy(() => UserCreateWithoutSent_requestsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSent_requestsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSent_requestsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSent_requestsInputSchema),z.lazy(() => UserCreateOrConnectWithoutSent_requestsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutSent_requestsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutSent_requestsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutSent_requestsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutSent_requestsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutSent_requestsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutSent_requestsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SentRequestsUpdatesent_request_idsInputSchema: z.ZodType<Prisma.SentRequestsUpdatesent_request_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutSent_requestsNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutSent_requestsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSent_requestsInputSchema),z.lazy(() => UserCreateWithoutSent_requestsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutSent_requestsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSent_requestsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutSent_requestsInputSchema),z.lazy(() => UserCreateOrConnectWithoutSent_requestsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutSent_requestsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutSent_requestsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutSent_requestsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutSent_requestsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutSent_requestsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutSent_requestsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAuth_sessionInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_sessionInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const BigIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BigIntFieldUpdateOperationsInput> = z.object({
  set: z.bigint().optional(),
  increment: z.bigint().optional(),
  decrement: z.bigint().optional(),
  multiply: z.bigint().optional(),
  divide: z.bigint().optional()
}).strict();

export const UserUpdateOneRequiredWithoutAuth_sessionNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAuth_sessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_sessionInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAuth_sessionInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAuth_sessionInputSchema),z.lazy(() => UserUpdateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_sessionInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAuth_keyInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_keyInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutAuth_keyNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAuth_keyNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuth_keyInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAuth_keyInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAuth_keyInputSchema),z.lazy(() => UserUpdateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_keyInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSpellbooksInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSpellbooksInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSpellbooksInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpellbooksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSpellbooksInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const CharacterCreateNestedOneWithoutSpellbooksInputSchema: z.ZodType<Prisma.CharacterCreateNestedOneWithoutSpellbooksInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutSpellbooksInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSpellbooksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CharacterCreateOrConnectWithoutSpellbooksInputSchema).optional(),
  connect: z.lazy(() => CharacterWhereUniqueInputSchema).optional()
}).strict();

export const SpellCreateNestedManyWithoutSpellbooksInputSchema: z.ZodType<Prisma.SpellCreateNestedManyWithoutSpellbooksInput> = z.object({
  create: z.union([ z.lazy(() => SpellCreateWithoutSpellbooksInputSchema),z.lazy(() => SpellCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => SpellUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => SpellUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => SpellCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellWhereUniqueInputSchema),z.lazy(() => SpellWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ClassCreateNestedManyWithoutSpellbooksInputSchema: z.ZodType<Prisma.ClassCreateNestedManyWithoutSpellbooksInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutSpellbooksInputSchema),z.lazy(() => ClassCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => ClassUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => ClassCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceCreateNestedManyWithoutSpellbooksInputSchema: z.ZodType<Prisma.RaceCreateNestedManyWithoutSpellbooksInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutSpellbooksInputSchema),z.lazy(() => RaceCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => RaceUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => RaceCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpellbookCreatespell_idsInputSchema: z.ZodType<Prisma.SpellbookCreatespell_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const SpellbookCreateclass_idsInputSchema: z.ZodType<Prisma.SpellbookCreateclass_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const SpellbookCreaterace_idsInputSchema: z.ZodType<Prisma.SpellbookCreaterace_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const SpellUncheckedCreateNestedManyWithoutSpellbooksInputSchema: z.ZodType<Prisma.SpellUncheckedCreateNestedManyWithoutSpellbooksInput> = z.object({
  create: z.union([ z.lazy(() => SpellCreateWithoutSpellbooksInputSchema),z.lazy(() => SpellCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => SpellUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => SpellUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => SpellCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellWhereUniqueInputSchema),z.lazy(() => SpellWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ClassUncheckedCreateNestedManyWithoutSpellbooksInputSchema: z.ZodType<Prisma.ClassUncheckedCreateNestedManyWithoutSpellbooksInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutSpellbooksInputSchema),z.lazy(() => ClassCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => ClassUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => ClassCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedCreateNestedManyWithoutSpellbooksInputSchema: z.ZodType<Prisma.RaceUncheckedCreateNestedManyWithoutSpellbooksInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutSpellbooksInputSchema),z.lazy(() => RaceCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => RaceUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => RaceCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutSpellbooksNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSpellbooksNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSpellbooksInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpellbooksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSpellbooksInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSpellbooksInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSpellbooksInputSchema),z.lazy(() => UserUpdateWithoutSpellbooksInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSpellbooksInputSchema) ]).optional(),
}).strict();

export const CharacterUpdateOneWithoutSpellbooksNestedInputSchema: z.ZodType<Prisma.CharacterUpdateOneWithoutSpellbooksNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutSpellbooksInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSpellbooksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CharacterCreateOrConnectWithoutSpellbooksInputSchema).optional(),
  upsert: z.lazy(() => CharacterUpsertWithoutSpellbooksInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CharacterWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CharacterWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateToOneWithWhereWithoutSpellbooksInputSchema),z.lazy(() => CharacterUpdateWithoutSpellbooksInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutSpellbooksInputSchema) ]).optional(),
}).strict();

export const SpellUpdateManyWithoutSpellbooksNestedInputSchema: z.ZodType<Prisma.SpellUpdateManyWithoutSpellbooksNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellCreateWithoutSpellbooksInputSchema),z.lazy(() => SpellCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => SpellUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => SpellUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => SpellCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellUpsertWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => SpellUpsertWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SpellWhereUniqueInputSchema),z.lazy(() => SpellWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellWhereUniqueInputSchema),z.lazy(() => SpellWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellWhereUniqueInputSchema),z.lazy(() => SpellWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellWhereUniqueInputSchema),z.lazy(() => SpellWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellUpdateWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => SpellUpdateWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellUpdateManyWithWhereWithoutSpellbooksInputSchema),z.lazy(() => SpellUpdateManyWithWhereWithoutSpellbooksInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellScalarWhereInputSchema),z.lazy(() => SpellScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ClassUpdateManyWithoutSpellbooksNestedInputSchema: z.ZodType<Prisma.ClassUpdateManyWithoutSpellbooksNestedInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutSpellbooksInputSchema),z.lazy(() => ClassCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => ClassUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => ClassCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ClassUpsertWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => ClassUpsertWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ClassUpdateWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => ClassUpdateWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ClassUpdateManyWithWhereWithoutSpellbooksInputSchema),z.lazy(() => ClassUpdateManyWithWhereWithoutSpellbooksInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ClassScalarWhereInputSchema),z.lazy(() => ClassScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUpdateManyWithoutSpellbooksNestedInputSchema: z.ZodType<Prisma.RaceUpdateManyWithoutSpellbooksNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutSpellbooksInputSchema),z.lazy(() => RaceCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => RaceUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => RaceCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutSpellbooksInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutSpellbooksInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpellbookUpdatespell_idsInputSchema: z.ZodType<Prisma.SpellbookUpdatespell_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const SpellbookUpdateclass_idsInputSchema: z.ZodType<Prisma.SpellbookUpdateclass_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const SpellbookUpdaterace_idsInputSchema: z.ZodType<Prisma.SpellbookUpdaterace_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const SpellUncheckedUpdateManyWithoutSpellbooksNestedInputSchema: z.ZodType<Prisma.SpellUncheckedUpdateManyWithoutSpellbooksNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellCreateWithoutSpellbooksInputSchema),z.lazy(() => SpellCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => SpellUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => SpellUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => SpellCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellUpsertWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => SpellUpsertWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SpellWhereUniqueInputSchema),z.lazy(() => SpellWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellWhereUniqueInputSchema),z.lazy(() => SpellWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellWhereUniqueInputSchema),z.lazy(() => SpellWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellWhereUniqueInputSchema),z.lazy(() => SpellWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellUpdateWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => SpellUpdateWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellUpdateManyWithWhereWithoutSpellbooksInputSchema),z.lazy(() => SpellUpdateManyWithWhereWithoutSpellbooksInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellScalarWhereInputSchema),z.lazy(() => SpellScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ClassUncheckedUpdateManyWithoutSpellbooksNestedInputSchema: z.ZodType<Prisma.ClassUncheckedUpdateManyWithoutSpellbooksNestedInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutSpellbooksInputSchema),z.lazy(() => ClassCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => ClassUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => ClassCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ClassUpsertWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => ClassUpsertWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ClassUpdateWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => ClassUpdateWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ClassUpdateManyWithWhereWithoutSpellbooksInputSchema),z.lazy(() => ClassUpdateManyWithWhereWithoutSpellbooksInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ClassScalarWhereInputSchema),z.lazy(() => ClassScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUncheckedUpdateManyWithoutSpellbooksNestedInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutSpellbooksNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutSpellbooksInputSchema),z.lazy(() => RaceCreateWithoutSpellbooksInputSchema).array(),z.lazy(() => RaceUncheckedCreateWithoutSpellbooksInputSchema),z.lazy(() => RaceUncheckedCreateWithoutSpellbooksInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RaceCreateOrConnectWithoutSpellbooksInputSchema),z.lazy(() => RaceCreateOrConnectWithoutSpellbooksInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RaceUpsertWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => RaceUpsertWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RaceWhereUniqueInputSchema),z.lazy(() => RaceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RaceUpdateWithWhereUniqueWithoutSpellbooksInputSchema),z.lazy(() => RaceUpdateWithWhereUniqueWithoutSpellbooksInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RaceUpdateManyWithWhereWithoutSpellbooksInputSchema),z.lazy(() => RaceUpdateManyWithWhereWithoutSpellbooksInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutOwned_campaignsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutOwned_campaignsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOwned_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwned_campaignsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOwned_campaignsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedManyWithoutJoined_campaignsInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutJoined_campaignsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutJoined_campaignsInputSchema),z.lazy(() => UserCreateWithoutJoined_campaignsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutJoined_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutJoined_campaignsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutJoined_campaignsInputSchema),z.lazy(() => UserCreateOrConnectWithoutJoined_campaignsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutRequested_campaignsInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutRequested_campaignsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_campaignsInputSchema),z.lazy(() => UserCreateWithoutRequested_campaignsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRequested_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_campaignsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRequested_campaignsInputSchema),z.lazy(() => UserCreateOrConnectWithoutRequested_campaignsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CampaignCreateuser_idsInputSchema: z.ZodType<Prisma.CampaignCreateuser_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const CampaignCreaterequested_user_idsInputSchema: z.ZodType<Prisma.CampaignCreaterequested_user_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const UserUncheckedCreateNestedManyWithoutJoined_campaignsInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutJoined_campaignsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutJoined_campaignsInputSchema),z.lazy(() => UserCreateWithoutJoined_campaignsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutJoined_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutJoined_campaignsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutJoined_campaignsInputSchema),z.lazy(() => UserCreateOrConnectWithoutJoined_campaignsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutRequested_campaignsInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutRequested_campaignsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_campaignsInputSchema),z.lazy(() => UserCreateWithoutRequested_campaignsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRequested_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_campaignsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRequested_campaignsInputSchema),z.lazy(() => UserCreateOrConnectWithoutRequested_campaignsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutOwned_campaignsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutOwned_campaignsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOwned_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwned_campaignsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOwned_campaignsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutOwned_campaignsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutOwned_campaignsInputSchema),z.lazy(() => UserUpdateWithoutOwned_campaignsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwned_campaignsInputSchema) ]).optional(),
}).strict();

export const UserUpdateManyWithoutJoined_campaignsNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutJoined_campaignsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutJoined_campaignsInputSchema),z.lazy(() => UserCreateWithoutJoined_campaignsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutJoined_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutJoined_campaignsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutJoined_campaignsInputSchema),z.lazy(() => UserCreateOrConnectWithoutJoined_campaignsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutJoined_campaignsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutJoined_campaignsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutJoined_campaignsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutJoined_campaignsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutJoined_campaignsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutJoined_campaignsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateManyWithoutRequested_campaignsNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutRequested_campaignsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_campaignsInputSchema),z.lazy(() => UserCreateWithoutRequested_campaignsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRequested_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_campaignsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRequested_campaignsInputSchema),z.lazy(() => UserCreateOrConnectWithoutRequested_campaignsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutRequested_campaignsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutRequested_campaignsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutRequested_campaignsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutRequested_campaignsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutRequested_campaignsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutRequested_campaignsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CampaignUpdateuser_idsInputSchema: z.ZodType<Prisma.CampaignUpdateuser_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CampaignUpdaterequested_user_idsInputSchema: z.ZodType<Prisma.CampaignUpdaterequested_user_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutJoined_campaignsNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutJoined_campaignsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutJoined_campaignsInputSchema),z.lazy(() => UserCreateWithoutJoined_campaignsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutJoined_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutJoined_campaignsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutJoined_campaignsInputSchema),z.lazy(() => UserCreateOrConnectWithoutJoined_campaignsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutJoined_campaignsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutJoined_campaignsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutJoined_campaignsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutJoined_campaignsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutJoined_campaignsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutJoined_campaignsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutRequested_campaignsNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutRequested_campaignsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_campaignsInputSchema),z.lazy(() => UserCreateWithoutRequested_campaignsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRequested_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_campaignsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRequested_campaignsInputSchema),z.lazy(() => UserCreateOrConnectWithoutRequested_campaignsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutRequested_campaignsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutRequested_campaignsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutRequested_campaignsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutRequested_campaignsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutRequested_campaignsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutRequested_campaignsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpellCreatedescInputSchema: z.ZodType<Prisma.SpellCreatedescInput> = z.object({
  set: z.string().array()
}).strict();

export const SpellCreatehigher_levelInputSchema: z.ZodType<Prisma.SpellCreatehigher_levelInput> = z.object({
  set: z.string().array()
}).strict();

export const SpellCreatecomponentsInputSchema: z.ZodType<Prisma.SpellCreatecomponentsInput> = z.object({
  set: z.lazy(() => ComponentsSchema).array()
}).strict();

export const AreaOfEffectNullableCreateEnvelopeInputSchema: z.ZodType<Prisma.AreaOfEffectNullableCreateEnvelopeInput> = z.object({
  set: z.lazy(() => AreaOfEffectCreateInputSchema).optional().nullable()
}).strict();

export const AreaOfEffectCreateInputSchema: z.ZodType<Prisma.AreaOfEffectCreateInput> = z.object({
  size: z.number(),
  type: z.lazy(() => AOETypeSchema)
}).strict();

export const DifficultyClassNullableCreateEnvelopeInputSchema: z.ZodType<Prisma.DifficultyClassNullableCreateEnvelopeInput> = z.object({
  set: z.lazy(() => DifficultyClassCreateInputSchema).optional().nullable()
}).strict();

export const DifficultyClassCreateInputSchema: z.ZodType<Prisma.DifficultyClassCreateInput> = z.object({
  dc_success: z.string(),
  dc_type: z.lazy(() => APIReferenceCreateInputSchema),
  desc: z.string().optional().nullable()
}).strict();

export const APIReferenceCreateEnvelopeInputSchema: z.ZodType<Prisma.APIReferenceCreateEnvelopeInput> = z.object({
  set: z.lazy(() => APIReferenceCreateInputSchema).optional()
}).strict();

export const APIReferenceCreateInputSchema: z.ZodType<Prisma.APIReferenceCreateInput> = z.object({
  index: z.string(),
  name: z.string(),
  url: z.string()
}).strict();

export const APIReferenceListCreateEnvelopeInputSchema: z.ZodType<Prisma.APIReferenceListCreateEnvelopeInput> = z.object({
  set: z.union([ z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
}).strict();

export const SpellbookCreateNestedManyWithoutSpellsInputSchema: z.ZodType<Prisma.SpellbookCreateNestedManyWithoutSpellsInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutSpellsInputSchema),z.lazy(() => SpellbookCreateWithoutSpellsInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutSpellsInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutSpellsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutSpellsInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutSpellsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpellCreatespellbook_idsInputSchema: z.ZodType<Prisma.SpellCreatespellbook_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const SpellbookUncheckedCreateNestedManyWithoutSpellsInputSchema: z.ZodType<Prisma.SpellbookUncheckedCreateNestedManyWithoutSpellsInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutSpellsInputSchema),z.lazy(() => SpellbookCreateWithoutSpellsInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutSpellsInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutSpellsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutSpellsInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutSpellsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpellUpdatedescInputSchema: z.ZodType<Prisma.SpellUpdatedescInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const SpellUpdatehigher_levelInputSchema: z.ZodType<Prisma.SpellUpdatehigher_levelInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const SpellUpdatecomponentsInputSchema: z.ZodType<Prisma.SpellUpdatecomponentsInput> = z.object({
  set: z.lazy(() => ComponentsSchema).array().optional(),
  push: z.union([ z.lazy(() => ComponentsSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
}).strict();

export const AreaOfEffectNullableUpdateEnvelopeInputSchema: z.ZodType<Prisma.AreaOfEffectNullableUpdateEnvelopeInput> = z.object({
  set: z.lazy(() => AreaOfEffectCreateInputSchema).optional().nullable(),
  upsert: z.lazy(() => AreaOfEffectUpsertInputSchema).optional(),
  unset: z.boolean().optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const DifficultyClassNullableUpdateEnvelopeInputSchema: z.ZodType<Prisma.DifficultyClassNullableUpdateEnvelopeInput> = z.object({
  set: z.lazy(() => DifficultyClassCreateInputSchema).optional().nullable(),
  upsert: z.lazy(() => DifficultyClassUpsertInputSchema).optional(),
  unset: z.boolean().optional()
}).strict();

export const APIReferenceUpdateEnvelopeInputSchema: z.ZodType<Prisma.APIReferenceUpdateEnvelopeInput> = z.object({
  set: z.lazy(() => APIReferenceCreateInputSchema).optional(),
  update: z.lazy(() => APIReferenceUpdateInputSchema).optional()
}).strict();

export const APIReferenceListUpdateEnvelopeInputSchema: z.ZodType<Prisma.APIReferenceListUpdateEnvelopeInput> = z.object({
  set: z.union([ z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  push: z.union([ z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  updateMany: z.lazy(() => APIReferenceUpdateManyInputSchema).optional(),
  deleteMany: z.lazy(() => APIReferenceDeleteManyInputSchema).optional()
}).strict();

export const SpellbookUpdateManyWithoutSpellsNestedInputSchema: z.ZodType<Prisma.SpellbookUpdateManyWithoutSpellsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutSpellsInputSchema),z.lazy(() => SpellbookCreateWithoutSpellsInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutSpellsInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutSpellsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutSpellsInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutSpellsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutSpellsInputSchema),z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutSpellsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutSpellsInputSchema),z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutSpellsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellbookUpdateManyWithWhereWithoutSpellsInputSchema),z.lazy(() => SpellbookUpdateManyWithWhereWithoutSpellsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpellUpdatespellbook_idsInputSchema: z.ZodType<Prisma.SpellUpdatespellbook_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const SpellbookUncheckedUpdateManyWithoutSpellsNestedInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateManyWithoutSpellsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutSpellsInputSchema),z.lazy(() => SpellbookCreateWithoutSpellsInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutSpellsInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutSpellsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutSpellsInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutSpellsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutSpellsInputSchema),z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutSpellsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutSpellsInputSchema),z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutSpellsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellbookUpdateManyWithWhereWithoutSpellsInputSchema),z.lazy(() => SpellbookUpdateManyWithWhereWithoutSpellsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MulticlassingNullableCreateEnvelopeInputSchema: z.ZodType<Prisma.MulticlassingNullableCreateEnvelopeInput> = z.object({
  set: z.lazy(() => MulticlassingCreateInputSchema).optional().nullable()
}).strict();

export const MulticlassingCreateInputSchema: z.ZodType<Prisma.MulticlassingCreateInput> = z.object({
  prerequisites: z.union([ z.lazy(() => PrerequisiteCreateInputSchema),z.lazy(() => PrerequisiteCreateInputSchema).array() ]).optional(),
  prerequisite_options: InputJsonValueSchema.optional().nullable(),
  proficiencies: z.union([ z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
}).strict();

export const StartingEquipmentListCreateEnvelopeInputSchema: z.ZodType<Prisma.StartingEquipmentListCreateEnvelopeInput> = z.object({
  set: z.union([ z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
}).strict();

export const StartingEquipmentCreateInputSchema: z.ZodType<Prisma.StartingEquipmentCreateInput> = z.object({
  quantity: z.number(),
  equipment: z.lazy(() => APIReferenceCreateInputSchema)
}).strict();

export const ChoiceListCreateEnvelopeInputSchema: z.ZodType<Prisma.ChoiceListCreateEnvelopeInput> = z.object({
  set: z.union([ z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
}).strict();

export const ChoiceCreateInputSchema: z.ZodType<Prisma.ChoiceCreateInput> = z.object({
  desc: z.string().optional().nullable(),
  choose: z.number().optional().nullable(),
  type: z.string().optional().nullable(),
  from: InputJsonValueSchema.optional().nullable()
}).strict();

export const ProficiencyCreateNestedManyWithoutClassesInputSchema: z.ZodType<Prisma.ProficiencyCreateNestedManyWithoutClassesInput> = z.object({
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutClassesInputSchema),z.lazy(() => ProficiencyCreateWithoutClassesInputSchema).array(),z.lazy(() => ProficiencyUncheckedCreateWithoutClassesInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProficiencyCreateOrConnectWithoutClassesInputSchema),z.lazy(() => ProficiencyCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpellbookCreateNestedManyWithoutClassesInputSchema: z.ZodType<Prisma.SpellbookCreateNestedManyWithoutClassesInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutClassesInputSchema),z.lazy(() => SpellbookCreateWithoutClassesInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutClassesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutClassesInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CharacterCreateNestedManyWithoutClassesInputSchema: z.ZodType<Prisma.CharacterCreateNestedManyWithoutClassesInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutClassesInputSchema),z.lazy(() => CharacterCreateWithoutClassesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutClassesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutClassesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ClassCreateproficiency_idsInputSchema: z.ZodType<Prisma.ClassCreateproficiency_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const ClassCreatespellbook_idsInputSchema: z.ZodType<Prisma.ClassCreatespellbook_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const ClassCreatecharacter_idsInputSchema: z.ZodType<Prisma.ClassCreatecharacter_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const ProficiencyUncheckedCreateNestedManyWithoutClassesInputSchema: z.ZodType<Prisma.ProficiencyUncheckedCreateNestedManyWithoutClassesInput> = z.object({
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutClassesInputSchema),z.lazy(() => ProficiencyCreateWithoutClassesInputSchema).array(),z.lazy(() => ProficiencyUncheckedCreateWithoutClassesInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProficiencyCreateOrConnectWithoutClassesInputSchema),z.lazy(() => ProficiencyCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SpellbookUncheckedCreateNestedManyWithoutClassesInputSchema: z.ZodType<Prisma.SpellbookUncheckedCreateNestedManyWithoutClassesInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutClassesInputSchema),z.lazy(() => SpellbookCreateWithoutClassesInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutClassesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutClassesInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CharacterUncheckedCreateNestedManyWithoutClassesInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateNestedManyWithoutClassesInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutClassesInputSchema),z.lazy(() => CharacterCreateWithoutClassesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutClassesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutClassesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MulticlassingNullableUpdateEnvelopeInputSchema: z.ZodType<Prisma.MulticlassingNullableUpdateEnvelopeInput> = z.object({
  set: z.lazy(() => MulticlassingCreateInputSchema).optional().nullable(),
  upsert: z.lazy(() => MulticlassingUpsertInputSchema).optional(),
  unset: z.boolean().optional()
}).strict();

export const StartingEquipmentListUpdateEnvelopeInputSchema: z.ZodType<Prisma.StartingEquipmentListUpdateEnvelopeInput> = z.object({
  set: z.union([ z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  push: z.union([ z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  updateMany: z.lazy(() => StartingEquipmentUpdateManyInputSchema).optional(),
  deleteMany: z.lazy(() => StartingEquipmentDeleteManyInputSchema).optional()
}).strict();

export const ChoiceListUpdateEnvelopeInputSchema: z.ZodType<Prisma.ChoiceListUpdateEnvelopeInput> = z.object({
  set: z.union([ z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  push: z.union([ z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  updateMany: z.lazy(() => ChoiceUpdateManyInputSchema).optional(),
  deleteMany: z.lazy(() => ChoiceDeleteManyInputSchema).optional()
}).strict();

export const ProficiencyUpdateManyWithoutClassesNestedInputSchema: z.ZodType<Prisma.ProficiencyUpdateManyWithoutClassesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutClassesInputSchema),z.lazy(() => ProficiencyCreateWithoutClassesInputSchema).array(),z.lazy(() => ProficiencyUncheckedCreateWithoutClassesInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProficiencyCreateOrConnectWithoutClassesInputSchema),z.lazy(() => ProficiencyCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProficiencyUpsertWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => ProficiencyUpsertWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProficiencyUpdateWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => ProficiencyUpdateWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProficiencyUpdateManyWithWhereWithoutClassesInputSchema),z.lazy(() => ProficiencyUpdateManyWithWhereWithoutClassesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProficiencyScalarWhereInputSchema),z.lazy(() => ProficiencyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpellbookUpdateManyWithoutClassesNestedInputSchema: z.ZodType<Prisma.SpellbookUpdateManyWithoutClassesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutClassesInputSchema),z.lazy(() => SpellbookCreateWithoutClassesInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutClassesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutClassesInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellbookUpdateManyWithWhereWithoutClassesInputSchema),z.lazy(() => SpellbookUpdateManyWithWhereWithoutClassesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CharacterUpdateManyWithoutClassesNestedInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithoutClassesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutClassesInputSchema),z.lazy(() => CharacterCreateWithoutClassesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutClassesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutClassesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutClassesInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutClassesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ClassUpdateproficiency_idsInputSchema: z.ZodType<Prisma.ClassUpdateproficiency_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ClassUpdatespellbook_idsInputSchema: z.ZodType<Prisma.ClassUpdatespellbook_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ClassUpdatecharacter_idsInputSchema: z.ZodType<Prisma.ClassUpdatecharacter_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ProficiencyUncheckedUpdateManyWithoutClassesNestedInputSchema: z.ZodType<Prisma.ProficiencyUncheckedUpdateManyWithoutClassesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutClassesInputSchema),z.lazy(() => ProficiencyCreateWithoutClassesInputSchema).array(),z.lazy(() => ProficiencyUncheckedCreateWithoutClassesInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProficiencyCreateOrConnectWithoutClassesInputSchema),z.lazy(() => ProficiencyCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProficiencyUpsertWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => ProficiencyUpsertWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProficiencyUpdateWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => ProficiencyUpdateWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProficiencyUpdateManyWithWhereWithoutClassesInputSchema),z.lazy(() => ProficiencyUpdateManyWithWhereWithoutClassesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProficiencyScalarWhereInputSchema),z.lazy(() => ProficiencyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SpellbookUncheckedUpdateManyWithoutClassesNestedInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateManyWithoutClassesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutClassesInputSchema),z.lazy(() => SpellbookCreateWithoutClassesInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutClassesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutClassesInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellbookUpdateManyWithWhereWithoutClassesInputSchema),z.lazy(() => SpellbookUpdateManyWithWhereWithoutClassesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CharacterUncheckedUpdateManyWithoutClassesNestedInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutClassesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutClassesInputSchema),z.lazy(() => CharacterCreateWithoutClassesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutClassesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutClassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutClassesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutClassesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutClassesInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutClassesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutClassesInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutClassesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AbilityBonusListCreateEnvelopeInputSchema: z.ZodType<Prisma.AbilityBonusListCreateEnvelopeInput> = z.object({
  set: z.union([ z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
}).strict();

export const AbilityBonusCreateInputSchema: z.ZodType<Prisma.AbilityBonusCreateInput> = z.object({
  bonus: z.number(),
  ability_score: z.lazy(() => APIReferenceCreateInputSchema)
}).strict();

export const ChoiceNullableCreateEnvelopeInputSchema: z.ZodType<Prisma.ChoiceNullableCreateEnvelopeInput> = z.object({
  set: z.lazy(() => ChoiceCreateInputSchema).optional().nullable()
}).strict();

export const SpellbookCreateNestedManyWithoutRacesInputSchema: z.ZodType<Prisma.SpellbookCreateNestedManyWithoutRacesInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutRacesInputSchema),z.lazy(() => SpellbookCreateWithoutRacesInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutRacesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutRacesInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CharacterCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.CharacterCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutRaceInputSchema),z.lazy(() => CharacterCreateWithoutRaceInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutRaceInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutRaceInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CharacterCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceCreatespellbook_idsInputSchema: z.ZodType<Prisma.RaceCreatespellbook_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const SpellbookUncheckedCreateNestedManyWithoutRacesInputSchema: z.ZodType<Prisma.SpellbookUncheckedCreateNestedManyWithoutRacesInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutRacesInputSchema),z.lazy(() => SpellbookCreateWithoutRacesInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutRacesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutRacesInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CharacterUncheckedCreateNestedManyWithoutRaceInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateNestedManyWithoutRaceInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutRaceInputSchema),z.lazy(() => CharacterCreateWithoutRaceInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutRaceInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutRaceInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CharacterCreateManyRaceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AbilityBonusListUpdateEnvelopeInputSchema: z.ZodType<Prisma.AbilityBonusListUpdateEnvelopeInput> = z.object({
  set: z.union([ z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  push: z.union([ z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  updateMany: z.lazy(() => AbilityBonusUpdateManyInputSchema).optional(),
  deleteMany: z.lazy(() => AbilityBonusDeleteManyInputSchema).optional()
}).strict();

export const ChoiceNullableUpdateEnvelopeInputSchema: z.ZodType<Prisma.ChoiceNullableUpdateEnvelopeInput> = z.object({
  set: z.lazy(() => ChoiceCreateInputSchema).optional().nullable(),
  upsert: z.lazy(() => ChoiceUpsertInputSchema).optional(),
  unset: z.boolean().optional()
}).strict();

export const SpellbookUpdateManyWithoutRacesNestedInputSchema: z.ZodType<Prisma.SpellbookUpdateManyWithoutRacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutRacesInputSchema),z.lazy(() => SpellbookCreateWithoutRacesInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutRacesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutRacesInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellbookUpdateManyWithWhereWithoutRacesInputSchema),z.lazy(() => SpellbookUpdateManyWithWhereWithoutRacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CharacterUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutRaceInputSchema),z.lazy(() => CharacterCreateWithoutRaceInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutRaceInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutRaceInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CharacterCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUpdatespellbook_idsInputSchema: z.ZodType<Prisma.RaceUpdatespellbook_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const SpellbookUncheckedUpdateManyWithoutRacesNestedInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateManyWithoutRacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutRacesInputSchema),z.lazy(() => SpellbookCreateWithoutRacesInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutRacesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutRacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutRacesInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutRacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutRacesInputSchema),z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutRacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellbookUpdateManyWithWhereWithoutRacesInputSchema),z.lazy(() => SpellbookUpdateManyWithWhereWithoutRacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CharacterUncheckedUpdateManyWithoutRaceNestedInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutRaceNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutRaceInputSchema),z.lazy(() => CharacterCreateWithoutRaceInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutRaceInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutRaceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutRaceInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutRaceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CharacterCreateManyRaceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutRaceInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutRaceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutRaceInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutRaceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CharacterAbilityScoreListCreateEnvelopeInputSchema: z.ZodType<Prisma.CharacterAbilityScoreListCreateEnvelopeInput> = z.object({
  set: z.union([ z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
}).strict();

export const CharacterAbilityScoreCreateInputSchema: z.ZodType<Prisma.CharacterAbilityScoreCreateInput> = z.object({
  type: z.string(),
  value: z.number()
}).strict();

export const DeathSaveNullableCreateEnvelopeInputSchema: z.ZodType<Prisma.DeathSaveNullableCreateEnvelopeInput> = z.object({
  set: z.lazy(() => DeathSaveCreateInputSchema).optional().nullable()
}).strict();

export const DeathSaveCreateInputSchema: z.ZodType<Prisma.DeathSaveCreateInput> = z.object({
  successes: z.number(),
  failures: z.number()
}).strict();

export const CharacterCreateitemsInputSchema: z.ZodType<Prisma.CharacterCreateitemsInput> = z.object({
  set: z.string().array()
}).strict();

export const CoinTypeNullableCreateEnvelopeInputSchema: z.ZodType<Prisma.CoinTypeNullableCreateEnvelopeInput> = z.object({
  set: z.lazy(() => CoinTypeCreateInputSchema).optional().nullable()
}).strict();

export const CoinTypeCreateInputSchema: z.ZodType<Prisma.CoinTypeCreateInput> = z.object({
  copper_pieces: z.number(),
  silver_pieces: z.number(),
  electrum_pieces: z.number(),
  gold_pieces: z.number(),
  platinum_pieces: z.number()
}).strict();

export const SpellbookCreateNestedManyWithoutCharacterInputSchema: z.ZodType<Prisma.SpellbookCreateNestedManyWithoutCharacterInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutCharacterInputSchema),z.lazy(() => SpellbookCreateWithoutCharacterInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutCharacterInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutCharacterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutCharacterInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutCharacterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpellbookCreateManyCharacterInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AbilityScoreCreateNestedManyWithoutCharacterInputSchema: z.ZodType<Prisma.AbilityScoreCreateNestedManyWithoutCharacterInput> = z.object({
  create: z.union([ z.lazy(() => AbilityScoreCreateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreCreateWithoutCharacterInputSchema).array(),z.lazy(() => AbilityScoreUncheckedCreateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUncheckedCreateWithoutCharacterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AbilityScoreCreateOrConnectWithoutCharacterInputSchema),z.lazy(() => AbilityScoreCreateOrConnectWithoutCharacterInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AbilityScoreWhereUniqueInputSchema),z.lazy(() => AbilityScoreWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SkillCreateNestedManyWithoutCharactersInputSchema: z.ZodType<Prisma.SkillCreateNestedManyWithoutCharactersInput> = z.object({
  create: z.union([ z.lazy(() => SkillCreateWithoutCharactersInputSchema),z.lazy(() => SkillCreateWithoutCharactersInputSchema).array(),z.lazy(() => SkillUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => SkillUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SkillCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => SkillCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SkillWhereUniqueInputSchema),z.lazy(() => SkillWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LanguageCreateNestedManyWithoutCharactersInputSchema: z.ZodType<Prisma.LanguageCreateNestedManyWithoutCharactersInput> = z.object({
  create: z.union([ z.lazy(() => LanguageCreateWithoutCharactersInputSchema),z.lazy(() => LanguageCreateWithoutCharactersInputSchema).array(),z.lazy(() => LanguageUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LanguageCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => LanguageCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LanguageWhereUniqueInputSchema),z.lazy(() => LanguageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProficiencyCreateNestedManyWithoutCharactersInputSchema: z.ZodType<Prisma.ProficiencyCreateNestedManyWithoutCharactersInput> = z.object({
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutCharactersInputSchema),z.lazy(() => ProficiencyCreateWithoutCharactersInputSchema).array(),z.lazy(() => ProficiencyUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProficiencyCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => ProficiencyCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutCharactersInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCharactersInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCharactersInputSchema),z.lazy(() => UserUncheckedCreateWithoutCharactersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCharactersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ClassCreateNestedManyWithoutCharactersInputSchema: z.ZodType<Prisma.ClassCreateNestedManyWithoutCharactersInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutCharactersInputSchema),z.lazy(() => ClassCreateWithoutCharactersInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => ClassUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => ClassCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RaceCreateNestedOneWithoutCharactersInputSchema: z.ZodType<Prisma.RaceCreateNestedOneWithoutCharactersInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCharactersInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCharactersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutCharactersInputSchema).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional()
}).strict();

export const CharacterCreatesaving_throw_idsInputSchema: z.ZodType<Prisma.CharacterCreatesaving_throw_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const CharacterCreateskill_idsInputSchema: z.ZodType<Prisma.CharacterCreateskill_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const CharacterCreatelanguage_idsInputSchema: z.ZodType<Prisma.CharacterCreatelanguage_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const CharacterCreateproficiency_idsInputSchema: z.ZodType<Prisma.CharacterCreateproficiency_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const CharacterCreateclass_idsInputSchema: z.ZodType<Prisma.CharacterCreateclass_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const SpellbookUncheckedCreateNestedManyWithoutCharacterInputSchema: z.ZodType<Prisma.SpellbookUncheckedCreateNestedManyWithoutCharacterInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutCharacterInputSchema),z.lazy(() => SpellbookCreateWithoutCharacterInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutCharacterInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutCharacterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutCharacterInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutCharacterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpellbookCreateManyCharacterInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AbilityScoreUncheckedCreateNestedManyWithoutCharacterInputSchema: z.ZodType<Prisma.AbilityScoreUncheckedCreateNestedManyWithoutCharacterInput> = z.object({
  create: z.union([ z.lazy(() => AbilityScoreCreateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreCreateWithoutCharacterInputSchema).array(),z.lazy(() => AbilityScoreUncheckedCreateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUncheckedCreateWithoutCharacterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AbilityScoreCreateOrConnectWithoutCharacterInputSchema),z.lazy(() => AbilityScoreCreateOrConnectWithoutCharacterInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AbilityScoreWhereUniqueInputSchema),z.lazy(() => AbilityScoreWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SkillUncheckedCreateNestedManyWithoutCharactersInputSchema: z.ZodType<Prisma.SkillUncheckedCreateNestedManyWithoutCharactersInput> = z.object({
  create: z.union([ z.lazy(() => SkillCreateWithoutCharactersInputSchema),z.lazy(() => SkillCreateWithoutCharactersInputSchema).array(),z.lazy(() => SkillUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => SkillUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SkillCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => SkillCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SkillWhereUniqueInputSchema),z.lazy(() => SkillWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LanguageUncheckedCreateNestedManyWithoutCharactersInputSchema: z.ZodType<Prisma.LanguageUncheckedCreateNestedManyWithoutCharactersInput> = z.object({
  create: z.union([ z.lazy(() => LanguageCreateWithoutCharactersInputSchema),z.lazy(() => LanguageCreateWithoutCharactersInputSchema).array(),z.lazy(() => LanguageUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LanguageCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => LanguageCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LanguageWhereUniqueInputSchema),z.lazy(() => LanguageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProficiencyUncheckedCreateNestedManyWithoutCharactersInputSchema: z.ZodType<Prisma.ProficiencyUncheckedCreateNestedManyWithoutCharactersInput> = z.object({
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutCharactersInputSchema),z.lazy(() => ProficiencyCreateWithoutCharactersInputSchema).array(),z.lazy(() => ProficiencyUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProficiencyCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => ProficiencyCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ClassUncheckedCreateNestedManyWithoutCharactersInputSchema: z.ZodType<Prisma.ClassUncheckedCreateNestedManyWithoutCharactersInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutCharactersInputSchema),z.lazy(() => ClassCreateWithoutCharactersInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => ClassUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => ClassCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional(),
  unset: z.boolean().optional()
}).strict();

export const CharacterAbilityScoreListUpdateEnvelopeInputSchema: z.ZodType<Prisma.CharacterAbilityScoreListUpdateEnvelopeInput> = z.object({
  set: z.union([ z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  push: z.union([ z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  updateMany: z.lazy(() => CharacterAbilityScoreUpdateManyInputSchema).optional(),
  deleteMany: z.lazy(() => CharacterAbilityScoreDeleteManyInputSchema).optional()
}).strict();

export const DeathSaveNullableUpdateEnvelopeInputSchema: z.ZodType<Prisma.DeathSaveNullableUpdateEnvelopeInput> = z.object({
  set: z.lazy(() => DeathSaveCreateInputSchema).optional().nullable(),
  upsert: z.lazy(() => DeathSaveUpsertInputSchema).optional(),
  unset: z.boolean().optional()
}).strict();

export const CharacterUpdateitemsInputSchema: z.ZodType<Prisma.CharacterUpdateitemsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CoinTypeNullableUpdateEnvelopeInputSchema: z.ZodType<Prisma.CoinTypeNullableUpdateEnvelopeInput> = z.object({
  set: z.lazy(() => CoinTypeCreateInputSchema).optional().nullable(),
  upsert: z.lazy(() => CoinTypeUpsertInputSchema).optional(),
  unset: z.boolean().optional()
}).strict();

export const SpellbookUpdateManyWithoutCharacterNestedInputSchema: z.ZodType<Prisma.SpellbookUpdateManyWithoutCharacterNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutCharacterInputSchema),z.lazy(() => SpellbookCreateWithoutCharacterInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutCharacterInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutCharacterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutCharacterInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutCharacterInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutCharacterInputSchema),z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutCharacterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpellbookCreateManyCharacterInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutCharacterInputSchema),z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutCharacterInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellbookUpdateManyWithWhereWithoutCharacterInputSchema),z.lazy(() => SpellbookUpdateManyWithWhereWithoutCharacterInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AbilityScoreUpdateManyWithoutCharacterNestedInputSchema: z.ZodType<Prisma.AbilityScoreUpdateManyWithoutCharacterNestedInput> = z.object({
  create: z.union([ z.lazy(() => AbilityScoreCreateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreCreateWithoutCharacterInputSchema).array(),z.lazy(() => AbilityScoreUncheckedCreateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUncheckedCreateWithoutCharacterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AbilityScoreCreateOrConnectWithoutCharacterInputSchema),z.lazy(() => AbilityScoreCreateOrConnectWithoutCharacterInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AbilityScoreUpsertWithWhereUniqueWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUpsertWithWhereUniqueWithoutCharacterInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => AbilityScoreWhereUniqueInputSchema),z.lazy(() => AbilityScoreWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AbilityScoreWhereUniqueInputSchema),z.lazy(() => AbilityScoreWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AbilityScoreWhereUniqueInputSchema),z.lazy(() => AbilityScoreWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AbilityScoreWhereUniqueInputSchema),z.lazy(() => AbilityScoreWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AbilityScoreUpdateWithWhereUniqueWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUpdateWithWhereUniqueWithoutCharacterInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AbilityScoreUpdateManyWithWhereWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUpdateManyWithWhereWithoutCharacterInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AbilityScoreScalarWhereInputSchema),z.lazy(() => AbilityScoreScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SkillUpdateManyWithoutCharactersNestedInputSchema: z.ZodType<Prisma.SkillUpdateManyWithoutCharactersNestedInput> = z.object({
  create: z.union([ z.lazy(() => SkillCreateWithoutCharactersInputSchema),z.lazy(() => SkillCreateWithoutCharactersInputSchema).array(),z.lazy(() => SkillUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => SkillUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SkillCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => SkillCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SkillUpsertWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => SkillUpsertWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SkillWhereUniqueInputSchema),z.lazy(() => SkillWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SkillWhereUniqueInputSchema),z.lazy(() => SkillWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SkillWhereUniqueInputSchema),z.lazy(() => SkillWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SkillWhereUniqueInputSchema),z.lazy(() => SkillWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SkillUpdateWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => SkillUpdateWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SkillUpdateManyWithWhereWithoutCharactersInputSchema),z.lazy(() => SkillUpdateManyWithWhereWithoutCharactersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SkillScalarWhereInputSchema),z.lazy(() => SkillScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LanguageUpdateManyWithoutCharactersNestedInputSchema: z.ZodType<Prisma.LanguageUpdateManyWithoutCharactersNestedInput> = z.object({
  create: z.union([ z.lazy(() => LanguageCreateWithoutCharactersInputSchema),z.lazy(() => LanguageCreateWithoutCharactersInputSchema).array(),z.lazy(() => LanguageUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LanguageCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => LanguageCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LanguageUpsertWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => LanguageUpsertWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => LanguageWhereUniqueInputSchema),z.lazy(() => LanguageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LanguageWhereUniqueInputSchema),z.lazy(() => LanguageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LanguageWhereUniqueInputSchema),z.lazy(() => LanguageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LanguageWhereUniqueInputSchema),z.lazy(() => LanguageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LanguageUpdateWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => LanguageUpdateWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LanguageUpdateManyWithWhereWithoutCharactersInputSchema),z.lazy(() => LanguageUpdateManyWithWhereWithoutCharactersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LanguageScalarWhereInputSchema),z.lazy(() => LanguageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProficiencyUpdateManyWithoutCharactersNestedInputSchema: z.ZodType<Prisma.ProficiencyUpdateManyWithoutCharactersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutCharactersInputSchema),z.lazy(() => ProficiencyCreateWithoutCharactersInputSchema).array(),z.lazy(() => ProficiencyUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProficiencyCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => ProficiencyCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProficiencyUpsertWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => ProficiencyUpsertWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProficiencyUpdateWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => ProficiencyUpdateWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProficiencyUpdateManyWithWhereWithoutCharactersInputSchema),z.lazy(() => ProficiencyUpdateManyWithWhereWithoutCharactersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProficiencyScalarWhereInputSchema),z.lazy(() => ProficiencyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutCharactersNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutCharactersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCharactersInputSchema),z.lazy(() => UserUncheckedCreateWithoutCharactersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCharactersInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCharactersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCharactersInputSchema),z.lazy(() => UserUpdateWithoutCharactersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCharactersInputSchema) ]).optional(),
}).strict();

export const ClassUpdateManyWithoutCharactersNestedInputSchema: z.ZodType<Prisma.ClassUpdateManyWithoutCharactersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutCharactersInputSchema),z.lazy(() => ClassCreateWithoutCharactersInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => ClassUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => ClassCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ClassUpsertWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => ClassUpsertWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ClassUpdateWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => ClassUpdateWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ClassUpdateManyWithWhereWithoutCharactersInputSchema),z.lazy(() => ClassUpdateManyWithWhereWithoutCharactersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ClassScalarWhereInputSchema),z.lazy(() => ClassScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RaceUpdateOneRequiredWithoutCharactersNestedInputSchema: z.ZodType<Prisma.RaceUpdateOneRequiredWithoutCharactersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RaceCreateWithoutCharactersInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCharactersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RaceCreateOrConnectWithoutCharactersInputSchema).optional(),
  upsert: z.lazy(() => RaceUpsertWithoutCharactersInputSchema).optional(),
  connect: z.lazy(() => RaceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RaceUpdateToOneWithWhereWithoutCharactersInputSchema),z.lazy(() => RaceUpdateWithoutCharactersInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutCharactersInputSchema) ]).optional(),
}).strict();

export const CharacterUpdatesaving_throw_idsInputSchema: z.ZodType<Prisma.CharacterUpdatesaving_throw_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdateskill_idsInputSchema: z.ZodType<Prisma.CharacterUpdateskill_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdatelanguage_idsInputSchema: z.ZodType<Prisma.CharacterUpdatelanguage_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdateproficiency_idsInputSchema: z.ZodType<Prisma.CharacterUpdateproficiency_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdateclass_idsInputSchema: z.ZodType<Prisma.CharacterUpdateclass_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const SpellbookUncheckedUpdateManyWithoutCharacterNestedInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateManyWithoutCharacterNestedInput> = z.object({
  create: z.union([ z.lazy(() => SpellbookCreateWithoutCharacterInputSchema),z.lazy(() => SpellbookCreateWithoutCharacterInputSchema).array(),z.lazy(() => SpellbookUncheckedCreateWithoutCharacterInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutCharacterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SpellbookCreateOrConnectWithoutCharacterInputSchema),z.lazy(() => SpellbookCreateOrConnectWithoutCharacterInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutCharacterInputSchema),z.lazy(() => SpellbookUpsertWithWhereUniqueWithoutCharacterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SpellbookCreateManyCharacterInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SpellbookWhereUniqueInputSchema),z.lazy(() => SpellbookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutCharacterInputSchema),z.lazy(() => SpellbookUpdateWithWhereUniqueWithoutCharacterInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SpellbookUpdateManyWithWhereWithoutCharacterInputSchema),z.lazy(() => SpellbookUpdateManyWithWhereWithoutCharacterInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AbilityScoreUncheckedUpdateManyWithoutCharacterNestedInputSchema: z.ZodType<Prisma.AbilityScoreUncheckedUpdateManyWithoutCharacterNestedInput> = z.object({
  create: z.union([ z.lazy(() => AbilityScoreCreateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreCreateWithoutCharacterInputSchema).array(),z.lazy(() => AbilityScoreUncheckedCreateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUncheckedCreateWithoutCharacterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AbilityScoreCreateOrConnectWithoutCharacterInputSchema),z.lazy(() => AbilityScoreCreateOrConnectWithoutCharacterInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AbilityScoreUpsertWithWhereUniqueWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUpsertWithWhereUniqueWithoutCharacterInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => AbilityScoreWhereUniqueInputSchema),z.lazy(() => AbilityScoreWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AbilityScoreWhereUniqueInputSchema),z.lazy(() => AbilityScoreWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AbilityScoreWhereUniqueInputSchema),z.lazy(() => AbilityScoreWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AbilityScoreWhereUniqueInputSchema),z.lazy(() => AbilityScoreWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AbilityScoreUpdateWithWhereUniqueWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUpdateWithWhereUniqueWithoutCharacterInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AbilityScoreUpdateManyWithWhereWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUpdateManyWithWhereWithoutCharacterInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AbilityScoreScalarWhereInputSchema),z.lazy(() => AbilityScoreScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SkillUncheckedUpdateManyWithoutCharactersNestedInputSchema: z.ZodType<Prisma.SkillUncheckedUpdateManyWithoutCharactersNestedInput> = z.object({
  create: z.union([ z.lazy(() => SkillCreateWithoutCharactersInputSchema),z.lazy(() => SkillCreateWithoutCharactersInputSchema).array(),z.lazy(() => SkillUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => SkillUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SkillCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => SkillCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SkillUpsertWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => SkillUpsertWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SkillWhereUniqueInputSchema),z.lazy(() => SkillWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SkillWhereUniqueInputSchema),z.lazy(() => SkillWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SkillWhereUniqueInputSchema),z.lazy(() => SkillWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SkillWhereUniqueInputSchema),z.lazy(() => SkillWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SkillUpdateWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => SkillUpdateWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SkillUpdateManyWithWhereWithoutCharactersInputSchema),z.lazy(() => SkillUpdateManyWithWhereWithoutCharactersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SkillScalarWhereInputSchema),z.lazy(() => SkillScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LanguageUncheckedUpdateManyWithoutCharactersNestedInputSchema: z.ZodType<Prisma.LanguageUncheckedUpdateManyWithoutCharactersNestedInput> = z.object({
  create: z.union([ z.lazy(() => LanguageCreateWithoutCharactersInputSchema),z.lazy(() => LanguageCreateWithoutCharactersInputSchema).array(),z.lazy(() => LanguageUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LanguageCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => LanguageCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LanguageUpsertWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => LanguageUpsertWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => LanguageWhereUniqueInputSchema),z.lazy(() => LanguageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LanguageWhereUniqueInputSchema),z.lazy(() => LanguageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LanguageWhereUniqueInputSchema),z.lazy(() => LanguageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LanguageWhereUniqueInputSchema),z.lazy(() => LanguageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LanguageUpdateWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => LanguageUpdateWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LanguageUpdateManyWithWhereWithoutCharactersInputSchema),z.lazy(() => LanguageUpdateManyWithWhereWithoutCharactersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LanguageScalarWhereInputSchema),z.lazy(() => LanguageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProficiencyUncheckedUpdateManyWithoutCharactersNestedInputSchema: z.ZodType<Prisma.ProficiencyUncheckedUpdateManyWithoutCharactersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutCharactersInputSchema),z.lazy(() => ProficiencyCreateWithoutCharactersInputSchema).array(),z.lazy(() => ProficiencyUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProficiencyCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => ProficiencyCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProficiencyUpsertWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => ProficiencyUpsertWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProficiencyWhereUniqueInputSchema),z.lazy(() => ProficiencyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProficiencyUpdateWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => ProficiencyUpdateWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProficiencyUpdateManyWithWhereWithoutCharactersInputSchema),z.lazy(() => ProficiencyUpdateManyWithWhereWithoutCharactersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProficiencyScalarWhereInputSchema),z.lazy(() => ProficiencyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ClassUncheckedUpdateManyWithoutCharactersNestedInputSchema: z.ZodType<Prisma.ClassUncheckedUpdateManyWithoutCharactersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutCharactersInputSchema),z.lazy(() => ClassCreateWithoutCharactersInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutCharactersInputSchema),z.lazy(() => ClassUncheckedCreateWithoutCharactersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutCharactersInputSchema),z.lazy(() => ClassCreateOrConnectWithoutCharactersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ClassUpsertWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => ClassUpsertWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ClassUpdateWithWhereUniqueWithoutCharactersInputSchema),z.lazy(() => ClassUpdateWithWhereUniqueWithoutCharactersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ClassUpdateManyWithWhereWithoutCharactersInputSchema),z.lazy(() => ClassUpdateManyWithWhereWithoutCharactersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ClassScalarWhereInputSchema),z.lazy(() => ClassScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AbilityScoreCreatedescInputSchema: z.ZodType<Prisma.AbilityScoreCreatedescInput> = z.object({
  set: z.string().array()
}).strict();

export const CharacterCreateNestedManyWithoutSaving_throwsInputSchema: z.ZodType<Prisma.CharacterCreateNestedManyWithoutSaving_throwsInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterCreateWithoutSaving_throwsInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSaving_throwsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutSaving_throwsInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutSaving_throwsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AbilityScoreCreatecharacter_idsInputSchema: z.ZodType<Prisma.AbilityScoreCreatecharacter_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const CharacterUncheckedCreateNestedManyWithoutSaving_throwsInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateNestedManyWithoutSaving_throwsInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterCreateWithoutSaving_throwsInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSaving_throwsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutSaving_throwsInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutSaving_throwsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AbilityScoreUpdatedescInputSchema: z.ZodType<Prisma.AbilityScoreUpdatedescInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdateManyWithoutSaving_throwsNestedInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithoutSaving_throwsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterCreateWithoutSaving_throwsInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSaving_throwsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutSaving_throwsInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutSaving_throwsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutSaving_throwsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutSaving_throwsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutSaving_throwsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AbilityScoreUpdatecharacter_idsInputSchema: z.ZodType<Prisma.AbilityScoreUpdatecharacter_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CharacterUncheckedUpdateManyWithoutSaving_throwsNestedInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutSaving_throwsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterCreateWithoutSaving_throwsInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSaving_throwsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutSaving_throwsInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutSaving_throwsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutSaving_throwsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutSaving_throwsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutSaving_throwsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SkillCreatedescInputSchema: z.ZodType<Prisma.SkillCreatedescInput> = z.object({
  set: z.string().array()
}).strict();

export const CharacterCreateNestedManyWithoutSkillsInputSchema: z.ZodType<Prisma.CharacterCreateNestedManyWithoutSkillsInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutSkillsInputSchema),z.lazy(() => CharacterCreateWithoutSkillsInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutSkillsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSkillsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutSkillsInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutSkillsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SkillCreatecharacter_idsInputSchema: z.ZodType<Prisma.SkillCreatecharacter_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const CharacterUncheckedCreateNestedManyWithoutSkillsInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateNestedManyWithoutSkillsInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutSkillsInputSchema),z.lazy(() => CharacterCreateWithoutSkillsInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutSkillsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSkillsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutSkillsInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutSkillsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SkillUpdatedescInputSchema: z.ZodType<Prisma.SkillUpdatedescInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdateManyWithoutSkillsNestedInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithoutSkillsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutSkillsInputSchema),z.lazy(() => CharacterCreateWithoutSkillsInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutSkillsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSkillsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutSkillsInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutSkillsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutSkillsInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutSkillsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutSkillsInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutSkillsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutSkillsInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutSkillsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SkillUpdatecharacter_idsInputSchema: z.ZodType<Prisma.SkillUpdatecharacter_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CharacterUncheckedUpdateManyWithoutSkillsNestedInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutSkillsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutSkillsInputSchema),z.lazy(() => CharacterCreateWithoutSkillsInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutSkillsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSkillsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutSkillsInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutSkillsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutSkillsInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutSkillsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutSkillsInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutSkillsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutSkillsInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutSkillsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LanguageCreatetypical_speakersInputSchema: z.ZodType<Prisma.LanguageCreatetypical_speakersInput> = z.object({
  set: z.string().array()
}).strict();

export const CharacterCreateNestedManyWithoutLanguagesInputSchema: z.ZodType<Prisma.CharacterCreateNestedManyWithoutLanguagesInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutLanguagesInputSchema),z.lazy(() => CharacterCreateWithoutLanguagesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutLanguagesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutLanguagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutLanguagesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutLanguagesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LanguageCreatecharacter_idsInputSchema: z.ZodType<Prisma.LanguageCreatecharacter_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const CharacterUncheckedCreateNestedManyWithoutLanguagesInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateNestedManyWithoutLanguagesInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutLanguagesInputSchema),z.lazy(() => CharacterCreateWithoutLanguagesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutLanguagesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutLanguagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutLanguagesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutLanguagesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LanguageUpdatetypical_speakersInputSchema: z.ZodType<Prisma.LanguageUpdatetypical_speakersInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdateManyWithoutLanguagesNestedInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithoutLanguagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutLanguagesInputSchema),z.lazy(() => CharacterCreateWithoutLanguagesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutLanguagesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutLanguagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutLanguagesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutLanguagesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutLanguagesInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutLanguagesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutLanguagesInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutLanguagesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutLanguagesInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutLanguagesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LanguageUpdatecharacter_idsInputSchema: z.ZodType<Prisma.LanguageUpdatecharacter_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CharacterUncheckedUpdateManyWithoutLanguagesNestedInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutLanguagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutLanguagesInputSchema),z.lazy(() => CharacterCreateWithoutLanguagesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutLanguagesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutLanguagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutLanguagesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutLanguagesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutLanguagesInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutLanguagesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutLanguagesInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutLanguagesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutLanguagesInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutLanguagesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProficiencyCreaterace_idsInputSchema: z.ZodType<Prisma.ProficiencyCreaterace_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const ClassCreateNestedManyWithoutProficienciesInputSchema: z.ZodType<Prisma.ClassCreateNestedManyWithoutProficienciesInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutProficienciesInputSchema),z.lazy(() => ClassCreateWithoutProficienciesInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutProficienciesInputSchema),z.lazy(() => ClassUncheckedCreateWithoutProficienciesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutProficienciesInputSchema),z.lazy(() => ClassCreateOrConnectWithoutProficienciesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CharacterCreateNestedManyWithoutProficienciesInputSchema: z.ZodType<Prisma.CharacterCreateNestedManyWithoutProficienciesInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutProficienciesInputSchema),z.lazy(() => CharacterCreateWithoutProficienciesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutProficienciesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutProficienciesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutProficienciesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutProficienciesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProficiencyCreateclass_idsInputSchema: z.ZodType<Prisma.ProficiencyCreateclass_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const ProficiencyCreatecharacter_idsInputSchema: z.ZodType<Prisma.ProficiencyCreatecharacter_idsInput> = z.object({
  set: z.string().array()
}).strict();

export const ClassUncheckedCreateNestedManyWithoutProficienciesInputSchema: z.ZodType<Prisma.ClassUncheckedCreateNestedManyWithoutProficienciesInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutProficienciesInputSchema),z.lazy(() => ClassCreateWithoutProficienciesInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutProficienciesInputSchema),z.lazy(() => ClassUncheckedCreateWithoutProficienciesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutProficienciesInputSchema),z.lazy(() => ClassCreateOrConnectWithoutProficienciesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CharacterUncheckedCreateNestedManyWithoutProficienciesInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateNestedManyWithoutProficienciesInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutProficienciesInputSchema),z.lazy(() => CharacterCreateWithoutProficienciesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutProficienciesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutProficienciesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutProficienciesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutProficienciesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProficiencyUpdaterace_idsInputSchema: z.ZodType<Prisma.ProficiencyUpdaterace_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ClassUpdateManyWithoutProficienciesNestedInputSchema: z.ZodType<Prisma.ClassUpdateManyWithoutProficienciesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutProficienciesInputSchema),z.lazy(() => ClassCreateWithoutProficienciesInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutProficienciesInputSchema),z.lazy(() => ClassUncheckedCreateWithoutProficienciesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutProficienciesInputSchema),z.lazy(() => ClassCreateOrConnectWithoutProficienciesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ClassUpsertWithWhereUniqueWithoutProficienciesInputSchema),z.lazy(() => ClassUpsertWithWhereUniqueWithoutProficienciesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ClassUpdateWithWhereUniqueWithoutProficienciesInputSchema),z.lazy(() => ClassUpdateWithWhereUniqueWithoutProficienciesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ClassUpdateManyWithWhereWithoutProficienciesInputSchema),z.lazy(() => ClassUpdateManyWithWhereWithoutProficienciesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ClassScalarWhereInputSchema),z.lazy(() => ClassScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CharacterUpdateManyWithoutProficienciesNestedInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithoutProficienciesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutProficienciesInputSchema),z.lazy(() => CharacterCreateWithoutProficienciesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutProficienciesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutProficienciesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutProficienciesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutProficienciesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutProficienciesInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutProficienciesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutProficienciesInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutProficienciesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutProficienciesInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutProficienciesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProficiencyUpdateclass_idsInputSchema: z.ZodType<Prisma.ProficiencyUpdateclass_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ProficiencyUpdatecharacter_idsInputSchema: z.ZodType<Prisma.ProficiencyUpdatecharacter_idsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ClassUncheckedUpdateManyWithoutProficienciesNestedInputSchema: z.ZodType<Prisma.ClassUncheckedUpdateManyWithoutProficienciesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ClassCreateWithoutProficienciesInputSchema),z.lazy(() => ClassCreateWithoutProficienciesInputSchema).array(),z.lazy(() => ClassUncheckedCreateWithoutProficienciesInputSchema),z.lazy(() => ClassUncheckedCreateWithoutProficienciesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ClassCreateOrConnectWithoutProficienciesInputSchema),z.lazy(() => ClassCreateOrConnectWithoutProficienciesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ClassUpsertWithWhereUniqueWithoutProficienciesInputSchema),z.lazy(() => ClassUpsertWithWhereUniqueWithoutProficienciesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ClassWhereUniqueInputSchema),z.lazy(() => ClassWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ClassUpdateWithWhereUniqueWithoutProficienciesInputSchema),z.lazy(() => ClassUpdateWithWhereUniqueWithoutProficienciesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ClassUpdateManyWithWhereWithoutProficienciesInputSchema),z.lazy(() => ClassUpdateManyWithWhereWithoutProficienciesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ClassScalarWhereInputSchema),z.lazy(() => ClassScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CharacterUncheckedUpdateManyWithoutProficienciesNestedInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutProficienciesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CharacterCreateWithoutProficienciesInputSchema),z.lazy(() => CharacterCreateWithoutProficienciesInputSchema).array(),z.lazy(() => CharacterUncheckedCreateWithoutProficienciesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutProficienciesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CharacterCreateOrConnectWithoutProficienciesInputSchema),z.lazy(() => CharacterCreateOrConnectWithoutProficienciesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CharacterUpsertWithWhereUniqueWithoutProficienciesInputSchema),z.lazy(() => CharacterUpsertWithWhereUniqueWithoutProficienciesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CharacterWhereUniqueInputSchema),z.lazy(() => CharacterWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CharacterUpdateWithWhereUniqueWithoutProficienciesInputSchema),z.lazy(() => CharacterUpdateWithWhereUniqueWithoutProficienciesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CharacterUpdateManyWithWhereWithoutProficienciesInputSchema),z.lazy(() => CharacterUpdateManyWithWhereWithoutProficienciesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumRoleFilterSchema: z.ZodType<Prisma.NestedEnumRoleFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumRoleWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RoleSchema).optional(),
  in: z.lazy(() => RoleSchema).array().optional(),
  notIn: z.lazy(() => RoleSchema).array().optional(),
  not: z.union([ z.lazy(() => RoleSchema),z.lazy(() => NestedEnumRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRoleFilterSchema).optional()
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedBigIntFilterSchema: z.ZodType<Prisma.NestedBigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const NestedBigIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const AreaOfEffectWhereInputSchema: z.ZodType<Prisma.AreaOfEffectWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AreaOfEffectWhereInputSchema),z.lazy(() => AreaOfEffectWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AreaOfEffectWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AreaOfEffectWhereInputSchema),z.lazy(() => AreaOfEffectWhereInputSchema).array() ]).optional(),
  size: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  type: z.union([ z.lazy(() => EnumAOETypeFilterSchema),z.lazy(() => AOETypeSchema) ]).optional(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const DifficultyClassWhereInputSchema: z.ZodType<Prisma.DifficultyClassWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DifficultyClassWhereInputSchema),z.lazy(() => DifficultyClassWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DifficultyClassWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DifficultyClassWhereInputSchema),z.lazy(() => DifficultyClassWhereInputSchema).array() ]).optional(),
  dc_success: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dc_type: z.union([ z.lazy(() => APIReferenceCompositeFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const APIReferenceWhereInputSchema: z.ZodType<Prisma.APIReferenceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => APIReferenceWhereInputSchema),z.lazy(() => APIReferenceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => APIReferenceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => APIReferenceWhereInputSchema),z.lazy(() => APIReferenceWhereInputSchema).array() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional().nullable(),
  not: InputJsonValueSchema.optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const MulticlassingWhereInputSchema: z.ZodType<Prisma.MulticlassingWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MulticlassingWhereInputSchema),z.lazy(() => MulticlassingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MulticlassingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MulticlassingWhereInputSchema),z.lazy(() => MulticlassingWhereInputSchema).array() ]).optional(),
  prerequisites: z.union([ z.lazy(() => PrerequisiteCompositeListFilterSchema),z.lazy(() => PrerequisiteObjectEqualityInputSchema).array() ]).optional(),
  prerequisite_options: z.lazy(() => JsonNullableFilterSchema).optional(),
  proficiencies: z.union([ z.lazy(() => APIReferenceCompositeListFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceCompositeListFilterSchema),z.lazy(() => ChoiceObjectEqualityInputSchema).array() ]).optional(),
}).strict();

export const PrerequisiteObjectEqualityInputSchema: z.ZodType<Prisma.PrerequisiteObjectEqualityInput> = z.object({
  ability_score: z.lazy(() => APIReferenceObjectEqualityInputSchema).optional().nullable(),
  minimum_score: z.number().optional().nullable()
}).strict();

export const StartingEquipmentWhereInputSchema: z.ZodType<Prisma.StartingEquipmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => StartingEquipmentWhereInputSchema),z.lazy(() => StartingEquipmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StartingEquipmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StartingEquipmentWhereInputSchema),z.lazy(() => StartingEquipmentWhereInputSchema).array() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  equipment: z.union([ z.lazy(() => APIReferenceCompositeFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema) ]).optional(),
}).strict();

export const ChoiceWhereInputSchema: z.ZodType<Prisma.ChoiceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChoiceWhereInputSchema),z.lazy(() => ChoiceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChoiceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChoiceWhereInputSchema),z.lazy(() => ChoiceWhereInputSchema).array() ]).optional(),
  desc: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  choose: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  from: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict();

export const PrerequisiteOrderByCompositeAggregateInputSchema: z.ZodType<Prisma.PrerequisiteOrderByCompositeAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AbilityBonusWhereInputSchema: z.ZodType<Prisma.AbilityBonusWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AbilityBonusWhereInputSchema),z.lazy(() => AbilityBonusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AbilityBonusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AbilityBonusWhereInputSchema),z.lazy(() => AbilityBonusWhereInputSchema).array() ]).optional(),
  bonus: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceCompositeFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema) ]).optional(),
}).strict();

export const CharacterAbilityScoreWhereInputSchema: z.ZodType<Prisma.CharacterAbilityScoreWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CharacterAbilityScoreWhereInputSchema),z.lazy(() => CharacterAbilityScoreWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CharacterAbilityScoreWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CharacterAbilityScoreWhereInputSchema),z.lazy(() => CharacterAbilityScoreWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const DeathSaveWhereInputSchema: z.ZodType<Prisma.DeathSaveWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DeathSaveWhereInputSchema),z.lazy(() => DeathSaveWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DeathSaveWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DeathSaveWhereInputSchema),z.lazy(() => DeathSaveWhereInputSchema).array() ]).optional(),
  successes: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  failures: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const CoinTypeWhereInputSchema: z.ZodType<Prisma.CoinTypeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CoinTypeWhereInputSchema),z.lazy(() => CoinTypeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CoinTypeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CoinTypeWhereInputSchema),z.lazy(() => CoinTypeWhereInputSchema).array() ]).optional(),
  copper_pieces: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  silver_pieces: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  electrum_pieces: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  gold_pieces: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  platinum_pieces: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const KeyCreateWithoutUserInputSchema: z.ZodType<Prisma.KeyCreateWithoutUserInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable()
}).strict();

export const KeyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable()
}).strict();

export const KeyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.KeyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => KeyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const KeyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.KeyCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => KeyCreateManyUserInputSchema),z.lazy(() => KeyCreateManyUserInputSchema).array() ]),
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
}).strict();

export const SpellbookCreateWithoutAuth_userInputSchema: z.ZodType<Prisma.SpellbookCreateWithoutAuth_userInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  character: z.lazy(() => CharacterCreateNestedOneWithoutSpellbooksInputSchema).optional(),
  spells: z.lazy(() => SpellCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  classes: z.lazy(() => ClassCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  races: z.lazy(() => RaceCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookUncheckedCreateWithoutAuth_userInputSchema: z.ZodType<Prisma.SpellbookUncheckedCreateWithoutAuth_userInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  character_id: z.string().optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookCreatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookCreaterace_idsInputSchema),z.string().array() ]).optional(),
  spells: z.lazy(() => SpellUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookCreateOrConnectWithoutAuth_userInputSchema: z.ZodType<Prisma.SpellbookCreateOrConnectWithoutAuth_userInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpellbookCreateWithoutAuth_userInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutAuth_userInputSchema) ]),
}).strict();

export const SpellbookCreateManyAuth_userInputEnvelopeSchema: z.ZodType<Prisma.SpellbookCreateManyAuth_userInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SpellbookCreateManyAuth_userInputSchema),z.lazy(() => SpellbookCreateManyAuth_userInputSchema).array() ]),
}).strict();

export const CharacterCreateWithoutAuth_userInputSchema: z.ZodType<Prisma.CharacterCreateWithoutAuth_userInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyCreateNestedManyWithoutCharactersInputSchema).optional(),
  classes: z.lazy(() => ClassCreateNestedManyWithoutCharactersInputSchema).optional(),
  race: z.lazy(() => RaceCreateNestedOneWithoutCharactersInputSchema)
}).strict();

export const CharacterUncheckedCreateWithoutAuth_userInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateWithoutAuth_userInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.string(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutCharactersInputSchema).optional()
}).strict();

export const CharacterCreateOrConnectWithoutAuth_userInputSchema: z.ZodType<Prisma.CharacterCreateOrConnectWithoutAuth_userInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CharacterCreateWithoutAuth_userInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutAuth_userInputSchema) ]),
}).strict();

export const CharacterCreateManyAuth_userInputEnvelopeSchema: z.ZodType<Prisma.CharacterCreateManyAuth_userInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CharacterCreateManyAuth_userInputSchema),z.lazy(() => CharacterCreateManyAuth_userInputSchema).array() ]),
}).strict();

export const FriendsCreateWithoutFriendsInputSchema: z.ZodType<Prisma.FriendsCreateWithoutFriendsInput> = z.object({
  user_id: z.string()
}).strict();

export const FriendsUncheckedCreateWithoutFriendsInputSchema: z.ZodType<Prisma.FriendsUncheckedCreateWithoutFriendsInput> = z.object({
  user_id: z.string(),
  friend_ids: z.union([ z.lazy(() => FriendsCreatefriend_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const FriendsCreateOrConnectWithoutFriendsInputSchema: z.ZodType<Prisma.FriendsCreateOrConnectWithoutFriendsInput> = z.object({
  where: z.lazy(() => FriendsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FriendsCreateWithoutFriendsInputSchema),z.lazy(() => FriendsUncheckedCreateWithoutFriendsInputSchema) ]),
}).strict();

export const RequestedFriendsCreateWithoutRequested_friendsInputSchema: z.ZodType<Prisma.RequestedFriendsCreateWithoutRequested_friendsInput> = z.object({
  user_id: z.string()
}).strict();

export const RequestedFriendsUncheckedCreateWithoutRequested_friendsInputSchema: z.ZodType<Prisma.RequestedFriendsUncheckedCreateWithoutRequested_friendsInput> = z.object({
  user_id: z.string(),
  requested_friend_ids: z.union([ z.lazy(() => RequestedFriendsCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const RequestedFriendsCreateOrConnectWithoutRequested_friendsInputSchema: z.ZodType<Prisma.RequestedFriendsCreateOrConnectWithoutRequested_friendsInput> = z.object({
  where: z.lazy(() => RequestedFriendsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RequestedFriendsCreateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUncheckedCreateWithoutRequested_friendsInputSchema) ]),
}).strict();

export const SentRequestsCreateWithoutSent_requestsInputSchema: z.ZodType<Prisma.SentRequestsCreateWithoutSent_requestsInput> = z.object({
  user_id: z.string()
}).strict();

export const SentRequestsUncheckedCreateWithoutSent_requestsInputSchema: z.ZodType<Prisma.SentRequestsUncheckedCreateWithoutSent_requestsInput> = z.object({
  user_id: z.string(),
  sent_request_ids: z.union([ z.lazy(() => SentRequestsCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SentRequestsCreateOrConnectWithoutSent_requestsInputSchema: z.ZodType<Prisma.SentRequestsCreateOrConnectWithoutSent_requestsInput> = z.object({
  where: z.lazy(() => SentRequestsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SentRequestsCreateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUncheckedCreateWithoutSent_requestsInputSchema) ]),
}).strict();

export const CampaignCreateWithoutOwner_userInputSchema: z.ZodType<Prisma.CampaignCreateWithoutOwner_userInput> = z.object({
  id: z.string().optional(),
  campaign_name: z.string(),
  capaign_description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserCreateNestedManyWithoutJoined_campaignsInputSchema).optional(),
  requested_users: z.lazy(() => UserCreateNestedManyWithoutRequested_campaignsInputSchema).optional()
}).strict();

export const CampaignUncheckedCreateWithoutOwner_userInputSchema: z.ZodType<Prisma.CampaignUncheckedCreateWithoutOwner_userInput> = z.object({
  id: z.string().optional(),
  campaign_name: z.string(),
  capaign_description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_ids: z.union([ z.lazy(() => CampaignCreateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignCreaterequested_user_idsInputSchema),z.string().array() ]).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutJoined_campaignsInputSchema).optional(),
  requested_users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRequested_campaignsInputSchema).optional()
}).strict();

export const CampaignCreateOrConnectWithoutOwner_userInputSchema: z.ZodType<Prisma.CampaignCreateOrConnectWithoutOwner_userInput> = z.object({
  where: z.lazy(() => CampaignWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CampaignCreateWithoutOwner_userInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutOwner_userInputSchema) ]),
}).strict();

export const CampaignCreateManyOwner_userInputEnvelopeSchema: z.ZodType<Prisma.CampaignCreateManyOwner_userInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CampaignCreateManyOwner_userInputSchema),z.lazy(() => CampaignCreateManyOwner_userInputSchema).array() ]),
}).strict();

export const CampaignCreateWithoutUsersInputSchema: z.ZodType<Prisma.CampaignCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  campaign_name: z.string(),
  capaign_description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  owner_user: z.lazy(() => UserCreateNestedOneWithoutOwned_campaignsInputSchema),
  requested_users: z.lazy(() => UserCreateNestedManyWithoutRequested_campaignsInputSchema).optional()
}).strict();

export const CampaignUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.CampaignUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  campaign_name: z.string(),
  capaign_description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  owner_id: z.string(),
  user_ids: z.union([ z.lazy(() => CampaignCreateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignCreaterequested_user_idsInputSchema),z.string().array() ]).optional(),
  requested_users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRequested_campaignsInputSchema).optional()
}).strict();

export const CampaignCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.CampaignCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => CampaignWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CampaignCreateWithoutUsersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const CampaignCreateWithoutRequested_usersInputSchema: z.ZodType<Prisma.CampaignCreateWithoutRequested_usersInput> = z.object({
  id: z.string().optional(),
  campaign_name: z.string(),
  capaign_description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  owner_user: z.lazy(() => UserCreateNestedOneWithoutOwned_campaignsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutJoined_campaignsInputSchema).optional()
}).strict();

export const CampaignUncheckedCreateWithoutRequested_usersInputSchema: z.ZodType<Prisma.CampaignUncheckedCreateWithoutRequested_usersInput> = z.object({
  id: z.string().optional(),
  campaign_name: z.string(),
  capaign_description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  owner_id: z.string(),
  user_ids: z.union([ z.lazy(() => CampaignCreateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignCreaterequested_user_idsInputSchema),z.string().array() ]).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutJoined_campaignsInputSchema).optional()
}).strict();

export const CampaignCreateOrConnectWithoutRequested_usersInputSchema: z.ZodType<Prisma.CampaignCreateOrConnectWithoutRequested_usersInput> = z.object({
  where: z.lazy(() => CampaignWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CampaignCreateWithoutRequested_usersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutRequested_usersInputSchema) ]),
}).strict();

export const KeyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.KeyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => KeyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => KeyUpdateWithoutUserInputSchema),z.lazy(() => KeyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => KeyCreateWithoutUserInputSchema),z.lazy(() => KeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const KeyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.KeyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => KeyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => KeyUpdateWithoutUserInputSchema),z.lazy(() => KeyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const KeyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.KeyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => KeyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => KeyUpdateManyMutationInputSchema),z.lazy(() => KeyUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const KeyScalarWhereInputSchema: z.ZodType<Prisma.KeyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => KeyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => KeyScalarWhereInputSchema),z.lazy(() => KeyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  hashed_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  idle_expires: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const SpellbookUpsertWithWhereUniqueWithoutAuth_userInputSchema: z.ZodType<Prisma.SpellbookUpsertWithWhereUniqueWithoutAuth_userInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SpellbookUpdateWithoutAuth_userInputSchema),z.lazy(() => SpellbookUncheckedUpdateWithoutAuth_userInputSchema) ]),
  create: z.union([ z.lazy(() => SpellbookCreateWithoutAuth_userInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutAuth_userInputSchema) ]),
}).strict();

export const SpellbookUpdateWithWhereUniqueWithoutAuth_userInputSchema: z.ZodType<Prisma.SpellbookUpdateWithWhereUniqueWithoutAuth_userInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SpellbookUpdateWithoutAuth_userInputSchema),z.lazy(() => SpellbookUncheckedUpdateWithoutAuth_userInputSchema) ]),
}).strict();

export const SpellbookUpdateManyWithWhereWithoutAuth_userInputSchema: z.ZodType<Prisma.SpellbookUpdateManyWithWhereWithoutAuth_userInput> = z.object({
  where: z.lazy(() => SpellbookScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SpellbookUpdateManyMutationInputSchema),z.lazy(() => SpellbookUncheckedUpdateManyWithoutAuth_userInputSchema) ]),
}).strict();

export const SpellbookScalarWhereInputSchema: z.ZodType<Prisma.SpellbookScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpellbookScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpellbookScalarWhereInputSchema),z.lazy(() => SpellbookScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  spellbook_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  character_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  spellbook_description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  image_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  character_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  spell_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  race_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const CharacterUpsertWithWhereUniqueWithoutAuth_userInputSchema: z.ZodType<Prisma.CharacterUpsertWithWhereUniqueWithoutAuth_userInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CharacterUpdateWithoutAuth_userInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutAuth_userInputSchema) ]),
  create: z.union([ z.lazy(() => CharacterCreateWithoutAuth_userInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutAuth_userInputSchema) ]),
}).strict();

export const CharacterUpdateWithWhereUniqueWithoutAuth_userInputSchema: z.ZodType<Prisma.CharacterUpdateWithWhereUniqueWithoutAuth_userInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateWithoutAuth_userInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutAuth_userInputSchema) ]),
}).strict();

export const CharacterUpdateManyWithWhereWithoutAuth_userInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithWhereWithoutAuth_userInput> = z.object({
  where: z.lazy(() => CharacterScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateManyMutationInputSchema),z.lazy(() => CharacterUncheckedUpdateManyWithoutAuth_userInputSchema) ]),
}).strict();

export const CharacterScalarWhereInputSchema: z.ZodType<Prisma.CharacterScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CharacterScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CharacterScalarWhereInputSchema),z.lazy(() => CharacterScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  character_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  player_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  backstory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  experience: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  next_level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  age: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  Height: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  weight: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  eye_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  hair_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  skin_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  saving_throw_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  skill_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  armor_class: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  language_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  proficiency_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  items: z.lazy(() => StringNullableListFilterSchema).optional(),
  image_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  race_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const FriendsUpsertWithWhereUniqueWithoutFriendsInputSchema: z.ZodType<Prisma.FriendsUpsertWithWhereUniqueWithoutFriendsInput> = z.object({
  where: z.lazy(() => FriendsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FriendsUpdateWithoutFriendsInputSchema),z.lazy(() => FriendsUncheckedUpdateWithoutFriendsInputSchema) ]),
  create: z.union([ z.lazy(() => FriendsCreateWithoutFriendsInputSchema),z.lazy(() => FriendsUncheckedCreateWithoutFriendsInputSchema) ]),
}).strict();

export const FriendsUpdateWithWhereUniqueWithoutFriendsInputSchema: z.ZodType<Prisma.FriendsUpdateWithWhereUniqueWithoutFriendsInput> = z.object({
  where: z.lazy(() => FriendsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FriendsUpdateWithoutFriendsInputSchema),z.lazy(() => FriendsUncheckedUpdateWithoutFriendsInputSchema) ]),
}).strict();

export const FriendsUpdateManyWithWhereWithoutFriendsInputSchema: z.ZodType<Prisma.FriendsUpdateManyWithWhereWithoutFriendsInput> = z.object({
  where: z.lazy(() => FriendsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FriendsUpdateManyMutationInputSchema),z.lazy(() => FriendsUncheckedUpdateManyWithoutFriendsInputSchema) ]),
}).strict();

export const FriendsScalarWhereInputSchema: z.ZodType<Prisma.FriendsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FriendsScalarWhereInputSchema),z.lazy(() => FriendsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FriendsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FriendsScalarWhereInputSchema),z.lazy(() => FriendsScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  friend_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const RequestedFriendsUpsertWithWhereUniqueWithoutRequested_friendsInputSchema: z.ZodType<Prisma.RequestedFriendsUpsertWithWhereUniqueWithoutRequested_friendsInput> = z.object({
  where: z.lazy(() => RequestedFriendsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RequestedFriendsUpdateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUncheckedUpdateWithoutRequested_friendsInputSchema) ]),
  create: z.union([ z.lazy(() => RequestedFriendsCreateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUncheckedCreateWithoutRequested_friendsInputSchema) ]),
}).strict();

export const RequestedFriendsUpdateWithWhereUniqueWithoutRequested_friendsInputSchema: z.ZodType<Prisma.RequestedFriendsUpdateWithWhereUniqueWithoutRequested_friendsInput> = z.object({
  where: z.lazy(() => RequestedFriendsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RequestedFriendsUpdateWithoutRequested_friendsInputSchema),z.lazy(() => RequestedFriendsUncheckedUpdateWithoutRequested_friendsInputSchema) ]),
}).strict();

export const RequestedFriendsUpdateManyWithWhereWithoutRequested_friendsInputSchema: z.ZodType<Prisma.RequestedFriendsUpdateManyWithWhereWithoutRequested_friendsInput> = z.object({
  where: z.lazy(() => RequestedFriendsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RequestedFriendsUpdateManyMutationInputSchema),z.lazy(() => RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsInputSchema) ]),
}).strict();

export const RequestedFriendsScalarWhereInputSchema: z.ZodType<Prisma.RequestedFriendsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RequestedFriendsScalarWhereInputSchema),z.lazy(() => RequestedFriendsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RequestedFriendsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RequestedFriendsScalarWhereInputSchema),z.lazy(() => RequestedFriendsScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requested_friend_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const SentRequestsUpsertWithWhereUniqueWithoutSent_requestsInputSchema: z.ZodType<Prisma.SentRequestsUpsertWithWhereUniqueWithoutSent_requestsInput> = z.object({
  where: z.lazy(() => SentRequestsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SentRequestsUpdateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUncheckedUpdateWithoutSent_requestsInputSchema) ]),
  create: z.union([ z.lazy(() => SentRequestsCreateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUncheckedCreateWithoutSent_requestsInputSchema) ]),
}).strict();

export const SentRequestsUpdateWithWhereUniqueWithoutSent_requestsInputSchema: z.ZodType<Prisma.SentRequestsUpdateWithWhereUniqueWithoutSent_requestsInput> = z.object({
  where: z.lazy(() => SentRequestsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SentRequestsUpdateWithoutSent_requestsInputSchema),z.lazy(() => SentRequestsUncheckedUpdateWithoutSent_requestsInputSchema) ]),
}).strict();

export const SentRequestsUpdateManyWithWhereWithoutSent_requestsInputSchema: z.ZodType<Prisma.SentRequestsUpdateManyWithWhereWithoutSent_requestsInput> = z.object({
  where: z.lazy(() => SentRequestsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SentRequestsUpdateManyMutationInputSchema),z.lazy(() => SentRequestsUncheckedUpdateManyWithoutSent_requestsInputSchema) ]),
}).strict();

export const SentRequestsScalarWhereInputSchema: z.ZodType<Prisma.SentRequestsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SentRequestsScalarWhereInputSchema),z.lazy(() => SentRequestsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SentRequestsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SentRequestsScalarWhereInputSchema),z.lazy(() => SentRequestsScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sent_request_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const CampaignUpsertWithWhereUniqueWithoutOwner_userInputSchema: z.ZodType<Prisma.CampaignUpsertWithWhereUniqueWithoutOwner_userInput> = z.object({
  where: z.lazy(() => CampaignWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CampaignUpdateWithoutOwner_userInputSchema),z.lazy(() => CampaignUncheckedUpdateWithoutOwner_userInputSchema) ]),
  create: z.union([ z.lazy(() => CampaignCreateWithoutOwner_userInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutOwner_userInputSchema) ]),
}).strict();

export const CampaignUpdateWithWhereUniqueWithoutOwner_userInputSchema: z.ZodType<Prisma.CampaignUpdateWithWhereUniqueWithoutOwner_userInput> = z.object({
  where: z.lazy(() => CampaignWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CampaignUpdateWithoutOwner_userInputSchema),z.lazy(() => CampaignUncheckedUpdateWithoutOwner_userInputSchema) ]),
}).strict();

export const CampaignUpdateManyWithWhereWithoutOwner_userInputSchema: z.ZodType<Prisma.CampaignUpdateManyWithWhereWithoutOwner_userInput> = z.object({
  where: z.lazy(() => CampaignScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CampaignUpdateManyMutationInputSchema),z.lazy(() => CampaignUncheckedUpdateManyWithoutOwner_userInputSchema) ]),
}).strict();

export const CampaignScalarWhereInputSchema: z.ZodType<Prisma.CampaignScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CampaignScalarWhereInputSchema),z.lazy(() => CampaignScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CampaignScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CampaignScalarWhereInputSchema),z.lazy(() => CampaignScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  campaign_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  capaign_description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  owner_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_user_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const CampaignUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.CampaignUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => CampaignWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CampaignUpdateWithoutUsersInputSchema),z.lazy(() => CampaignUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => CampaignCreateWithoutUsersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const CampaignUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.CampaignUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => CampaignWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CampaignUpdateWithoutUsersInputSchema),z.lazy(() => CampaignUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const CampaignUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.CampaignUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => CampaignScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CampaignUpdateManyMutationInputSchema),z.lazy(() => CampaignUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const CampaignUpsertWithWhereUniqueWithoutRequested_usersInputSchema: z.ZodType<Prisma.CampaignUpsertWithWhereUniqueWithoutRequested_usersInput> = z.object({
  where: z.lazy(() => CampaignWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CampaignUpdateWithoutRequested_usersInputSchema),z.lazy(() => CampaignUncheckedUpdateWithoutRequested_usersInputSchema) ]),
  create: z.union([ z.lazy(() => CampaignCreateWithoutRequested_usersInputSchema),z.lazy(() => CampaignUncheckedCreateWithoutRequested_usersInputSchema) ]),
}).strict();

export const CampaignUpdateWithWhereUniqueWithoutRequested_usersInputSchema: z.ZodType<Prisma.CampaignUpdateWithWhereUniqueWithoutRequested_usersInput> = z.object({
  where: z.lazy(() => CampaignWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CampaignUpdateWithoutRequested_usersInputSchema),z.lazy(() => CampaignUncheckedUpdateWithoutRequested_usersInputSchema) ]),
}).strict();

export const CampaignUpdateManyWithWhereWithoutRequested_usersInputSchema: z.ZodType<Prisma.CampaignUpdateManyWithWhereWithoutRequested_usersInput> = z.object({
  where: z.lazy(() => CampaignScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CampaignUpdateManyMutationInputSchema),z.lazy(() => CampaignUncheckedUpdateManyWithoutRequested_usersInputSchema) ]),
}).strict();

export const UserCreateWithoutFriendsInputSchema: z.ZodType<Prisma.UserCreateWithoutFriendsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutAuth_userInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFriendsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFriendsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFriendsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFriendsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFriendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutFriendsInputSchema) ]),
}).strict();

export const UserUpsertWithWhereUniqueWithoutFriendsInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutFriendsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutFriendsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFriendsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFriendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutFriendsInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutFriendsInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutFriendsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutFriendsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFriendsInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutFriendsInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutFriendsInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutFriendsInputSchema) ]),
}).strict();

export const UserScalarWhereInputSchema: z.ZodType<Prisma.UserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  username: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  discordUsername: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => EnumRoleFilterSchema),z.lazy(() => RoleSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  biography: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profile_pic_url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_friend_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  sent_request_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  joined_campaign_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  requested_campaign_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const UserCreateWithoutRequested_friendsInputSchema: z.ZodType<Prisma.UserCreateWithoutRequested_friendsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsCreateNestedManyWithoutFriendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutRequested_friendsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutRequested_friendsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedCreateNestedManyWithoutFriendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutRequested_friendsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutRequested_friendsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_friendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_friendsInputSchema) ]),
}).strict();

export const UserUpsertWithWhereUniqueWithoutRequested_friendsInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutRequested_friendsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutRequested_friendsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRequested_friendsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_friendsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_friendsInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutRequested_friendsInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutRequested_friendsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutRequested_friendsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRequested_friendsInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutRequested_friendsInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutRequested_friendsInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutRequested_friendsInputSchema) ]),
}).strict();

export const UserCreateWithoutSent_requestsInputSchema: z.ZodType<Prisma.UserCreateWithoutSent_requestsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSent_requestsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSent_requestsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSent_requestsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSent_requestsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSent_requestsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSent_requestsInputSchema) ]),
}).strict();

export const UserUpsertWithWhereUniqueWithoutSent_requestsInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutSent_requestsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutSent_requestsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSent_requestsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSent_requestsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSent_requestsInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutSent_requestsInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutSent_requestsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutSent_requestsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSent_requestsInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutSent_requestsInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutSent_requestsInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutSent_requestsInputSchema) ]),
}).strict();

export const UserCreateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserCreateWithoutAuth_sessionInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAuth_sessionInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAuth_sessionInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]),
}).strict();

export const UserUpsertWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUpsertWithoutAuth_sessionInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_sessionInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_sessionInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAuth_sessionInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAuth_sessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_sessionInputSchema) ]),
}).strict();

export const UserUpdateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUpdateWithoutAuth_sessionInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAuth_sessionInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAuth_sessionInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserCreateWithoutAuth_keyInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAuth_keyInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAuth_keyInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]),
}).strict();

export const UserUpsertWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUpsertWithoutAuth_keyInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_keyInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuth_keyInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAuth_keyInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAuth_keyInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuth_keyInputSchema) ]),
}).strict();

export const UserUpdateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUpdateWithoutAuth_keyInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAuth_keyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAuth_keyInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutSpellbooksInputSchema: z.ZodType<Prisma.UserCreateWithoutSpellbooksInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSpellbooksInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSpellbooksInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSpellbooksInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSpellbooksInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpellbooksInputSchema) ]),
}).strict();

export const CharacterCreateWithoutSpellbooksInputSchema: z.ZodType<Prisma.CharacterCreateWithoutSpellbooksInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  saving_throws: z.lazy(() => AbilityScoreCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyCreateNestedManyWithoutCharactersInputSchema).optional(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutCharactersInputSchema),
  classes: z.lazy(() => ClassCreateNestedManyWithoutCharactersInputSchema).optional(),
  race: z.lazy(() => RaceCreateNestedOneWithoutCharactersInputSchema)
}).strict();

export const CharacterUncheckedCreateWithoutSpellbooksInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateWithoutSpellbooksInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.string(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutCharactersInputSchema).optional()
}).strict();

export const CharacterCreateOrConnectWithoutSpellbooksInputSchema: z.ZodType<Prisma.CharacterCreateOrConnectWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CharacterCreateWithoutSpellbooksInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSpellbooksInputSchema) ]),
}).strict();

export const SpellCreateWithoutSpellbooksInputSchema: z.ZodType<Prisma.SpellCreateWithoutSpellbooksInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.union([ z.lazy(() => SpellCreatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellCreatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.string(),
  components: z.union([ z.lazy(() => SpellCreatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.string().optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableCreateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.boolean(),
  duration: z.string(),
  concentration: z.boolean(),
  casting_time: z.string(),
  level: z.number().int(),
  attack_type: z.string().optional().nullable(),
  damage: InputJsonValueSchema.optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableCreateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  classes: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
}).strict();

export const SpellUncheckedCreateWithoutSpellbooksInputSchema: z.ZodType<Prisma.SpellUncheckedCreateWithoutSpellbooksInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.union([ z.lazy(() => SpellCreatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellCreatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.string(),
  components: z.union([ z.lazy(() => SpellCreatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.string().optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableCreateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.boolean(),
  duration: z.string(),
  concentration: z.boolean(),
  casting_time: z.string(),
  level: z.number().int(),
  attack_type: z.string().optional().nullable(),
  damage: InputJsonValueSchema.optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableCreateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  classes: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => SpellCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SpellCreateOrConnectWithoutSpellbooksInputSchema: z.ZodType<Prisma.SpellCreateOrConnectWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => SpellWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpellCreateWithoutSpellbooksInputSchema),z.lazy(() => SpellUncheckedCreateWithoutSpellbooksInputSchema) ]),
}).strict();

export const ClassCreateWithoutSpellbooksInputSchema: z.ZodType<Prisma.ClassCreateWithoutSpellbooksInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  hit_die: z.number().int(),
  class_levels: z.string(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableCreateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.string().optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListCreateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyCreateNestedManyWithoutClassesInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutClassesInputSchema).optional()
}).strict();

export const ClassUncheckedCreateWithoutSpellbooksInputSchema: z.ZodType<Prisma.ClassUncheckedCreateWithoutSpellbooksInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  hit_die: z.number().int(),
  class_levels: z.string(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableCreateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.string().optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListCreateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedCreateNestedManyWithoutClassesInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutClassesInputSchema).optional()
}).strict();

export const ClassCreateOrConnectWithoutSpellbooksInputSchema: z.ZodType<Prisma.ClassCreateOrConnectWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => ClassWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ClassCreateWithoutSpellbooksInputSchema),z.lazy(() => ClassUncheckedCreateWithoutSpellbooksInputSchema) ]),
}).strict();

export const RaceCreateWithoutSpellbooksInputSchema: z.ZodType<Prisma.RaceCreateWithoutSpellbooksInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  speed: z.number().int(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListCreateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.string(),
  age: z.string(),
  size: z.string(),
  size_description: z.string(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.string(),
  traits: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutSpellbooksInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutSpellbooksInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  speed: z.number().int(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListCreateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.string(),
  age: z.string(),
  size: z.string(),
  size_description: z.string(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.string(),
  traits: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => RaceCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutRaceInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutSpellbooksInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutSpellbooksInputSchema),z.lazy(() => RaceUncheckedCreateWithoutSpellbooksInputSchema) ]),
}).strict();

export const UserUpsertWithoutSpellbooksInputSchema: z.ZodType<Prisma.UserUpsertWithoutSpellbooksInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSpellbooksInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSpellbooksInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSpellbooksInputSchema),z.lazy(() => UserUncheckedCreateWithoutSpellbooksInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSpellbooksInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSpellbooksInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSpellbooksInputSchema) ]),
}).strict();

export const UserUpdateWithoutSpellbooksInputSchema: z.ZodType<Prisma.UserUpdateWithoutSpellbooksInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSpellbooksInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSpellbooksInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const CharacterUpsertWithoutSpellbooksInputSchema: z.ZodType<Prisma.CharacterUpsertWithoutSpellbooksInput> = z.object({
  update: z.union([ z.lazy(() => CharacterUpdateWithoutSpellbooksInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutSpellbooksInputSchema) ]),
  create: z.union([ z.lazy(() => CharacterCreateWithoutSpellbooksInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSpellbooksInputSchema) ]),
  where: z.lazy(() => CharacterWhereInputSchema).optional()
}).strict();

export const CharacterUpdateToOneWithWhereWithoutSpellbooksInputSchema: z.ZodType<Prisma.CharacterUpdateToOneWithWhereWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => CharacterWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CharacterUpdateWithoutSpellbooksInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutSpellbooksInputSchema) ]),
}).strict();

export const CharacterUpdateWithoutSpellbooksInputSchema: z.ZodType<Prisma.CharacterUpdateWithoutSpellbooksInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  saving_throws: z.lazy(() => AbilityScoreUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUpdateManyWithoutCharactersNestedInputSchema).optional(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutCharactersNestedInputSchema).optional(),
  race: z.lazy(() => RaceUpdateOneRequiredWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateWithoutSpellbooksInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateWithoutSpellbooksInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional()
}).strict();

export const SpellUpsertWithWhereUniqueWithoutSpellbooksInputSchema: z.ZodType<Prisma.SpellUpsertWithWhereUniqueWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => SpellWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SpellUpdateWithoutSpellbooksInputSchema),z.lazy(() => SpellUncheckedUpdateWithoutSpellbooksInputSchema) ]),
  create: z.union([ z.lazy(() => SpellCreateWithoutSpellbooksInputSchema),z.lazy(() => SpellUncheckedCreateWithoutSpellbooksInputSchema) ]),
}).strict();

export const SpellUpdateWithWhereUniqueWithoutSpellbooksInputSchema: z.ZodType<Prisma.SpellUpdateWithWhereUniqueWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => SpellWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SpellUpdateWithoutSpellbooksInputSchema),z.lazy(() => SpellUncheckedUpdateWithoutSpellbooksInputSchema) ]),
}).strict();

export const SpellUpdateManyWithWhereWithoutSpellbooksInputSchema: z.ZodType<Prisma.SpellUpdateManyWithWhereWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => SpellScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SpellUpdateManyMutationInputSchema),z.lazy(() => SpellUncheckedUpdateManyWithoutSpellbooksInputSchema) ]),
}).strict();

export const SpellScalarWhereInputSchema: z.ZodType<Prisma.SpellScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SpellScalarWhereInputSchema),z.lazy(() => SpellScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SpellScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SpellScalarWhereInputSchema),z.lazy(() => SpellScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  higher_level: z.lazy(() => StringNullableListFilterSchema).optional(),
  range: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  components: z.lazy(() => EnumComponentsNullableListFilterSchema).optional(),
  material: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ritual: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  duration: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  concentration: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  casting_time: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  attack_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  damage: z.lazy(() => JsonNullableFilterSchema).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const ClassUpsertWithWhereUniqueWithoutSpellbooksInputSchema: z.ZodType<Prisma.ClassUpsertWithWhereUniqueWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => ClassWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ClassUpdateWithoutSpellbooksInputSchema),z.lazy(() => ClassUncheckedUpdateWithoutSpellbooksInputSchema) ]),
  create: z.union([ z.lazy(() => ClassCreateWithoutSpellbooksInputSchema),z.lazy(() => ClassUncheckedCreateWithoutSpellbooksInputSchema) ]),
}).strict();

export const ClassUpdateWithWhereUniqueWithoutSpellbooksInputSchema: z.ZodType<Prisma.ClassUpdateWithWhereUniqueWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => ClassWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ClassUpdateWithoutSpellbooksInputSchema),z.lazy(() => ClassUncheckedUpdateWithoutSpellbooksInputSchema) ]),
}).strict();

export const ClassUpdateManyWithWhereWithoutSpellbooksInputSchema: z.ZodType<Prisma.ClassUpdateManyWithWhereWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => ClassScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ClassUpdateManyMutationInputSchema),z.lazy(() => ClassUncheckedUpdateManyWithoutSpellbooksInputSchema) ]),
}).strict();

export const ClassScalarWhereInputSchema: z.ZodType<Prisma.ClassScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ClassScalarWhereInputSchema),z.lazy(() => ClassScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ClassScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ClassScalarWhereInputSchema),z.lazy(() => ClassScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  hit_die: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  class_levels: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  spells: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  proficiency_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const RaceUpsertWithWhereUniqueWithoutSpellbooksInputSchema: z.ZodType<Prisma.RaceUpsertWithWhereUniqueWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RaceUpdateWithoutSpellbooksInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutSpellbooksInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutSpellbooksInputSchema),z.lazy(() => RaceUncheckedCreateWithoutSpellbooksInputSchema) ]),
}).strict();

export const RaceUpdateWithWhereUniqueWithoutSpellbooksInputSchema: z.ZodType<Prisma.RaceUpdateWithWhereUniqueWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateWithoutSpellbooksInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutSpellbooksInputSchema) ]),
}).strict();

export const RaceUpdateManyWithWhereWithoutSpellbooksInputSchema: z.ZodType<Prisma.RaceUpdateManyWithWhereWithoutSpellbooksInput> = z.object({
  where: z.lazy(() => RaceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RaceUpdateManyMutationInputSchema),z.lazy(() => RaceUncheckedUpdateManyWithoutSpellbooksInputSchema) ]),
}).strict();

export const RaceScalarWhereInputSchema: z.ZodType<Prisma.RaceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RaceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RaceScalarWhereInputSchema),z.lazy(() => RaceScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  speed: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  alignment: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  age: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  size_description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  language_desc: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  spellbook_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const UserCreateWithoutOwned_campaignsInputSchema: z.ZodType<Prisma.UserCreateWithoutOwned_campaignsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutOwned_campaignsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutOwned_campaignsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutOwned_campaignsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutOwned_campaignsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutOwned_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwned_campaignsInputSchema) ]),
}).strict();

export const UserCreateWithoutJoined_campaignsInputSchema: z.ZodType<Prisma.UserCreateWithoutJoined_campaignsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutOwner_userInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutJoined_campaignsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutJoined_campaignsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutOwner_userInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutJoined_campaignsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutJoined_campaignsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutJoined_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutJoined_campaignsInputSchema) ]),
}).strict();

export const UserCreateWithoutRequested_campaignsInputSchema: z.ZodType<Prisma.UserCreateWithoutRequested_campaignsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutRequested_campaignsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutRequested_campaignsInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutRequested_campaignsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutRequested_campaignsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_campaignsInputSchema) ]),
}).strict();

export const UserUpsertWithoutOwned_campaignsInputSchema: z.ZodType<Prisma.UserUpsertWithoutOwned_campaignsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutOwned_campaignsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwned_campaignsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutOwned_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwned_campaignsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutOwned_campaignsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutOwned_campaignsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutOwned_campaignsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwned_campaignsInputSchema) ]),
}).strict();

export const UserUpdateWithoutOwned_campaignsInputSchema: z.ZodType<Prisma.UserUpdateWithoutOwned_campaignsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutOwned_campaignsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutOwned_campaignsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUpsertWithWhereUniqueWithoutJoined_campaignsInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutJoined_campaignsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutJoined_campaignsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutJoined_campaignsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutJoined_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutJoined_campaignsInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutJoined_campaignsInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutJoined_campaignsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutJoined_campaignsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutJoined_campaignsInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutJoined_campaignsInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutJoined_campaignsInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutJoined_campaignsInputSchema) ]),
}).strict();

export const UserUpsertWithWhereUniqueWithoutRequested_campaignsInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutRequested_campaignsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutRequested_campaignsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRequested_campaignsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutRequested_campaignsInputSchema),z.lazy(() => UserUncheckedCreateWithoutRequested_campaignsInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutRequested_campaignsInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutRequested_campaignsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutRequested_campaignsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRequested_campaignsInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutRequested_campaignsInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutRequested_campaignsInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutRequested_campaignsInputSchema) ]),
}).strict();

export const SpellbookCreateWithoutSpellsInputSchema: z.ZodType<Prisma.SpellbookCreateWithoutSpellsInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutSpellbooksInputSchema),
  character: z.lazy(() => CharacterCreateNestedOneWithoutSpellbooksInputSchema).optional(),
  classes: z.lazy(() => ClassCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  races: z.lazy(() => RaceCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookUncheckedCreateWithoutSpellsInputSchema: z.ZodType<Prisma.SpellbookUncheckedCreateWithoutSpellsInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  character_id: z.string().optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookCreatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookCreaterace_idsInputSchema),z.string().array() ]).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookCreateOrConnectWithoutSpellsInputSchema: z.ZodType<Prisma.SpellbookCreateOrConnectWithoutSpellsInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpellbookCreateWithoutSpellsInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutSpellsInputSchema) ]),
}).strict();

export const AreaOfEffectUpsertInputSchema: z.ZodType<Prisma.AreaOfEffectUpsertInput> = z.object({
  set: z.lazy(() => AreaOfEffectCreateInputSchema).nullable(),
  update: z.lazy(() => AreaOfEffectUpdateInputSchema)
}).strict();

export const DifficultyClassUpsertInputSchema: z.ZodType<Prisma.DifficultyClassUpsertInput> = z.object({
  set: z.lazy(() => DifficultyClassCreateInputSchema).nullable(),
  update: z.lazy(() => DifficultyClassUpdateInputSchema)
}).strict();

export const APIReferenceUpdateInputSchema: z.ZodType<Prisma.APIReferenceUpdateInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const APIReferenceUpdateManyInputSchema: z.ZodType<Prisma.APIReferenceUpdateManyInput> = z.object({
  where: z.lazy(() => APIReferenceWhereInputSchema),
  data: z.lazy(() => APIReferenceUpdateInputSchema)
}).strict();

export const APIReferenceDeleteManyInputSchema: z.ZodType<Prisma.APIReferenceDeleteManyInput> = z.object({
  where: z.lazy(() => APIReferenceWhereInputSchema)
}).strict();

export const SpellbookUpsertWithWhereUniqueWithoutSpellsInputSchema: z.ZodType<Prisma.SpellbookUpsertWithWhereUniqueWithoutSpellsInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SpellbookUpdateWithoutSpellsInputSchema),z.lazy(() => SpellbookUncheckedUpdateWithoutSpellsInputSchema) ]),
  create: z.union([ z.lazy(() => SpellbookCreateWithoutSpellsInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutSpellsInputSchema) ]),
}).strict();

export const SpellbookUpdateWithWhereUniqueWithoutSpellsInputSchema: z.ZodType<Prisma.SpellbookUpdateWithWhereUniqueWithoutSpellsInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SpellbookUpdateWithoutSpellsInputSchema),z.lazy(() => SpellbookUncheckedUpdateWithoutSpellsInputSchema) ]),
}).strict();

export const SpellbookUpdateManyWithWhereWithoutSpellsInputSchema: z.ZodType<Prisma.SpellbookUpdateManyWithWhereWithoutSpellsInput> = z.object({
  where: z.lazy(() => SpellbookScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SpellbookUpdateManyMutationInputSchema),z.lazy(() => SpellbookUncheckedUpdateManyWithoutSpellsInputSchema) ]),
}).strict();

export const PrerequisiteCreateInputSchema: z.ZodType<Prisma.PrerequisiteCreateInput> = z.object({
  ability_score: z.lazy(() => APIReferenceCreateInputSchema).optional().nullable(),
  minimum_score: z.number().optional().nullable()
}).strict();

export const ProficiencyCreateWithoutClassesInputSchema: z.ZodType<Prisma.ProficiencyCreateWithoutClassesInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  race_ids: z.union([ z.lazy(() => ProficiencyCreaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutProficienciesInputSchema).optional()
}).strict();

export const ProficiencyUncheckedCreateWithoutClassesInputSchema: z.ZodType<Prisma.ProficiencyUncheckedCreateWithoutClassesInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  race_ids: z.union([ z.lazy(() => ProficiencyCreaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  class_ids: z.union([ z.lazy(() => ProficiencyCreateclass_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ProficiencyCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutProficienciesInputSchema).optional()
}).strict();

export const ProficiencyCreateOrConnectWithoutClassesInputSchema: z.ZodType<Prisma.ProficiencyCreateOrConnectWithoutClassesInput> = z.object({
  where: z.lazy(() => ProficiencyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutClassesInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutClassesInputSchema) ]),
}).strict();

export const SpellbookCreateWithoutClassesInputSchema: z.ZodType<Prisma.SpellbookCreateWithoutClassesInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutSpellbooksInputSchema),
  character: z.lazy(() => CharacterCreateNestedOneWithoutSpellbooksInputSchema).optional(),
  spells: z.lazy(() => SpellCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  races: z.lazy(() => RaceCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookUncheckedCreateWithoutClassesInputSchema: z.ZodType<Prisma.SpellbookUncheckedCreateWithoutClassesInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  character_id: z.string().optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookCreatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookCreaterace_idsInputSchema),z.string().array() ]).optional(),
  spells: z.lazy(() => SpellUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookCreateOrConnectWithoutClassesInputSchema: z.ZodType<Prisma.SpellbookCreateOrConnectWithoutClassesInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpellbookCreateWithoutClassesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutClassesInputSchema) ]),
}).strict();

export const CharacterCreateWithoutClassesInputSchema: z.ZodType<Prisma.CharacterCreateWithoutClassesInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyCreateNestedManyWithoutCharactersInputSchema).optional(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutCharactersInputSchema),
  race: z.lazy(() => RaceCreateNestedOneWithoutCharactersInputSchema)
}).strict();

export const CharacterUncheckedCreateWithoutClassesInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateWithoutClassesInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.string(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedCreateNestedManyWithoutCharactersInputSchema).optional()
}).strict();

export const CharacterCreateOrConnectWithoutClassesInputSchema: z.ZodType<Prisma.CharacterCreateOrConnectWithoutClassesInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CharacterCreateWithoutClassesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutClassesInputSchema) ]),
}).strict();

export const MulticlassingUpsertInputSchema: z.ZodType<Prisma.MulticlassingUpsertInput> = z.object({
  set: z.lazy(() => MulticlassingCreateInputSchema).nullable(),
  update: z.lazy(() => MulticlassingUpdateInputSchema)
}).strict();

export const StartingEquipmentUpdateManyInputSchema: z.ZodType<Prisma.StartingEquipmentUpdateManyInput> = z.object({
  where: z.lazy(() => StartingEquipmentWhereInputSchema),
  data: z.lazy(() => StartingEquipmentUpdateInputSchema)
}).strict();

export const StartingEquipmentDeleteManyInputSchema: z.ZodType<Prisma.StartingEquipmentDeleteManyInput> = z.object({
  where: z.lazy(() => StartingEquipmentWhereInputSchema)
}).strict();

export const ChoiceUpdateManyInputSchema: z.ZodType<Prisma.ChoiceUpdateManyInput> = z.object({
  where: z.lazy(() => ChoiceWhereInputSchema),
  data: z.lazy(() => ChoiceUpdateInputSchema)
}).strict();

export const ChoiceDeleteManyInputSchema: z.ZodType<Prisma.ChoiceDeleteManyInput> = z.object({
  where: z.lazy(() => ChoiceWhereInputSchema)
}).strict();

export const ProficiencyUpsertWithWhereUniqueWithoutClassesInputSchema: z.ZodType<Prisma.ProficiencyUpsertWithWhereUniqueWithoutClassesInput> = z.object({
  where: z.lazy(() => ProficiencyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProficiencyUpdateWithoutClassesInputSchema),z.lazy(() => ProficiencyUncheckedUpdateWithoutClassesInputSchema) ]),
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutClassesInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutClassesInputSchema) ]),
}).strict();

export const ProficiencyUpdateWithWhereUniqueWithoutClassesInputSchema: z.ZodType<Prisma.ProficiencyUpdateWithWhereUniqueWithoutClassesInput> = z.object({
  where: z.lazy(() => ProficiencyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProficiencyUpdateWithoutClassesInputSchema),z.lazy(() => ProficiencyUncheckedUpdateWithoutClassesInputSchema) ]),
}).strict();

export const ProficiencyUpdateManyWithWhereWithoutClassesInputSchema: z.ZodType<Prisma.ProficiencyUpdateManyWithWhereWithoutClassesInput> = z.object({
  where: z.lazy(() => ProficiencyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProficiencyUpdateManyMutationInputSchema),z.lazy(() => ProficiencyUncheckedUpdateManyWithoutClassesInputSchema) ]),
}).strict();

export const ProficiencyScalarWhereInputSchema: z.ZodType<Prisma.ProficiencyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProficiencyScalarWhereInputSchema),z.lazy(() => ProficiencyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProficiencyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProficiencyScalarWhereInputSchema),z.lazy(() => ProficiencyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  race_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  class_ids: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const SpellbookUpsertWithWhereUniqueWithoutClassesInputSchema: z.ZodType<Prisma.SpellbookUpsertWithWhereUniqueWithoutClassesInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SpellbookUpdateWithoutClassesInputSchema),z.lazy(() => SpellbookUncheckedUpdateWithoutClassesInputSchema) ]),
  create: z.union([ z.lazy(() => SpellbookCreateWithoutClassesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutClassesInputSchema) ]),
}).strict();

export const SpellbookUpdateWithWhereUniqueWithoutClassesInputSchema: z.ZodType<Prisma.SpellbookUpdateWithWhereUniqueWithoutClassesInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SpellbookUpdateWithoutClassesInputSchema),z.lazy(() => SpellbookUncheckedUpdateWithoutClassesInputSchema) ]),
}).strict();

export const SpellbookUpdateManyWithWhereWithoutClassesInputSchema: z.ZodType<Prisma.SpellbookUpdateManyWithWhereWithoutClassesInput> = z.object({
  where: z.lazy(() => SpellbookScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SpellbookUpdateManyMutationInputSchema),z.lazy(() => SpellbookUncheckedUpdateManyWithoutClassesInputSchema) ]),
}).strict();

export const CharacterUpsertWithWhereUniqueWithoutClassesInputSchema: z.ZodType<Prisma.CharacterUpsertWithWhereUniqueWithoutClassesInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CharacterUpdateWithoutClassesInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutClassesInputSchema) ]),
  create: z.union([ z.lazy(() => CharacterCreateWithoutClassesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutClassesInputSchema) ]),
}).strict();

export const CharacterUpdateWithWhereUniqueWithoutClassesInputSchema: z.ZodType<Prisma.CharacterUpdateWithWhereUniqueWithoutClassesInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateWithoutClassesInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutClassesInputSchema) ]),
}).strict();

export const CharacterUpdateManyWithWhereWithoutClassesInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithWhereWithoutClassesInput> = z.object({
  where: z.lazy(() => CharacterScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateManyMutationInputSchema),z.lazy(() => CharacterUncheckedUpdateManyWithoutClassesInputSchema) ]),
}).strict();

export const SpellbookCreateWithoutRacesInputSchema: z.ZodType<Prisma.SpellbookCreateWithoutRacesInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutSpellbooksInputSchema),
  character: z.lazy(() => CharacterCreateNestedOneWithoutSpellbooksInputSchema).optional(),
  spells: z.lazy(() => SpellCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  classes: z.lazy(() => ClassCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookUncheckedCreateWithoutRacesInputSchema: z.ZodType<Prisma.SpellbookUncheckedCreateWithoutRacesInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  character_id: z.string().optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookCreatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookCreaterace_idsInputSchema),z.string().array() ]).optional(),
  spells: z.lazy(() => SpellUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookCreateOrConnectWithoutRacesInputSchema: z.ZodType<Prisma.SpellbookCreateOrConnectWithoutRacesInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpellbookCreateWithoutRacesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutRacesInputSchema) ]),
}).strict();

export const CharacterCreateWithoutRaceInputSchema: z.ZodType<Prisma.CharacterCreateWithoutRaceInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyCreateNestedManyWithoutCharactersInputSchema).optional(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutCharactersInputSchema),
  classes: z.lazy(() => ClassCreateNestedManyWithoutCharactersInputSchema).optional()
}).strict();

export const CharacterUncheckedCreateWithoutRaceInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateWithoutRaceInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutCharactersInputSchema).optional()
}).strict();

export const CharacterCreateOrConnectWithoutRaceInputSchema: z.ZodType<Prisma.CharacterCreateOrConnectWithoutRaceInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CharacterCreateWithoutRaceInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const CharacterCreateManyRaceInputEnvelopeSchema: z.ZodType<Prisma.CharacterCreateManyRaceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CharacterCreateManyRaceInputSchema),z.lazy(() => CharacterCreateManyRaceInputSchema).array() ]),
}).strict();

export const AbilityBonusUpdateManyInputSchema: z.ZodType<Prisma.AbilityBonusUpdateManyInput> = z.object({
  where: z.lazy(() => AbilityBonusWhereInputSchema),
  data: z.lazy(() => AbilityBonusUpdateInputSchema)
}).strict();

export const AbilityBonusDeleteManyInputSchema: z.ZodType<Prisma.AbilityBonusDeleteManyInput> = z.object({
  where: z.lazy(() => AbilityBonusWhereInputSchema)
}).strict();

export const ChoiceUpsertInputSchema: z.ZodType<Prisma.ChoiceUpsertInput> = z.object({
  set: z.lazy(() => ChoiceCreateInputSchema).nullable(),
  update: z.lazy(() => ChoiceUpdateInputSchema)
}).strict();

export const SpellbookUpsertWithWhereUniqueWithoutRacesInputSchema: z.ZodType<Prisma.SpellbookUpsertWithWhereUniqueWithoutRacesInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SpellbookUpdateWithoutRacesInputSchema),z.lazy(() => SpellbookUncheckedUpdateWithoutRacesInputSchema) ]),
  create: z.union([ z.lazy(() => SpellbookCreateWithoutRacesInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutRacesInputSchema) ]),
}).strict();

export const SpellbookUpdateWithWhereUniqueWithoutRacesInputSchema: z.ZodType<Prisma.SpellbookUpdateWithWhereUniqueWithoutRacesInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SpellbookUpdateWithoutRacesInputSchema),z.lazy(() => SpellbookUncheckedUpdateWithoutRacesInputSchema) ]),
}).strict();

export const SpellbookUpdateManyWithWhereWithoutRacesInputSchema: z.ZodType<Prisma.SpellbookUpdateManyWithWhereWithoutRacesInput> = z.object({
  where: z.lazy(() => SpellbookScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SpellbookUpdateManyMutationInputSchema),z.lazy(() => SpellbookUncheckedUpdateManyWithoutRacesInputSchema) ]),
}).strict();

export const CharacterUpsertWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.CharacterUpsertWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CharacterUpdateWithoutRaceInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutRaceInputSchema) ]),
  create: z.union([ z.lazy(() => CharacterCreateWithoutRaceInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutRaceInputSchema) ]),
}).strict();

export const CharacterUpdateWithWhereUniqueWithoutRaceInputSchema: z.ZodType<Prisma.CharacterUpdateWithWhereUniqueWithoutRaceInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateWithoutRaceInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutRaceInputSchema) ]),
}).strict();

export const CharacterUpdateManyWithWhereWithoutRaceInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithWhereWithoutRaceInput> = z.object({
  where: z.lazy(() => CharacterScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateManyMutationInputSchema),z.lazy(() => CharacterUncheckedUpdateManyWithoutRaceInputSchema) ]),
}).strict();

export const SpellbookCreateWithoutCharacterInputSchema: z.ZodType<Prisma.SpellbookCreateWithoutCharacterInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutSpellbooksInputSchema),
  spells: z.lazy(() => SpellCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  classes: z.lazy(() => ClassCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  races: z.lazy(() => RaceCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookUncheckedCreateWithoutCharacterInputSchema: z.ZodType<Prisma.SpellbookUncheckedCreateWithoutCharacterInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  spell_ids: z.union([ z.lazy(() => SpellbookCreatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookCreaterace_idsInputSchema),z.string().array() ]).optional(),
  spells: z.lazy(() => SpellUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional(),
  races: z.lazy(() => RaceUncheckedCreateNestedManyWithoutSpellbooksInputSchema).optional()
}).strict();

export const SpellbookCreateOrConnectWithoutCharacterInputSchema: z.ZodType<Prisma.SpellbookCreateOrConnectWithoutCharacterInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SpellbookCreateWithoutCharacterInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutCharacterInputSchema) ]),
}).strict();

export const SpellbookCreateManyCharacterInputEnvelopeSchema: z.ZodType<Prisma.SpellbookCreateManyCharacterInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SpellbookCreateManyCharacterInputSchema),z.lazy(() => SpellbookCreateManyCharacterInputSchema).array() ]),
}).strict();

export const AbilityScoreCreateWithoutCharacterInputSchema: z.ZodType<Prisma.AbilityScoreCreateWithoutCharacterInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  full_name: z.string(),
  desc: z.union([ z.lazy(() => AbilityScoreCreatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
}).strict();

export const AbilityScoreUncheckedCreateWithoutCharacterInputSchema: z.ZodType<Prisma.AbilityScoreUncheckedCreateWithoutCharacterInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  full_name: z.string(),
  desc: z.union([ z.lazy(() => AbilityScoreCreatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  character_ids: z.union([ z.lazy(() => AbilityScoreCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const AbilityScoreCreateOrConnectWithoutCharacterInputSchema: z.ZodType<Prisma.AbilityScoreCreateOrConnectWithoutCharacterInput> = z.object({
  where: z.lazy(() => AbilityScoreWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AbilityScoreCreateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUncheckedCreateWithoutCharacterInputSchema) ]),
}).strict();

export const SkillCreateWithoutCharactersInputSchema: z.ZodType<Prisma.SkillCreateWithoutCharactersInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.union([ z.lazy(() => SkillCreatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
}).strict();

export const SkillUncheckedCreateWithoutCharactersInputSchema: z.ZodType<Prisma.SkillUncheckedCreateWithoutCharactersInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  desc: z.union([ z.lazy(() => SkillCreatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  character_ids: z.union([ z.lazy(() => SkillCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SkillCreateOrConnectWithoutCharactersInputSchema: z.ZodType<Prisma.SkillCreateOrConnectWithoutCharactersInput> = z.object({
  where: z.lazy(() => SkillWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SkillCreateWithoutCharactersInputSchema),z.lazy(() => SkillUncheckedCreateWithoutCharactersInputSchema) ]),
}).strict();

export const LanguageCreateWithoutCharactersInputSchema: z.ZodType<Prisma.LanguageCreateWithoutCharactersInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  typical_speakers: z.union([ z.lazy(() => LanguageCreatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.string()
}).strict();

export const LanguageUncheckedCreateWithoutCharactersInputSchema: z.ZodType<Prisma.LanguageUncheckedCreateWithoutCharactersInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  typical_speakers: z.union([ z.lazy(() => LanguageCreatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.string(),
  character_ids: z.union([ z.lazy(() => LanguageCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const LanguageCreateOrConnectWithoutCharactersInputSchema: z.ZodType<Prisma.LanguageCreateOrConnectWithoutCharactersInput> = z.object({
  where: z.lazy(() => LanguageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LanguageCreateWithoutCharactersInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutCharactersInputSchema) ]),
}).strict();

export const ProficiencyCreateWithoutCharactersInputSchema: z.ZodType<Prisma.ProficiencyCreateWithoutCharactersInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  race_ids: z.union([ z.lazy(() => ProficiencyCreaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  classes: z.lazy(() => ClassCreateNestedManyWithoutProficienciesInputSchema).optional()
}).strict();

export const ProficiencyUncheckedCreateWithoutCharactersInputSchema: z.ZodType<Prisma.ProficiencyUncheckedCreateWithoutCharactersInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  type: z.string(),
  race_ids: z.union([ z.lazy(() => ProficiencyCreaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]),
  class_ids: z.union([ z.lazy(() => ProficiencyCreateclass_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ProficiencyCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutProficienciesInputSchema).optional()
}).strict();

export const ProficiencyCreateOrConnectWithoutCharactersInputSchema: z.ZodType<Prisma.ProficiencyCreateOrConnectWithoutCharactersInput> = z.object({
  where: z.lazy(() => ProficiencyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutCharactersInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutCharactersInputSchema) ]),
}).strict();

export const UserCreateWithoutCharactersInputSchema: z.ZodType<Prisma.UserCreateWithoutCharactersInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  auth_key: z.lazy(() => KeyCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCharactersInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCharactersInput> = z.object({
  id: z.string(),
  username: z.string(),
  discordUsername: z.string().optional().nullable(),
  role: z.lazy(() => RoleSchema).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  biography: z.string().optional().nullable(),
  profile_pic_url: z.string().optional(),
  friend_ids: z.union([ z.lazy(() => UserCreatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserCreaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserCreatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserCreatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserCreaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutAuth_userInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedCreateNestedManyWithoutFriendsInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedCreateNestedManyWithoutRequested_friendsInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedCreateNestedManyWithoutSent_requestsInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutOwner_userInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedCreateNestedManyWithoutRequested_usersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCharactersInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCharactersInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCharactersInputSchema),z.lazy(() => UserUncheckedCreateWithoutCharactersInputSchema) ]),
}).strict();

export const ClassCreateWithoutCharactersInputSchema: z.ZodType<Prisma.ClassCreateWithoutCharactersInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  hit_die: z.number().int(),
  class_levels: z.string(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableCreateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.string().optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListCreateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyCreateNestedManyWithoutClassesInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutClassesInputSchema).optional()
}).strict();

export const ClassUncheckedCreateWithoutCharactersInputSchema: z.ZodType<Prisma.ClassUncheckedCreateWithoutCharactersInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  hit_die: z.number().int(),
  class_levels: z.string(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableCreateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.string().optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListCreateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedCreateNestedManyWithoutClassesInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutClassesInputSchema).optional()
}).strict();

export const ClassCreateOrConnectWithoutCharactersInputSchema: z.ZodType<Prisma.ClassCreateOrConnectWithoutCharactersInput> = z.object({
  where: z.lazy(() => ClassWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ClassCreateWithoutCharactersInputSchema),z.lazy(() => ClassUncheckedCreateWithoutCharactersInputSchema) ]),
}).strict();

export const RaceCreateWithoutCharactersInputSchema: z.ZodType<Prisma.RaceCreateWithoutCharactersInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  speed: z.number().int(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListCreateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.string(),
  age: z.string(),
  size: z.string(),
  size_description: z.string(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.string(),
  traits: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceUncheckedCreateWithoutCharactersInputSchema: z.ZodType<Prisma.RaceUncheckedCreateWithoutCharactersInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  speed: z.number().int(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListCreateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.string(),
  age: z.string(),
  size: z.string(),
  size_description: z.string(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.string(),
  traits: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => RaceCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutRacesInputSchema).optional()
}).strict();

export const RaceCreateOrConnectWithoutCharactersInputSchema: z.ZodType<Prisma.RaceCreateOrConnectWithoutCharactersInput> = z.object({
  where: z.lazy(() => RaceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RaceCreateWithoutCharactersInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCharactersInputSchema) ]),
}).strict();

export const CharacterAbilityScoreUpdateManyInputSchema: z.ZodType<Prisma.CharacterAbilityScoreUpdateManyInput> = z.object({
  where: z.lazy(() => CharacterAbilityScoreWhereInputSchema),
  data: z.lazy(() => CharacterAbilityScoreUpdateInputSchema)
}).strict();

export const CharacterAbilityScoreDeleteManyInputSchema: z.ZodType<Prisma.CharacterAbilityScoreDeleteManyInput> = z.object({
  where: z.lazy(() => CharacterAbilityScoreWhereInputSchema)
}).strict();

export const DeathSaveUpsertInputSchema: z.ZodType<Prisma.DeathSaveUpsertInput> = z.object({
  set: z.lazy(() => DeathSaveCreateInputSchema).nullable(),
  update: z.lazy(() => DeathSaveUpdateInputSchema)
}).strict();

export const CoinTypeUpsertInputSchema: z.ZodType<Prisma.CoinTypeUpsertInput> = z.object({
  set: z.lazy(() => CoinTypeCreateInputSchema).nullable(),
  update: z.lazy(() => CoinTypeUpdateInputSchema)
}).strict();

export const SpellbookUpsertWithWhereUniqueWithoutCharacterInputSchema: z.ZodType<Prisma.SpellbookUpsertWithWhereUniqueWithoutCharacterInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SpellbookUpdateWithoutCharacterInputSchema),z.lazy(() => SpellbookUncheckedUpdateWithoutCharacterInputSchema) ]),
  create: z.union([ z.lazy(() => SpellbookCreateWithoutCharacterInputSchema),z.lazy(() => SpellbookUncheckedCreateWithoutCharacterInputSchema) ]),
}).strict();

export const SpellbookUpdateWithWhereUniqueWithoutCharacterInputSchema: z.ZodType<Prisma.SpellbookUpdateWithWhereUniqueWithoutCharacterInput> = z.object({
  where: z.lazy(() => SpellbookWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SpellbookUpdateWithoutCharacterInputSchema),z.lazy(() => SpellbookUncheckedUpdateWithoutCharacterInputSchema) ]),
}).strict();

export const SpellbookUpdateManyWithWhereWithoutCharacterInputSchema: z.ZodType<Prisma.SpellbookUpdateManyWithWhereWithoutCharacterInput> = z.object({
  where: z.lazy(() => SpellbookScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SpellbookUpdateManyMutationInputSchema),z.lazy(() => SpellbookUncheckedUpdateManyWithoutCharacterInputSchema) ]),
}).strict();

export const AbilityScoreUpsertWithWhereUniqueWithoutCharacterInputSchema: z.ZodType<Prisma.AbilityScoreUpsertWithWhereUniqueWithoutCharacterInput> = z.object({
  where: z.lazy(() => AbilityScoreWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AbilityScoreUpdateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUncheckedUpdateWithoutCharacterInputSchema) ]),
  create: z.union([ z.lazy(() => AbilityScoreCreateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUncheckedCreateWithoutCharacterInputSchema) ]),
}).strict();

export const AbilityScoreUpdateWithWhereUniqueWithoutCharacterInputSchema: z.ZodType<Prisma.AbilityScoreUpdateWithWhereUniqueWithoutCharacterInput> = z.object({
  where: z.lazy(() => AbilityScoreWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AbilityScoreUpdateWithoutCharacterInputSchema),z.lazy(() => AbilityScoreUncheckedUpdateWithoutCharacterInputSchema) ]),
}).strict();

export const AbilityScoreUpdateManyWithWhereWithoutCharacterInputSchema: z.ZodType<Prisma.AbilityScoreUpdateManyWithWhereWithoutCharacterInput> = z.object({
  where: z.lazy(() => AbilityScoreScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AbilityScoreUpdateManyMutationInputSchema),z.lazy(() => AbilityScoreUncheckedUpdateManyWithoutCharacterInputSchema) ]),
}).strict();

export const AbilityScoreScalarWhereInputSchema: z.ZodType<Prisma.AbilityScoreScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AbilityScoreScalarWhereInputSchema),z.lazy(() => AbilityScoreScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AbilityScoreScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AbilityScoreScalarWhereInputSchema),z.lazy(() => AbilityScoreScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  full_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const SkillUpsertWithWhereUniqueWithoutCharactersInputSchema: z.ZodType<Prisma.SkillUpsertWithWhereUniqueWithoutCharactersInput> = z.object({
  where: z.lazy(() => SkillWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SkillUpdateWithoutCharactersInputSchema),z.lazy(() => SkillUncheckedUpdateWithoutCharactersInputSchema) ]),
  create: z.union([ z.lazy(() => SkillCreateWithoutCharactersInputSchema),z.lazy(() => SkillUncheckedCreateWithoutCharactersInputSchema) ]),
}).strict();

export const SkillUpdateWithWhereUniqueWithoutCharactersInputSchema: z.ZodType<Prisma.SkillUpdateWithWhereUniqueWithoutCharactersInput> = z.object({
  where: z.lazy(() => SkillWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SkillUpdateWithoutCharactersInputSchema),z.lazy(() => SkillUncheckedUpdateWithoutCharactersInputSchema) ]),
}).strict();

export const SkillUpdateManyWithWhereWithoutCharactersInputSchema: z.ZodType<Prisma.SkillUpdateManyWithWhereWithoutCharactersInput> = z.object({
  where: z.lazy(() => SkillScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SkillUpdateManyMutationInputSchema),z.lazy(() => SkillUncheckedUpdateManyWithoutCharactersInputSchema) ]),
}).strict();

export const SkillScalarWhereInputSchema: z.ZodType<Prisma.SkillScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SkillScalarWhereInputSchema),z.lazy(() => SkillScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SkillScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SkillScalarWhereInputSchema),z.lazy(() => SkillScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  desc: z.lazy(() => StringNullableListFilterSchema).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const LanguageUpsertWithWhereUniqueWithoutCharactersInputSchema: z.ZodType<Prisma.LanguageUpsertWithWhereUniqueWithoutCharactersInput> = z.object({
  where: z.lazy(() => LanguageWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LanguageUpdateWithoutCharactersInputSchema),z.lazy(() => LanguageUncheckedUpdateWithoutCharactersInputSchema) ]),
  create: z.union([ z.lazy(() => LanguageCreateWithoutCharactersInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutCharactersInputSchema) ]),
}).strict();

export const LanguageUpdateWithWhereUniqueWithoutCharactersInputSchema: z.ZodType<Prisma.LanguageUpdateWithWhereUniqueWithoutCharactersInput> = z.object({
  where: z.lazy(() => LanguageWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LanguageUpdateWithoutCharactersInputSchema),z.lazy(() => LanguageUncheckedUpdateWithoutCharactersInputSchema) ]),
}).strict();

export const LanguageUpdateManyWithWhereWithoutCharactersInputSchema: z.ZodType<Prisma.LanguageUpdateManyWithWhereWithoutCharactersInput> = z.object({
  where: z.lazy(() => LanguageScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LanguageUpdateManyMutationInputSchema),z.lazy(() => LanguageUncheckedUpdateManyWithoutCharactersInputSchema) ]),
}).strict();

export const LanguageScalarWhereInputSchema: z.ZodType<Prisma.LanguageScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LanguageScalarWhereInputSchema),z.lazy(() => LanguageScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LanguageScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LanguageScalarWhereInputSchema),z.lazy(() => LanguageScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  index: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  typical_speakers: z.lazy(() => StringNullableListFilterSchema).optional(),
  script: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  character_ids: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const ProficiencyUpsertWithWhereUniqueWithoutCharactersInputSchema: z.ZodType<Prisma.ProficiencyUpsertWithWhereUniqueWithoutCharactersInput> = z.object({
  where: z.lazy(() => ProficiencyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProficiencyUpdateWithoutCharactersInputSchema),z.lazy(() => ProficiencyUncheckedUpdateWithoutCharactersInputSchema) ]),
  create: z.union([ z.lazy(() => ProficiencyCreateWithoutCharactersInputSchema),z.lazy(() => ProficiencyUncheckedCreateWithoutCharactersInputSchema) ]),
}).strict();

export const ProficiencyUpdateWithWhereUniqueWithoutCharactersInputSchema: z.ZodType<Prisma.ProficiencyUpdateWithWhereUniqueWithoutCharactersInput> = z.object({
  where: z.lazy(() => ProficiencyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProficiencyUpdateWithoutCharactersInputSchema),z.lazy(() => ProficiencyUncheckedUpdateWithoutCharactersInputSchema) ]),
}).strict();

export const ProficiencyUpdateManyWithWhereWithoutCharactersInputSchema: z.ZodType<Prisma.ProficiencyUpdateManyWithWhereWithoutCharactersInput> = z.object({
  where: z.lazy(() => ProficiencyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProficiencyUpdateManyMutationInputSchema),z.lazy(() => ProficiencyUncheckedUpdateManyWithoutCharactersInputSchema) ]),
}).strict();

export const UserUpsertWithoutCharactersInputSchema: z.ZodType<Prisma.UserUpsertWithoutCharactersInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCharactersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCharactersInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCharactersInputSchema),z.lazy(() => UserUncheckedCreateWithoutCharactersInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCharactersInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCharactersInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCharactersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCharactersInputSchema) ]),
}).strict();

export const UserUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.UserUpdateWithoutCharactersInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCharactersInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const ClassUpsertWithWhereUniqueWithoutCharactersInputSchema: z.ZodType<Prisma.ClassUpsertWithWhereUniqueWithoutCharactersInput> = z.object({
  where: z.lazy(() => ClassWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ClassUpdateWithoutCharactersInputSchema),z.lazy(() => ClassUncheckedUpdateWithoutCharactersInputSchema) ]),
  create: z.union([ z.lazy(() => ClassCreateWithoutCharactersInputSchema),z.lazy(() => ClassUncheckedCreateWithoutCharactersInputSchema) ]),
}).strict();

export const ClassUpdateWithWhereUniqueWithoutCharactersInputSchema: z.ZodType<Prisma.ClassUpdateWithWhereUniqueWithoutCharactersInput> = z.object({
  where: z.lazy(() => ClassWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ClassUpdateWithoutCharactersInputSchema),z.lazy(() => ClassUncheckedUpdateWithoutCharactersInputSchema) ]),
}).strict();

export const ClassUpdateManyWithWhereWithoutCharactersInputSchema: z.ZodType<Prisma.ClassUpdateManyWithWhereWithoutCharactersInput> = z.object({
  where: z.lazy(() => ClassScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ClassUpdateManyMutationInputSchema),z.lazy(() => ClassUncheckedUpdateManyWithoutCharactersInputSchema) ]),
}).strict();

export const RaceUpsertWithoutCharactersInputSchema: z.ZodType<Prisma.RaceUpsertWithoutCharactersInput> = z.object({
  update: z.union([ z.lazy(() => RaceUpdateWithoutCharactersInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutCharactersInputSchema) ]),
  create: z.union([ z.lazy(() => RaceCreateWithoutCharactersInputSchema),z.lazy(() => RaceUncheckedCreateWithoutCharactersInputSchema) ]),
  where: z.lazy(() => RaceWhereInputSchema).optional()
}).strict();

export const RaceUpdateToOneWithWhereWithoutCharactersInputSchema: z.ZodType<Prisma.RaceUpdateToOneWithWhereWithoutCharactersInput> = z.object({
  where: z.lazy(() => RaceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RaceUpdateWithoutCharactersInputSchema),z.lazy(() => RaceUncheckedUpdateWithoutCharactersInputSchema) ]),
}).strict();

export const RaceUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.RaceUpdateWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  speed: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListUpdateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  age: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size_description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  traits: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  speed: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListUpdateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  age: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size_description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  traits: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => RaceUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutRacesNestedInputSchema).optional()
}).strict();

export const CharacterCreateWithoutSaving_throwsInputSchema: z.ZodType<Prisma.CharacterCreateWithoutSaving_throwsInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyCreateNestedManyWithoutCharactersInputSchema).optional(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutCharactersInputSchema),
  classes: z.lazy(() => ClassCreateNestedManyWithoutCharactersInputSchema).optional(),
  race: z.lazy(() => RaceCreateNestedOneWithoutCharactersInputSchema)
}).strict();

export const CharacterUncheckedCreateWithoutSaving_throwsInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateWithoutSaving_throwsInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.string(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutCharactersInputSchema).optional()
}).strict();

export const CharacterCreateOrConnectWithoutSaving_throwsInputSchema: z.ZodType<Prisma.CharacterCreateOrConnectWithoutSaving_throwsInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CharacterCreateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSaving_throwsInputSchema) ]),
}).strict();

export const CharacterUpsertWithWhereUniqueWithoutSaving_throwsInputSchema: z.ZodType<Prisma.CharacterUpsertWithWhereUniqueWithoutSaving_throwsInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CharacterUpdateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutSaving_throwsInputSchema) ]),
  create: z.union([ z.lazy(() => CharacterCreateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSaving_throwsInputSchema) ]),
}).strict();

export const CharacterUpdateWithWhereUniqueWithoutSaving_throwsInputSchema: z.ZodType<Prisma.CharacterUpdateWithWhereUniqueWithoutSaving_throwsInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateWithoutSaving_throwsInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutSaving_throwsInputSchema) ]),
}).strict();

export const CharacterUpdateManyWithWhereWithoutSaving_throwsInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithWhereWithoutSaving_throwsInput> = z.object({
  where: z.lazy(() => CharacterScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateManyMutationInputSchema),z.lazy(() => CharacterUncheckedUpdateManyWithoutSaving_throwsInputSchema) ]),
}).strict();

export const CharacterCreateWithoutSkillsInputSchema: z.ZodType<Prisma.CharacterCreateWithoutSkillsInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreCreateNestedManyWithoutCharacterInputSchema).optional(),
  languages: z.lazy(() => LanguageCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyCreateNestedManyWithoutCharactersInputSchema).optional(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutCharactersInputSchema),
  classes: z.lazy(() => ClassCreateNestedManyWithoutCharactersInputSchema).optional(),
  race: z.lazy(() => RaceCreateNestedOneWithoutCharactersInputSchema)
}).strict();

export const CharacterUncheckedCreateWithoutSkillsInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateWithoutSkillsInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.string(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutCharactersInputSchema).optional()
}).strict();

export const CharacterCreateOrConnectWithoutSkillsInputSchema: z.ZodType<Prisma.CharacterCreateOrConnectWithoutSkillsInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CharacterCreateWithoutSkillsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSkillsInputSchema) ]),
}).strict();

export const CharacterUpsertWithWhereUniqueWithoutSkillsInputSchema: z.ZodType<Prisma.CharacterUpsertWithWhereUniqueWithoutSkillsInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CharacterUpdateWithoutSkillsInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutSkillsInputSchema) ]),
  create: z.union([ z.lazy(() => CharacterCreateWithoutSkillsInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutSkillsInputSchema) ]),
}).strict();

export const CharacterUpdateWithWhereUniqueWithoutSkillsInputSchema: z.ZodType<Prisma.CharacterUpdateWithWhereUniqueWithoutSkillsInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateWithoutSkillsInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutSkillsInputSchema) ]),
}).strict();

export const CharacterUpdateManyWithWhereWithoutSkillsInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithWhereWithoutSkillsInput> = z.object({
  where: z.lazy(() => CharacterScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateManyMutationInputSchema),z.lazy(() => CharacterUncheckedUpdateManyWithoutSkillsInputSchema) ]),
}).strict();

export const CharacterCreateWithoutLanguagesInputSchema: z.ZodType<Prisma.CharacterCreateWithoutLanguagesInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyCreateNestedManyWithoutCharactersInputSchema).optional(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutCharactersInputSchema),
  classes: z.lazy(() => ClassCreateNestedManyWithoutCharactersInputSchema).optional(),
  race: z.lazy(() => RaceCreateNestedOneWithoutCharactersInputSchema)
}).strict();

export const CharacterUncheckedCreateWithoutLanguagesInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateWithoutLanguagesInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.string(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutCharactersInputSchema).optional()
}).strict();

export const CharacterCreateOrConnectWithoutLanguagesInputSchema: z.ZodType<Prisma.CharacterCreateOrConnectWithoutLanguagesInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CharacterCreateWithoutLanguagesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutLanguagesInputSchema) ]),
}).strict();

export const CharacterUpsertWithWhereUniqueWithoutLanguagesInputSchema: z.ZodType<Prisma.CharacterUpsertWithWhereUniqueWithoutLanguagesInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CharacterUpdateWithoutLanguagesInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutLanguagesInputSchema) ]),
  create: z.union([ z.lazy(() => CharacterCreateWithoutLanguagesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutLanguagesInputSchema) ]),
}).strict();

export const CharacterUpdateWithWhereUniqueWithoutLanguagesInputSchema: z.ZodType<Prisma.CharacterUpdateWithWhereUniqueWithoutLanguagesInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateWithoutLanguagesInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutLanguagesInputSchema) ]),
}).strict();

export const CharacterUpdateManyWithWhereWithoutLanguagesInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithWhereWithoutLanguagesInput> = z.object({
  where: z.lazy(() => CharacterScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateManyMutationInputSchema),z.lazy(() => CharacterUncheckedUpdateManyWithoutLanguagesInputSchema) ]),
}).strict();

export const ClassCreateWithoutProficienciesInputSchema: z.ZodType<Prisma.ClassCreateWithoutProficienciesInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  hit_die: z.number().int(),
  class_levels: z.string(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableCreateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.string().optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListCreateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutClassesInputSchema).optional(),
  characters: z.lazy(() => CharacterCreateNestedManyWithoutClassesInputSchema).optional()
}).strict();

export const ClassUncheckedCreateWithoutProficienciesInputSchema: z.ZodType<Prisma.ClassUncheckedCreateWithoutProficienciesInput> = z.object({
  id: z.string().optional(),
  index: z.string(),
  name: z.string(),
  url: z.string(),
  hit_die: z.number().int(),
  class_levels: z.string(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableCreateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.string().optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListCreateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListCreateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListCreateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassCreatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassCreatecharacter_idsInputSchema),z.string().array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutClassesInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedCreateNestedManyWithoutClassesInputSchema).optional()
}).strict();

export const ClassCreateOrConnectWithoutProficienciesInputSchema: z.ZodType<Prisma.ClassCreateOrConnectWithoutProficienciesInput> = z.object({
  where: z.lazy(() => ClassWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ClassCreateWithoutProficienciesInputSchema),z.lazy(() => ClassUncheckedCreateWithoutProficienciesInputSchema) ]),
}).strict();

export const CharacterCreateWithoutProficienciesInputSchema: z.ZodType<Prisma.CharacterCreateWithoutProficienciesInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  spellbooks: z.lazy(() => SpellbookCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageCreateNestedManyWithoutCharactersInputSchema).optional(),
  auth_user: z.lazy(() => UserCreateNestedOneWithoutCharactersInputSchema),
  classes: z.lazy(() => ClassCreateNestedManyWithoutCharactersInputSchema).optional(),
  race: z.lazy(() => RaceCreateNestedOneWithoutCharactersInputSchema)
}).strict();

export const CharacterUncheckedCreateWithoutProficienciesInputSchema: z.ZodType<Prisma.CharacterUncheckedCreateWithoutProficienciesInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.string(),
  spellbooks: z.lazy(() => SpellbookUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedCreateNestedManyWithoutCharacterInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedCreateNestedManyWithoutCharactersInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedCreateNestedManyWithoutCharactersInputSchema).optional()
}).strict();

export const CharacterCreateOrConnectWithoutProficienciesInputSchema: z.ZodType<Prisma.CharacterCreateOrConnectWithoutProficienciesInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CharacterCreateWithoutProficienciesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutProficienciesInputSchema) ]),
}).strict();

export const ClassUpsertWithWhereUniqueWithoutProficienciesInputSchema: z.ZodType<Prisma.ClassUpsertWithWhereUniqueWithoutProficienciesInput> = z.object({
  where: z.lazy(() => ClassWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ClassUpdateWithoutProficienciesInputSchema),z.lazy(() => ClassUncheckedUpdateWithoutProficienciesInputSchema) ]),
  create: z.union([ z.lazy(() => ClassCreateWithoutProficienciesInputSchema),z.lazy(() => ClassUncheckedCreateWithoutProficienciesInputSchema) ]),
}).strict();

export const ClassUpdateWithWhereUniqueWithoutProficienciesInputSchema: z.ZodType<Prisma.ClassUpdateWithWhereUniqueWithoutProficienciesInput> = z.object({
  where: z.lazy(() => ClassWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ClassUpdateWithoutProficienciesInputSchema),z.lazy(() => ClassUncheckedUpdateWithoutProficienciesInputSchema) ]),
}).strict();

export const ClassUpdateManyWithWhereWithoutProficienciesInputSchema: z.ZodType<Prisma.ClassUpdateManyWithWhereWithoutProficienciesInput> = z.object({
  where: z.lazy(() => ClassScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ClassUpdateManyMutationInputSchema),z.lazy(() => ClassUncheckedUpdateManyWithoutProficienciesInputSchema) ]),
}).strict();

export const CharacterUpsertWithWhereUniqueWithoutProficienciesInputSchema: z.ZodType<Prisma.CharacterUpsertWithWhereUniqueWithoutProficienciesInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CharacterUpdateWithoutProficienciesInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutProficienciesInputSchema) ]),
  create: z.union([ z.lazy(() => CharacterCreateWithoutProficienciesInputSchema),z.lazy(() => CharacterUncheckedCreateWithoutProficienciesInputSchema) ]),
}).strict();

export const CharacterUpdateWithWhereUniqueWithoutProficienciesInputSchema: z.ZodType<Prisma.CharacterUpdateWithWhereUniqueWithoutProficienciesInput> = z.object({
  where: z.lazy(() => CharacterWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateWithoutProficienciesInputSchema),z.lazy(() => CharacterUncheckedUpdateWithoutProficienciesInputSchema) ]),
}).strict();

export const CharacterUpdateManyWithWhereWithoutProficienciesInputSchema: z.ZodType<Prisma.CharacterUpdateManyWithWhereWithoutProficienciesInput> = z.object({
  where: z.lazy(() => CharacterScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CharacterUpdateManyMutationInputSchema),z.lazy(() => CharacterUncheckedUpdateManyWithoutProficienciesInputSchema) ]),
}).strict();

export const EnumAOETypeFilterSchema: z.ZodType<Prisma.EnumAOETypeFilter> = z.object({
  equals: z.lazy(() => AOETypeSchema).optional(),
  in: z.lazy(() => AOETypeSchema).array().optional(),
  notIn: z.lazy(() => AOETypeSchema).array().optional(),
  not: z.union([ z.lazy(() => AOETypeSchema),z.lazy(() => NestedEnumAOETypeFilterSchema) ]).optional(),
}).strict();

export const PrerequisiteCompositeListFilterSchema: z.ZodType<Prisma.PrerequisiteCompositeListFilter> = z.object({
  equals: z.lazy(() => PrerequisiteObjectEqualityInputSchema).array().optional(),
  every: z.lazy(() => PrerequisiteWhereInputSchema).optional(),
  some: z.lazy(() => PrerequisiteWhereInputSchema).optional(),
  none: z.lazy(() => PrerequisiteWhereInputSchema).optional(),
  isEmpty: z.boolean().optional(),
  isSet: z.boolean().optional()
}).strict();

export const KeyCreateManyUserInputSchema: z.ZodType<Prisma.KeyCreateManyUserInput> = z.object({
  id: z.string(),
  hashed_password: z.string().optional().nullable()
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string(),
  active_expires: z.bigint(),
  idle_expires: z.bigint()
}).strict();

export const SpellbookCreateManyAuth_userInputSchema: z.ZodType<Prisma.SpellbookCreateManyAuth_userInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  character_id: z.string().optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookCreatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookCreaterace_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CharacterCreateManyAuth_userInputSchema: z.ZodType<Prisma.CharacterCreateManyAuth_userInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.string()
}).strict();

export const CampaignCreateManyOwner_userInputSchema: z.ZodType<Prisma.CampaignCreateManyOwner_userInput> = z.object({
  id: z.string().optional(),
  campaign_name: z.string(),
  capaign_description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_ids: z.union([ z.lazy(() => CampaignCreateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignCreaterequested_user_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const KeyUpdateWithoutUserInputSchema: z.ZodType<Prisma.KeyUpdateWithoutUserInput> = z.object({
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const KeyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateWithoutUserInput> = z.object({
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const KeyUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.KeyUncheckedUpdateManyWithoutUserInput> = z.object({
  hashed_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  active_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  idle_expires: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpellbookUpdateWithoutAuth_userInputSchema: z.ZodType<Prisma.SpellbookUpdateWithoutAuth_userInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  character: z.lazy(() => CharacterUpdateOneWithoutSpellbooksNestedInputSchema).optional(),
  spells: z.lazy(() => SpellUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  races: z.lazy(() => RaceUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookUncheckedUpdateWithoutAuth_userInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateWithoutAuth_userInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  character_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  spells: z.lazy(() => SpellUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  races: z.lazy(() => RaceUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookUncheckedUpdateManyWithoutAuth_userInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateManyWithoutAuth_userInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  character_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdateWithoutAuth_userInputSchema: z.ZodType<Prisma.CharacterUpdateWithoutAuth_userInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUpdateManyWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutCharactersNestedInputSchema).optional(),
  race: z.lazy(() => RaceUpdateOneRequiredWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateWithoutAuth_userInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateWithoutAuth_userInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateManyWithoutAuth_userInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutAuth_userInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FriendsUpdateWithoutFriendsInputSchema: z.ZodType<Prisma.FriendsUpdateWithoutFriendsInput> = z.object({
}).strict();

export const FriendsUncheckedUpdateWithoutFriendsInputSchema: z.ZodType<Prisma.FriendsUncheckedUpdateWithoutFriendsInput> = z.object({
  friend_ids: z.union([ z.lazy(() => FriendsUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const FriendsUncheckedUpdateManyWithoutFriendsInputSchema: z.ZodType<Prisma.FriendsUncheckedUpdateManyWithoutFriendsInput> = z.object({
  friend_ids: z.union([ z.lazy(() => FriendsUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const RequestedFriendsUpdateWithoutRequested_friendsInputSchema: z.ZodType<Prisma.RequestedFriendsUpdateWithoutRequested_friendsInput> = z.object({
}).strict();

export const RequestedFriendsUncheckedUpdateWithoutRequested_friendsInputSchema: z.ZodType<Prisma.RequestedFriendsUncheckedUpdateWithoutRequested_friendsInput> = z.object({
  requested_friend_ids: z.union([ z.lazy(() => RequestedFriendsUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsInputSchema: z.ZodType<Prisma.RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsInput> = z.object({
  requested_friend_ids: z.union([ z.lazy(() => RequestedFriendsUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SentRequestsUpdateWithoutSent_requestsInputSchema: z.ZodType<Prisma.SentRequestsUpdateWithoutSent_requestsInput> = z.object({
}).strict();

export const SentRequestsUncheckedUpdateWithoutSent_requestsInputSchema: z.ZodType<Prisma.SentRequestsUncheckedUpdateWithoutSent_requestsInput> = z.object({
  sent_request_ids: z.union([ z.lazy(() => SentRequestsUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SentRequestsUncheckedUpdateManyWithoutSent_requestsInputSchema: z.ZodType<Prisma.SentRequestsUncheckedUpdateManyWithoutSent_requestsInput> = z.object({
  sent_request_ids: z.union([ z.lazy(() => SentRequestsUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CampaignUpdateWithoutOwner_userInputSchema: z.ZodType<Prisma.CampaignUpdateWithoutOwner_userInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUpdateManyWithoutJoined_campaignsNestedInputSchema).optional(),
  requested_users: z.lazy(() => UserUpdateManyWithoutRequested_campaignsNestedInputSchema).optional()
}).strict();

export const CampaignUncheckedUpdateWithoutOwner_userInputSchema: z.ZodType<Prisma.CampaignUncheckedUpdateWithoutOwner_userInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_ids: z.union([ z.lazy(() => CampaignUpdateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignUpdaterequested_user_idsInputSchema),z.string().array() ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutJoined_campaignsNestedInputSchema).optional(),
  requested_users: z.lazy(() => UserUncheckedUpdateManyWithoutRequested_campaignsNestedInputSchema).optional()
}).strict();

export const CampaignUncheckedUpdateManyWithoutOwner_userInputSchema: z.ZodType<Prisma.CampaignUncheckedUpdateManyWithoutOwner_userInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_ids: z.union([ z.lazy(() => CampaignUpdateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignUpdaterequested_user_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CampaignUpdateWithoutUsersInputSchema: z.ZodType<Prisma.CampaignUpdateWithoutUsersInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_user: z.lazy(() => UserUpdateOneRequiredWithoutOwned_campaignsNestedInputSchema).optional(),
  requested_users: z.lazy(() => UserUpdateManyWithoutRequested_campaignsNestedInputSchema).optional()
}).strict();

export const CampaignUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.CampaignUncheckedUpdateWithoutUsersInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_ids: z.union([ z.lazy(() => CampaignUpdateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignUpdaterequested_user_idsInputSchema),z.string().array() ]).optional(),
  requested_users: z.lazy(() => UserUncheckedUpdateManyWithoutRequested_campaignsNestedInputSchema).optional()
}).strict();

export const CampaignUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.CampaignUncheckedUpdateManyWithoutUsersInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_ids: z.union([ z.lazy(() => CampaignUpdateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignUpdaterequested_user_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CampaignUpdateWithoutRequested_usersInputSchema: z.ZodType<Prisma.CampaignUpdateWithoutRequested_usersInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_user: z.lazy(() => UserUpdateOneRequiredWithoutOwned_campaignsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutJoined_campaignsNestedInputSchema).optional()
}).strict();

export const CampaignUncheckedUpdateWithoutRequested_usersInputSchema: z.ZodType<Prisma.CampaignUncheckedUpdateWithoutRequested_usersInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_ids: z.union([ z.lazy(() => CampaignUpdateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignUpdaterequested_user_idsInputSchema),z.string().array() ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutJoined_campaignsNestedInputSchema).optional()
}).strict();

export const CampaignUncheckedUpdateManyWithoutRequested_usersInputSchema: z.ZodType<Prisma.CampaignUncheckedUpdateManyWithoutRequested_usersInput> = z.object({
  campaign_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  capaign_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_ids: z.union([ z.lazy(() => CampaignUpdateuser_idsInputSchema),z.string().array() ]).optional(),
  requested_user_ids: z.union([ z.lazy(() => CampaignUpdaterequested_user_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const UserUpdateWithoutFriendsInputSchema: z.ZodType<Prisma.UserUpdateWithoutFriendsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFriendsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFriendsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutFriendsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutFriendsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const UserUpdateWithoutRequested_friendsInputSchema: z.ZodType<Prisma.UserUpdateWithoutRequested_friendsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUpdateManyWithoutFriendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutRequested_friendsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutRequested_friendsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedUpdateManyWithoutFriendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutRequested_friendsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutRequested_friendsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const UserUpdateWithoutSent_requestsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSent_requestsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSent_requestsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSent_requestsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutSent_requestsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutSent_requestsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SpellUpdateWithoutSpellbooksInputSchema: z.ZodType<Prisma.SpellUpdateWithoutSpellbooksInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SpellUpdatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellUpdatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.union([ z.lazy(() => SpellUpdatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableUpdateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  concentration: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  casting_time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  attack_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  damage: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableUpdateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  classes: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
}).strict();

export const SpellUncheckedUpdateWithoutSpellbooksInputSchema: z.ZodType<Prisma.SpellUncheckedUpdateWithoutSpellbooksInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SpellUpdatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellUpdatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.union([ z.lazy(() => SpellUpdatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableUpdateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  concentration: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  casting_time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  attack_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  damage: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableUpdateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  classes: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => SpellUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SpellUncheckedUpdateManyWithoutSpellbooksInputSchema: z.ZodType<Prisma.SpellUncheckedUpdateManyWithoutSpellbooksInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SpellUpdatedescInputSchema),z.string().array() ]).optional(),
  higher_level: z.union([ z.lazy(() => SpellUpdatehigher_levelInputSchema),z.string().array() ]).optional(),
  range: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.union([ z.lazy(() => SpellUpdatecomponentsInputSchema),z.lazy(() => ComponentsSchema).array() ]).optional(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area_of_effect: z.union([ z.lazy(() => AreaOfEffectNullableUpdateEnvelopeInputSchema),z.lazy(() => AreaOfEffectCreateInputSchema) ]).optional().nullable(),
  ritual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  concentration: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  casting_time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  attack_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  damage: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  dc: z.union([ z.lazy(() => DifficultyClassNullableUpdateEnvelopeInputSchema),z.lazy(() => DifficultyClassCreateInputSchema) ]).optional().nullable(),
  school: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  classes: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => SpellUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const ClassUpdateWithoutSpellbooksInputSchema: z.ZodType<Prisma.ClassUpdateWithoutSpellbooksInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyUpdateManyWithoutClassesNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutClassesNestedInputSchema).optional()
}).strict();

export const ClassUncheckedUpdateWithoutSpellbooksInputSchema: z.ZodType<Prisma.ClassUncheckedUpdateWithoutSpellbooksInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedUpdateManyWithoutClassesNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutClassesNestedInputSchema).optional()
}).strict();

export const ClassUncheckedUpdateManyWithoutSpellbooksInputSchema: z.ZodType<Prisma.ClassUncheckedUpdateManyWithoutSpellbooksInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const RaceUpdateWithoutSpellbooksInputSchema: z.ZodType<Prisma.RaceUpdateWithoutSpellbooksInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  speed: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListUpdateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  age: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size_description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  traits: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateWithoutSpellbooksInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateWithoutSpellbooksInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  speed: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListUpdateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  age: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size_description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  traits: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => RaceUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutRaceNestedInputSchema).optional()
}).strict();

export const RaceUncheckedUpdateManyWithoutSpellbooksInputSchema: z.ZodType<Prisma.RaceUncheckedUpdateManyWithoutSpellbooksInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  speed: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ability_bonuses: z.union([ z.lazy(() => AbilityBonusListUpdateEnvelopeInputSchema),z.lazy(() => AbilityBonusCreateInputSchema),z.lazy(() => AbilityBonusCreateInputSchema).array() ]).optional(),
  alignment: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  age: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  size_description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  starting_proficiencies: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  starting_proficiency_options: z.union([ z.lazy(() => ChoiceNullableUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema) ]).optional().nullable(),
  languages: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  language_desc: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  traits: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subraces: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => RaceUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const UserUpdateWithoutJoined_campaignsInputSchema: z.ZodType<Prisma.UserUpdateWithoutJoined_campaignsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutJoined_campaignsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutJoined_campaignsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  requested_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutRequested_usersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutJoined_campaignsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutJoined_campaignsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const UserUpdateWithoutRequested_campaignsInputSchema: z.ZodType<Prisma.UserUpdateWithoutRequested_campaignsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  auth_key: z.lazy(() => KeyUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutRequested_campaignsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutRequested_campaignsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
  auth_key: z.lazy(() => KeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auth_session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutAuth_userNestedInputSchema).optional(),
  friends: z.lazy(() => FriendsUncheckedUpdateManyWithoutFriendsNestedInputSchema).optional(),
  requested_friends: z.lazy(() => RequestedFriendsUncheckedUpdateManyWithoutRequested_friendsNestedInputSchema).optional(),
  sent_requests: z.lazy(() => SentRequestsUncheckedUpdateManyWithoutSent_requestsNestedInputSchema).optional(),
  owned_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutOwner_userNestedInputSchema).optional(),
  joined_campaigns: z.lazy(() => CampaignUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutRequested_campaignsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutRequested_campaignsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  discordUsername: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.lazy(() => RoleSchema),z.lazy(() => EnumRoleFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  biography: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profile_pic_url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  friend_ids: z.union([ z.lazy(() => UserUpdatefriend_idsInputSchema),z.string().array() ]).optional(),
  requested_friend_ids: z.union([ z.lazy(() => UserUpdaterequested_friend_idsInputSchema),z.string().array() ]).optional(),
  sent_request_ids: z.union([ z.lazy(() => UserUpdatesent_request_idsInputSchema),z.string().array() ]).optional(),
  joined_campaign_ids: z.union([ z.lazy(() => UserUpdatejoined_campaign_idsInputSchema),z.string().array() ]).optional(),
  requested_campaign_ids: z.union([ z.lazy(() => UserUpdaterequested_campaign_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const AreaOfEffectUpdateInputSchema: z.ZodType<Prisma.AreaOfEffectUpdateInput> = z.object({
  size: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AOETypeSchema),z.lazy(() => EnumAOETypeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DifficultyClassUpdateInputSchema: z.ZodType<Prisma.DifficultyClassUpdateInput> = z.object({
  dc_success: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dc_type: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  desc: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SpellbookUpdateWithoutSpellsInputSchema: z.ZodType<Prisma.SpellbookUpdateWithoutSpellsInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutSpellbooksNestedInputSchema).optional(),
  character: z.lazy(() => CharacterUpdateOneWithoutSpellbooksNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  races: z.lazy(() => RaceUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookUncheckedUpdateWithoutSpellsInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateWithoutSpellsInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  races: z.lazy(() => RaceUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookUncheckedUpdateManyWithoutSpellsInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateManyWithoutSpellsInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const MulticlassingUpdateInputSchema: z.ZodType<Prisma.MulticlassingUpdateInput> = z.object({
  prerequisites: z.union([ z.lazy(() => PrerequisiteListUpdateEnvelopeInputSchema),z.lazy(() => PrerequisiteCreateInputSchema),z.lazy(() => PrerequisiteCreateInputSchema).array() ]).optional(),
  prerequisite_options: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  proficiencies: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
}).strict();

export const StartingEquipmentUpdateInputSchema: z.ZodType<Prisma.StartingEquipmentUpdateInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  equipment: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
}).strict();

export const ChoiceUpdateInputSchema: z.ZodType<Prisma.ChoiceUpdateInput> = z.object({
  desc: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  choose: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  from: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
}).strict();

export const ProficiencyUpdateWithoutClassesInputSchema: z.ZodType<Prisma.ProficiencyUpdateWithoutClassesInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  race_ids: z.union([ z.lazy(() => ProficiencyUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutProficienciesNestedInputSchema).optional()
}).strict();

export const ProficiencyUncheckedUpdateWithoutClassesInputSchema: z.ZodType<Prisma.ProficiencyUncheckedUpdateWithoutClassesInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  race_ids: z.union([ z.lazy(() => ProficiencyUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => ProficiencyUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ProficiencyUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutProficienciesNestedInputSchema).optional()
}).strict();

export const ProficiencyUncheckedUpdateManyWithoutClassesInputSchema: z.ZodType<Prisma.ProficiencyUncheckedUpdateManyWithoutClassesInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  race_ids: z.union([ z.lazy(() => ProficiencyUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => ProficiencyUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ProficiencyUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SpellbookUpdateWithoutClassesInputSchema: z.ZodType<Prisma.SpellbookUpdateWithoutClassesInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutSpellbooksNestedInputSchema).optional(),
  character: z.lazy(() => CharacterUpdateOneWithoutSpellbooksNestedInputSchema).optional(),
  spells: z.lazy(() => SpellUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  races: z.lazy(() => RaceUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookUncheckedUpdateWithoutClassesInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateWithoutClassesInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  spells: z.lazy(() => SpellUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  races: z.lazy(() => RaceUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookUncheckedUpdateManyWithoutClassesInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateManyWithoutClassesInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdateWithoutClassesInputSchema: z.ZodType<Prisma.CharacterUpdateWithoutClassesInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUpdateManyWithoutCharactersNestedInputSchema).optional(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutCharactersNestedInputSchema).optional(),
  race: z.lazy(() => RaceUpdateOneRequiredWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateWithoutClassesInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateWithoutClassesInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateManyWithoutClassesInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutClassesInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CharacterCreateManyRaceInputSchema: z.ZodType<Prisma.CharacterCreateManyRaceInput> = z.object({
  id: z.string().optional(),
  character_name: z.string(),
  player_name: z.string(),
  description: z.string().optional().nullable(),
  backstory: z.string().optional().nullable(),
  level: z.number().int(),
  experience: z.number().int().optional().nullable(),
  next_level: z.number().int().optional().nullable(),
  age: z.number().int().optional().nullable(),
  Height: z.string().optional().nullable(),
  weight: z.number().int().optional().nullable(),
  size: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  eye_color: z.string().optional().nullable(),
  hair_color: z.string().optional().nullable(),
  skin_color: z.string().optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListCreateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterCreatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterCreateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.number().int().optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableCreateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterCreatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterCreateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterCreateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableCreateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  class_ids: z.union([ z.lazy(() => CharacterCreateclass_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const AbilityBonusUpdateInputSchema: z.ZodType<Prisma.AbilityBonusUpdateInput> = z.object({
  bonus: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
}).strict();

export const SpellbookUpdateWithoutRacesInputSchema: z.ZodType<Prisma.SpellbookUpdateWithoutRacesInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutSpellbooksNestedInputSchema).optional(),
  character: z.lazy(() => CharacterUpdateOneWithoutSpellbooksNestedInputSchema).optional(),
  spells: z.lazy(() => SpellUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookUncheckedUpdateWithoutRacesInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateWithoutRacesInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  spells: z.lazy(() => SpellUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookUncheckedUpdateManyWithoutRacesInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateManyWithoutRacesInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdateWithoutRaceInputSchema: z.ZodType<Prisma.CharacterUpdateWithoutRaceInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUpdateManyWithoutCharactersNestedInputSchema).optional(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateWithoutRaceInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateWithoutRaceInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateManyWithoutRaceInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutRaceInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SpellbookCreateManyCharacterInputSchema: z.ZodType<Prisma.SpellbookCreateManyCharacterInput> = z.object({
  id: z.string().optional(),
  spellbook_name: z.string(),
  character_name: z.string(),
  spellbook_description: z.string().optional().nullable(),
  image_url: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional().nullable(),
  user_id: z.string(),
  spell_ids: z.union([ z.lazy(() => SpellbookCreatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookCreateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookCreaterace_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CharacterAbilityScoreUpdateInputSchema: z.ZodType<Prisma.CharacterAbilityScoreUpdateInput> = z.object({
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DeathSaveUpdateInputSchema: z.ZodType<Prisma.DeathSaveUpdateInput> = z.object({
  successes: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  failures: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CoinTypeUpdateInputSchema: z.ZodType<Prisma.CoinTypeUpdateInput> = z.object({
  copper_pieces: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  silver_pieces: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  electrum_pieces: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gold_pieces: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  platinum_pieces: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SpellbookUpdateWithoutCharacterInputSchema: z.ZodType<Prisma.SpellbookUpdateWithoutCharacterInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutSpellbooksNestedInputSchema).optional(),
  spells: z.lazy(() => SpellUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  races: z.lazy(() => RaceUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookUncheckedUpdateWithoutCharacterInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateWithoutCharacterInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  spells: z.lazy(() => SpellUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional(),
  races: z.lazy(() => RaceUncheckedUpdateManyWithoutSpellbooksNestedInputSchema).optional()
}).strict();

export const SpellbookUncheckedUpdateManyWithoutCharacterInputSchema: z.ZodType<Prisma.SpellbookUncheckedUpdateManyWithoutCharacterInput> = z.object({
  spellbook_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbook_description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spell_ids: z.union([ z.lazy(() => SpellbookUpdatespell_idsInputSchema),z.string().array() ]).optional(),
  class_ids: z.union([ z.lazy(() => SpellbookUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_ids: z.union([ z.lazy(() => SpellbookUpdaterace_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const AbilityScoreUpdateWithoutCharacterInputSchema: z.ZodType<Prisma.AbilityScoreUpdateWithoutCharacterInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => AbilityScoreUpdatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
}).strict();

export const AbilityScoreUncheckedUpdateWithoutCharacterInputSchema: z.ZodType<Prisma.AbilityScoreUncheckedUpdateWithoutCharacterInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => AbilityScoreUpdatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  character_ids: z.union([ z.lazy(() => AbilityScoreUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const AbilityScoreUncheckedUpdateManyWithoutCharacterInputSchema: z.ZodType<Prisma.AbilityScoreUncheckedUpdateManyWithoutCharacterInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  full_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => AbilityScoreUpdatedescInputSchema),z.string().array() ]).optional(),
  skills: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  character_ids: z.union([ z.lazy(() => AbilityScoreUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SkillUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.SkillUpdateWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SkillUpdatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
}).strict();

export const SkillUncheckedUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.SkillUncheckedUpdateWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SkillUpdatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  character_ids: z.union([ z.lazy(() => SkillUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SkillUncheckedUpdateManyWithoutCharactersInputSchema: z.ZodType<Prisma.SkillUncheckedUpdateManyWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  desc: z.union([ z.lazy(() => SkillUpdatedescInputSchema),z.string().array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  character_ids: z.union([ z.lazy(() => SkillUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const LanguageUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.LanguageUpdateWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typical_speakers: z.union([ z.lazy(() => LanguageUpdatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LanguageUncheckedUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.LanguageUncheckedUpdateWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typical_speakers: z.union([ z.lazy(() => LanguageUpdatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_ids: z.union([ z.lazy(() => LanguageUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const LanguageUncheckedUpdateManyWithoutCharactersInputSchema: z.ZodType<Prisma.LanguageUncheckedUpdateManyWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  typical_speakers: z.union([ z.lazy(() => LanguageUpdatetypical_speakersInputSchema),z.string().array() ]).optional(),
  script: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  character_ids: z.union([ z.lazy(() => LanguageUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const ProficiencyUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.ProficiencyUpdateWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  race_ids: z.union([ z.lazy(() => ProficiencyUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutProficienciesNestedInputSchema).optional()
}).strict();

export const ProficiencyUncheckedUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.ProficiencyUncheckedUpdateWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  race_ids: z.union([ z.lazy(() => ProficiencyUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => ProficiencyUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ProficiencyUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutProficienciesNestedInputSchema).optional()
}).strict();

export const ProficiencyUncheckedUpdateManyWithoutCharactersInputSchema: z.ZodType<Prisma.ProficiencyUncheckedUpdateManyWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  race_ids: z.union([ z.lazy(() => ProficiencyUpdaterace_idsInputSchema),z.string().array() ]).optional(),
  reference: z.union([ z.lazy(() => APIReferenceUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => ProficiencyUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ProficiencyUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const ClassUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.ClassUpdateWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyUpdateManyWithoutClassesNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutClassesNestedInputSchema).optional()
}).strict();

export const ClassUncheckedUpdateWithoutCharactersInputSchema: z.ZodType<Prisma.ClassUncheckedUpdateWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedUpdateManyWithoutClassesNestedInputSchema).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutClassesNestedInputSchema).optional()
}).strict();

export const ClassUncheckedUpdateManyWithoutCharactersInputSchema: z.ZodType<Prisma.ClassUncheckedUpdateManyWithoutCharactersInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdateWithoutSaving_throwsInputSchema: z.ZodType<Prisma.CharacterUpdateWithoutSaving_throwsInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUpdateManyWithoutCharactersNestedInputSchema).optional(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutCharactersNestedInputSchema).optional(),
  race: z.lazy(() => RaceUpdateOneRequiredWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateWithoutSaving_throwsInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateWithoutSaving_throwsInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateManyWithoutSaving_throwsInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutSaving_throwsInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CharacterUpdateWithoutSkillsInputSchema: z.ZodType<Prisma.CharacterUpdateWithoutSkillsInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUpdateManyWithoutCharacterNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUpdateManyWithoutCharactersNestedInputSchema).optional(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutCharactersNestedInputSchema).optional(),
  race: z.lazy(() => RaceUpdateOneRequiredWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateWithoutSkillsInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateWithoutSkillsInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateManyWithoutSkillsInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutSkillsInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CharacterUpdateWithoutLanguagesInputSchema: z.ZodType<Prisma.CharacterUpdateWithoutLanguagesInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUpdateManyWithoutCharactersNestedInputSchema).optional(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutCharactersNestedInputSchema).optional(),
  race: z.lazy(() => RaceUpdateOneRequiredWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateWithoutLanguagesInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateWithoutLanguagesInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  proficiencies: z.lazy(() => ProficiencyUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateManyWithoutLanguagesInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutLanguagesInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ClassUpdateWithoutProficienciesInputSchema: z.ZodType<Prisma.ClassUpdateWithoutProficienciesInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutClassesNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUpdateManyWithoutClassesNestedInputSchema).optional()
}).strict();

export const ClassUncheckedUpdateWithoutProficienciesInputSchema: z.ZodType<Prisma.ClassUncheckedUpdateWithoutProficienciesInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutClassesNestedInputSchema).optional(),
  characters: z.lazy(() => CharacterUncheckedUpdateManyWithoutClassesNestedInputSchema).optional()
}).strict();

export const ClassUncheckedUpdateManyWithoutProficienciesInputSchema: z.ZodType<Prisma.ClassUncheckedUpdateManyWithoutProficienciesInput> = z.object({
  index: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  hit_die: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  class_levels: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  multi_classing: z.union([ z.lazy(() => MulticlassingNullableUpdateEnvelopeInputSchema),z.lazy(() => MulticlassingCreateInputSchema) ]).optional().nullable(),
  spells: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  starting_equipment: z.union([ z.lazy(() => StartingEquipmentListUpdateEnvelopeInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema),z.lazy(() => StartingEquipmentCreateInputSchema).array() ]).optional(),
  starting_equipment_options: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => ClassUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  proficiency_choices: z.union([ z.lazy(() => ChoiceListUpdateEnvelopeInputSchema),z.lazy(() => ChoiceCreateInputSchema),z.lazy(() => ChoiceCreateInputSchema).array() ]).optional(),
  saving_throws: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  subclasses: z.union([ z.lazy(() => APIReferenceListUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema),z.lazy(() => APIReferenceCreateInputSchema).array() ]).optional(),
  spellbook_ids: z.union([ z.lazy(() => ClassUpdatespellbook_idsInputSchema),z.string().array() ]).optional(),
  character_ids: z.union([ z.lazy(() => ClassUpdatecharacter_idsInputSchema),z.string().array() ]).optional(),
}).strict();

export const CharacterUpdateWithoutProficienciesInputSchema: z.ZodType<Prisma.CharacterUpdateWithoutProficienciesInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  spellbooks: z.lazy(() => SpellbookUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUpdateManyWithoutCharactersNestedInputSchema).optional(),
  auth_user: z.lazy(() => UserUpdateOneRequiredWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUpdateManyWithoutCharactersNestedInputSchema).optional(),
  race: z.lazy(() => RaceUpdateOneRequiredWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateWithoutProficienciesInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateWithoutProficienciesInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  spellbooks: z.lazy(() => SpellbookUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  saving_throws: z.lazy(() => AbilityScoreUncheckedUpdateManyWithoutCharacterNestedInputSchema).optional(),
  skills: z.lazy(() => SkillUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  languages: z.lazy(() => LanguageUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional(),
  classes: z.lazy(() => ClassUncheckedUpdateManyWithoutCharactersNestedInputSchema).optional()
}).strict();

export const CharacterUncheckedUpdateManyWithoutProficienciesInputSchema: z.ZodType<Prisma.CharacterUncheckedUpdateManyWithoutProficienciesInput> = z.object({
  character_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  player_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  backstory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  experience: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  next_level: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  age: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Height: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eye_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hair_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  skin_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scores_original: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  scores_current: z.union([ z.lazy(() => CharacterAbilityScoreListUpdateEnvelopeInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema),z.lazy(() => CharacterAbilityScoreCreateInputSchema).array() ]).optional(),
  saving_throw_ids: z.union([ z.lazy(() => CharacterUpdatesaving_throw_idsInputSchema),z.string().array() ]).optional(),
  skill_ids: z.union([ z.lazy(() => CharacterUpdateskill_idsInputSchema),z.string().array() ]).optional(),
  armor_class: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  death_saves: z.union([ z.lazy(() => DeathSaveNullableUpdateEnvelopeInputSchema),z.lazy(() => DeathSaveCreateInputSchema) ]).optional().nullable(),
  language_ids: z.union([ z.lazy(() => CharacterUpdatelanguage_idsInputSchema),z.string().array() ]).optional(),
  proficiency_ids: z.union([ z.lazy(() => CharacterUpdateproficiency_idsInputSchema),z.string().array() ]).optional(),
  items: z.union([ z.lazy(() => CharacterUpdateitemsInputSchema),z.string().array() ]).optional(),
  coins: z.union([ z.lazy(() => CoinTypeNullableUpdateEnvelopeInputSchema),z.lazy(() => CoinTypeCreateInputSchema) ]).optional().nullable(),
  image_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  class_ids: z.union([ z.lazy(() => CharacterUpdateclass_idsInputSchema),z.string().array() ]).optional(),
  race_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NestedEnumAOETypeFilterSchema: z.ZodType<Prisma.NestedEnumAOETypeFilter> = z.object({
  equals: z.lazy(() => AOETypeSchema).optional(),
  in: z.lazy(() => AOETypeSchema).array().optional(),
  notIn: z.lazy(() => AOETypeSchema).array().optional(),
  not: z.union([ z.lazy(() => AOETypeSchema),z.lazy(() => NestedEnumAOETypeFilterSchema) ]).optional(),
}).strict();

export const PrerequisiteWhereInputSchema: z.ZodType<Prisma.PrerequisiteWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PrerequisiteWhereInputSchema),z.lazy(() => PrerequisiteWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrerequisiteWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrerequisiteWhereInputSchema),z.lazy(() => PrerequisiteWhereInputSchema).array() ]).optional(),
  ability_score: z.union([ z.lazy(() => APIReferenceNullableCompositeFilterSchema),z.lazy(() => APIReferenceObjectEqualityInputSchema) ]).optional().nullable(),
  minimum_score: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const EnumAOETypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumAOETypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => AOETypeSchema).optional()
}).strict();

export const PrerequisiteListUpdateEnvelopeInputSchema: z.ZodType<Prisma.PrerequisiteListUpdateEnvelopeInput> = z.object({
  set: z.union([ z.lazy(() => PrerequisiteCreateInputSchema),z.lazy(() => PrerequisiteCreateInputSchema).array() ]).optional(),
  push: z.union([ z.lazy(() => PrerequisiteCreateInputSchema),z.lazy(() => PrerequisiteCreateInputSchema).array() ]).optional(),
  updateMany: z.lazy(() => PrerequisiteUpdateManyInputSchema).optional(),
  deleteMany: z.lazy(() => PrerequisiteDeleteManyInputSchema).optional()
}).strict();

export const APIReferenceNullableCompositeFilterSchema: z.ZodType<Prisma.APIReferenceNullableCompositeFilter> = z.object({
  equals: z.lazy(() => APIReferenceObjectEqualityInputSchema).optional().nullable(),
  is: z.lazy(() => APIReferenceWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => APIReferenceWhereInputSchema).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const PrerequisiteUpdateManyInputSchema: z.ZodType<Prisma.PrerequisiteUpdateManyInput> = z.object({
  where: z.lazy(() => PrerequisiteWhereInputSchema),
  data: z.lazy(() => PrerequisiteUpdateInputSchema)
}).strict();

export const PrerequisiteDeleteManyInputSchema: z.ZodType<Prisma.PrerequisiteDeleteManyInput> = z.object({
  where: z.lazy(() => PrerequisiteWhereInputSchema)
}).strict();

export const PrerequisiteUpdateInputSchema: z.ZodType<Prisma.PrerequisiteUpdateInput> = z.object({
  ability_score: z.union([ z.lazy(() => APIReferenceNullableUpdateEnvelopeInputSchema),z.lazy(() => APIReferenceCreateInputSchema) ]).optional().nullable(),
  minimum_score: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const APIReferenceNullableUpdateEnvelopeInputSchema: z.ZodType<Prisma.APIReferenceNullableUpdateEnvelopeInput> = z.object({
  set: z.lazy(() => APIReferenceCreateInputSchema).optional().nullable(),
  upsert: z.lazy(() => APIReferenceUpsertInputSchema).optional(),
  unset: z.boolean().optional()
}).strict();

export const APIReferenceUpsertInputSchema: z.ZodType<Prisma.APIReferenceUpsertInput> = z.object({
  set: z.lazy(() => APIReferenceCreateInputSchema).nullable(),
  update: z.lazy(() => APIReferenceUpdateInputSchema)
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const FriendsFindFirstArgsSchema: z.ZodType<Prisma.FriendsFindFirstArgs> = z.object({
  select: FriendsSelectSchema.optional(),
  include: FriendsIncludeSchema.optional(),
  where: FriendsWhereInputSchema.optional(),
  orderBy: z.union([ FriendsOrderByWithRelationInputSchema.array(),FriendsOrderByWithRelationInputSchema ]).optional(),
  cursor: FriendsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FriendsScalarFieldEnumSchema,FriendsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FriendsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FriendsFindFirstOrThrowArgs> = z.object({
  select: FriendsSelectSchema.optional(),
  include: FriendsIncludeSchema.optional(),
  where: FriendsWhereInputSchema.optional(),
  orderBy: z.union([ FriendsOrderByWithRelationInputSchema.array(),FriendsOrderByWithRelationInputSchema ]).optional(),
  cursor: FriendsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FriendsScalarFieldEnumSchema,FriendsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FriendsFindManyArgsSchema: z.ZodType<Prisma.FriendsFindManyArgs> = z.object({
  select: FriendsSelectSchema.optional(),
  include: FriendsIncludeSchema.optional(),
  where: FriendsWhereInputSchema.optional(),
  orderBy: z.union([ FriendsOrderByWithRelationInputSchema.array(),FriendsOrderByWithRelationInputSchema ]).optional(),
  cursor: FriendsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FriendsScalarFieldEnumSchema,FriendsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FriendsAggregateArgsSchema: z.ZodType<Prisma.FriendsAggregateArgs> = z.object({
  where: FriendsWhereInputSchema.optional(),
  orderBy: z.union([ FriendsOrderByWithRelationInputSchema.array(),FriendsOrderByWithRelationInputSchema ]).optional(),
  cursor: FriendsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FriendsGroupByArgsSchema: z.ZodType<Prisma.FriendsGroupByArgs> = z.object({
  where: FriendsWhereInputSchema.optional(),
  orderBy: z.union([ FriendsOrderByWithAggregationInputSchema.array(),FriendsOrderByWithAggregationInputSchema ]).optional(),
  by: FriendsScalarFieldEnumSchema.array(),
  having: FriendsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FriendsFindUniqueArgsSchema: z.ZodType<Prisma.FriendsFindUniqueArgs> = z.object({
  select: FriendsSelectSchema.optional(),
  include: FriendsIncludeSchema.optional(),
  where: FriendsWhereUniqueInputSchema,
}).strict() ;

export const FriendsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FriendsFindUniqueOrThrowArgs> = z.object({
  select: FriendsSelectSchema.optional(),
  include: FriendsIncludeSchema.optional(),
  where: FriendsWhereUniqueInputSchema,
}).strict() ;

export const RequestedFriendsFindFirstArgsSchema: z.ZodType<Prisma.RequestedFriendsFindFirstArgs> = z.object({
  select: RequestedFriendsSelectSchema.optional(),
  include: RequestedFriendsIncludeSchema.optional(),
  where: RequestedFriendsWhereInputSchema.optional(),
  orderBy: z.union([ RequestedFriendsOrderByWithRelationInputSchema.array(),RequestedFriendsOrderByWithRelationInputSchema ]).optional(),
  cursor: RequestedFriendsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RequestedFriendsScalarFieldEnumSchema,RequestedFriendsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RequestedFriendsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RequestedFriendsFindFirstOrThrowArgs> = z.object({
  select: RequestedFriendsSelectSchema.optional(),
  include: RequestedFriendsIncludeSchema.optional(),
  where: RequestedFriendsWhereInputSchema.optional(),
  orderBy: z.union([ RequestedFriendsOrderByWithRelationInputSchema.array(),RequestedFriendsOrderByWithRelationInputSchema ]).optional(),
  cursor: RequestedFriendsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RequestedFriendsScalarFieldEnumSchema,RequestedFriendsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RequestedFriendsFindManyArgsSchema: z.ZodType<Prisma.RequestedFriendsFindManyArgs> = z.object({
  select: RequestedFriendsSelectSchema.optional(),
  include: RequestedFriendsIncludeSchema.optional(),
  where: RequestedFriendsWhereInputSchema.optional(),
  orderBy: z.union([ RequestedFriendsOrderByWithRelationInputSchema.array(),RequestedFriendsOrderByWithRelationInputSchema ]).optional(),
  cursor: RequestedFriendsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RequestedFriendsScalarFieldEnumSchema,RequestedFriendsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RequestedFriendsAggregateArgsSchema: z.ZodType<Prisma.RequestedFriendsAggregateArgs> = z.object({
  where: RequestedFriendsWhereInputSchema.optional(),
  orderBy: z.union([ RequestedFriendsOrderByWithRelationInputSchema.array(),RequestedFriendsOrderByWithRelationInputSchema ]).optional(),
  cursor: RequestedFriendsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RequestedFriendsGroupByArgsSchema: z.ZodType<Prisma.RequestedFriendsGroupByArgs> = z.object({
  where: RequestedFriendsWhereInputSchema.optional(),
  orderBy: z.union([ RequestedFriendsOrderByWithAggregationInputSchema.array(),RequestedFriendsOrderByWithAggregationInputSchema ]).optional(),
  by: RequestedFriendsScalarFieldEnumSchema.array(),
  having: RequestedFriendsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RequestedFriendsFindUniqueArgsSchema: z.ZodType<Prisma.RequestedFriendsFindUniqueArgs> = z.object({
  select: RequestedFriendsSelectSchema.optional(),
  include: RequestedFriendsIncludeSchema.optional(),
  where: RequestedFriendsWhereUniqueInputSchema,
}).strict() ;

export const RequestedFriendsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RequestedFriendsFindUniqueOrThrowArgs> = z.object({
  select: RequestedFriendsSelectSchema.optional(),
  include: RequestedFriendsIncludeSchema.optional(),
  where: RequestedFriendsWhereUniqueInputSchema,
}).strict() ;

export const SentRequestsFindFirstArgsSchema: z.ZodType<Prisma.SentRequestsFindFirstArgs> = z.object({
  select: SentRequestsSelectSchema.optional(),
  include: SentRequestsIncludeSchema.optional(),
  where: SentRequestsWhereInputSchema.optional(),
  orderBy: z.union([ SentRequestsOrderByWithRelationInputSchema.array(),SentRequestsOrderByWithRelationInputSchema ]).optional(),
  cursor: SentRequestsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SentRequestsScalarFieldEnumSchema,SentRequestsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SentRequestsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SentRequestsFindFirstOrThrowArgs> = z.object({
  select: SentRequestsSelectSchema.optional(),
  include: SentRequestsIncludeSchema.optional(),
  where: SentRequestsWhereInputSchema.optional(),
  orderBy: z.union([ SentRequestsOrderByWithRelationInputSchema.array(),SentRequestsOrderByWithRelationInputSchema ]).optional(),
  cursor: SentRequestsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SentRequestsScalarFieldEnumSchema,SentRequestsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SentRequestsFindManyArgsSchema: z.ZodType<Prisma.SentRequestsFindManyArgs> = z.object({
  select: SentRequestsSelectSchema.optional(),
  include: SentRequestsIncludeSchema.optional(),
  where: SentRequestsWhereInputSchema.optional(),
  orderBy: z.union([ SentRequestsOrderByWithRelationInputSchema.array(),SentRequestsOrderByWithRelationInputSchema ]).optional(),
  cursor: SentRequestsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SentRequestsScalarFieldEnumSchema,SentRequestsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SentRequestsAggregateArgsSchema: z.ZodType<Prisma.SentRequestsAggregateArgs> = z.object({
  where: SentRequestsWhereInputSchema.optional(),
  orderBy: z.union([ SentRequestsOrderByWithRelationInputSchema.array(),SentRequestsOrderByWithRelationInputSchema ]).optional(),
  cursor: SentRequestsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SentRequestsGroupByArgsSchema: z.ZodType<Prisma.SentRequestsGroupByArgs> = z.object({
  where: SentRequestsWhereInputSchema.optional(),
  orderBy: z.union([ SentRequestsOrderByWithAggregationInputSchema.array(),SentRequestsOrderByWithAggregationInputSchema ]).optional(),
  by: SentRequestsScalarFieldEnumSchema.array(),
  having: SentRequestsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SentRequestsFindUniqueArgsSchema: z.ZodType<Prisma.SentRequestsFindUniqueArgs> = z.object({
  select: SentRequestsSelectSchema.optional(),
  include: SentRequestsIncludeSchema.optional(),
  where: SentRequestsWhereUniqueInputSchema,
}).strict() ;

export const SentRequestsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SentRequestsFindUniqueOrThrowArgs> = z.object({
  select: SentRequestsSelectSchema.optional(),
  include: SentRequestsIncludeSchema.optional(),
  where: SentRequestsWhereUniqueInputSchema,
}).strict() ;

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const KeyFindFirstArgsSchema: z.ZodType<Prisma.KeyFindFirstArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ KeyScalarFieldEnumSchema,KeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const KeyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.KeyFindFirstOrThrowArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ KeyScalarFieldEnumSchema,KeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const KeyFindManyArgsSchema: z.ZodType<Prisma.KeyFindManyArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ KeyScalarFieldEnumSchema,KeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const KeyAggregateArgsSchema: z.ZodType<Prisma.KeyAggregateArgs> = z.object({
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithRelationInputSchema.array(),KeyOrderByWithRelationInputSchema ]).optional(),
  cursor: KeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const KeyGroupByArgsSchema: z.ZodType<Prisma.KeyGroupByArgs> = z.object({
  where: KeyWhereInputSchema.optional(),
  orderBy: z.union([ KeyOrderByWithAggregationInputSchema.array(),KeyOrderByWithAggregationInputSchema ]).optional(),
  by: KeyScalarFieldEnumSchema.array(),
  having: KeyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const KeyFindUniqueArgsSchema: z.ZodType<Prisma.KeyFindUniqueArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
}).strict() ;

export const KeyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.KeyFindUniqueOrThrowArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
}).strict() ;

export const SpellbookFindFirstArgsSchema: z.ZodType<Prisma.SpellbookFindFirstArgs> = z.object({
  select: SpellbookSelectSchema.optional(),
  include: SpellbookIncludeSchema.optional(),
  where: SpellbookWhereInputSchema.optional(),
  orderBy: z.union([ SpellbookOrderByWithRelationInputSchema.array(),SpellbookOrderByWithRelationInputSchema ]).optional(),
  cursor: SpellbookWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpellbookScalarFieldEnumSchema,SpellbookScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpellbookFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SpellbookFindFirstOrThrowArgs> = z.object({
  select: SpellbookSelectSchema.optional(),
  include: SpellbookIncludeSchema.optional(),
  where: SpellbookWhereInputSchema.optional(),
  orderBy: z.union([ SpellbookOrderByWithRelationInputSchema.array(),SpellbookOrderByWithRelationInputSchema ]).optional(),
  cursor: SpellbookWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpellbookScalarFieldEnumSchema,SpellbookScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpellbookFindManyArgsSchema: z.ZodType<Prisma.SpellbookFindManyArgs> = z.object({
  select: SpellbookSelectSchema.optional(),
  include: SpellbookIncludeSchema.optional(),
  where: SpellbookWhereInputSchema.optional(),
  orderBy: z.union([ SpellbookOrderByWithRelationInputSchema.array(),SpellbookOrderByWithRelationInputSchema ]).optional(),
  cursor: SpellbookWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpellbookScalarFieldEnumSchema,SpellbookScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpellbookAggregateArgsSchema: z.ZodType<Prisma.SpellbookAggregateArgs> = z.object({
  where: SpellbookWhereInputSchema.optional(),
  orderBy: z.union([ SpellbookOrderByWithRelationInputSchema.array(),SpellbookOrderByWithRelationInputSchema ]).optional(),
  cursor: SpellbookWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SpellbookGroupByArgsSchema: z.ZodType<Prisma.SpellbookGroupByArgs> = z.object({
  where: SpellbookWhereInputSchema.optional(),
  orderBy: z.union([ SpellbookOrderByWithAggregationInputSchema.array(),SpellbookOrderByWithAggregationInputSchema ]).optional(),
  by: SpellbookScalarFieldEnumSchema.array(),
  having: SpellbookScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SpellbookFindUniqueArgsSchema: z.ZodType<Prisma.SpellbookFindUniqueArgs> = z.object({
  select: SpellbookSelectSchema.optional(),
  include: SpellbookIncludeSchema.optional(),
  where: SpellbookWhereUniqueInputSchema,
}).strict() ;

export const SpellbookFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SpellbookFindUniqueOrThrowArgs> = z.object({
  select: SpellbookSelectSchema.optional(),
  include: SpellbookIncludeSchema.optional(),
  where: SpellbookWhereUniqueInputSchema,
}).strict() ;

export const CampaignFindFirstArgsSchema: z.ZodType<Prisma.CampaignFindFirstArgs> = z.object({
  select: CampaignSelectSchema.optional(),
  include: CampaignIncludeSchema.optional(),
  where: CampaignWhereInputSchema.optional(),
  orderBy: z.union([ CampaignOrderByWithRelationInputSchema.array(),CampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: CampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CampaignScalarFieldEnumSchema,CampaignScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CampaignFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CampaignFindFirstOrThrowArgs> = z.object({
  select: CampaignSelectSchema.optional(),
  include: CampaignIncludeSchema.optional(),
  where: CampaignWhereInputSchema.optional(),
  orderBy: z.union([ CampaignOrderByWithRelationInputSchema.array(),CampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: CampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CampaignScalarFieldEnumSchema,CampaignScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CampaignFindManyArgsSchema: z.ZodType<Prisma.CampaignFindManyArgs> = z.object({
  select: CampaignSelectSchema.optional(),
  include: CampaignIncludeSchema.optional(),
  where: CampaignWhereInputSchema.optional(),
  orderBy: z.union([ CampaignOrderByWithRelationInputSchema.array(),CampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: CampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CampaignScalarFieldEnumSchema,CampaignScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CampaignAggregateArgsSchema: z.ZodType<Prisma.CampaignAggregateArgs> = z.object({
  where: CampaignWhereInputSchema.optional(),
  orderBy: z.union([ CampaignOrderByWithRelationInputSchema.array(),CampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: CampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CampaignGroupByArgsSchema: z.ZodType<Prisma.CampaignGroupByArgs> = z.object({
  where: CampaignWhereInputSchema.optional(),
  orderBy: z.union([ CampaignOrderByWithAggregationInputSchema.array(),CampaignOrderByWithAggregationInputSchema ]).optional(),
  by: CampaignScalarFieldEnumSchema.array(),
  having: CampaignScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CampaignFindUniqueArgsSchema: z.ZodType<Prisma.CampaignFindUniqueArgs> = z.object({
  select: CampaignSelectSchema.optional(),
  include: CampaignIncludeSchema.optional(),
  where: CampaignWhereUniqueInputSchema,
}).strict() ;

export const CampaignFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CampaignFindUniqueOrThrowArgs> = z.object({
  select: CampaignSelectSchema.optional(),
  include: CampaignIncludeSchema.optional(),
  where: CampaignWhereUniqueInputSchema,
}).strict() ;

export const SpellFindFirstArgsSchema: z.ZodType<Prisma.SpellFindFirstArgs> = z.object({
  select: SpellSelectSchema.optional(),
  include: SpellIncludeSchema.optional(),
  where: SpellWhereInputSchema.optional(),
  orderBy: z.union([ SpellOrderByWithRelationInputSchema.array(),SpellOrderByWithRelationInputSchema ]).optional(),
  cursor: SpellWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpellScalarFieldEnumSchema,SpellScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpellFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SpellFindFirstOrThrowArgs> = z.object({
  select: SpellSelectSchema.optional(),
  include: SpellIncludeSchema.optional(),
  where: SpellWhereInputSchema.optional(),
  orderBy: z.union([ SpellOrderByWithRelationInputSchema.array(),SpellOrderByWithRelationInputSchema ]).optional(),
  cursor: SpellWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpellScalarFieldEnumSchema,SpellScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpellFindManyArgsSchema: z.ZodType<Prisma.SpellFindManyArgs> = z.object({
  select: SpellSelectSchema.optional(),
  include: SpellIncludeSchema.optional(),
  where: SpellWhereInputSchema.optional(),
  orderBy: z.union([ SpellOrderByWithRelationInputSchema.array(),SpellOrderByWithRelationInputSchema ]).optional(),
  cursor: SpellWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SpellScalarFieldEnumSchema,SpellScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SpellAggregateArgsSchema: z.ZodType<Prisma.SpellAggregateArgs> = z.object({
  where: SpellWhereInputSchema.optional(),
  orderBy: z.union([ SpellOrderByWithRelationInputSchema.array(),SpellOrderByWithRelationInputSchema ]).optional(),
  cursor: SpellWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SpellGroupByArgsSchema: z.ZodType<Prisma.SpellGroupByArgs> = z.object({
  where: SpellWhereInputSchema.optional(),
  orderBy: z.union([ SpellOrderByWithAggregationInputSchema.array(),SpellOrderByWithAggregationInputSchema ]).optional(),
  by: SpellScalarFieldEnumSchema.array(),
  having: SpellScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SpellFindUniqueArgsSchema: z.ZodType<Prisma.SpellFindUniqueArgs> = z.object({
  select: SpellSelectSchema.optional(),
  include: SpellIncludeSchema.optional(),
  where: SpellWhereUniqueInputSchema,
}).strict() ;

export const SpellFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SpellFindUniqueOrThrowArgs> = z.object({
  select: SpellSelectSchema.optional(),
  include: SpellIncludeSchema.optional(),
  where: SpellWhereUniqueInputSchema,
}).strict() ;

export const ClassFindFirstArgsSchema: z.ZodType<Prisma.ClassFindFirstArgs> = z.object({
  select: ClassSelectSchema.optional(),
  include: ClassIncludeSchema.optional(),
  where: ClassWhereInputSchema.optional(),
  orderBy: z.union([ ClassOrderByWithRelationInputSchema.array(),ClassOrderByWithRelationInputSchema ]).optional(),
  cursor: ClassWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ClassScalarFieldEnumSchema,ClassScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ClassFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ClassFindFirstOrThrowArgs> = z.object({
  select: ClassSelectSchema.optional(),
  include: ClassIncludeSchema.optional(),
  where: ClassWhereInputSchema.optional(),
  orderBy: z.union([ ClassOrderByWithRelationInputSchema.array(),ClassOrderByWithRelationInputSchema ]).optional(),
  cursor: ClassWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ClassScalarFieldEnumSchema,ClassScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ClassFindManyArgsSchema: z.ZodType<Prisma.ClassFindManyArgs> = z.object({
  select: ClassSelectSchema.optional(),
  include: ClassIncludeSchema.optional(),
  where: ClassWhereInputSchema.optional(),
  orderBy: z.union([ ClassOrderByWithRelationInputSchema.array(),ClassOrderByWithRelationInputSchema ]).optional(),
  cursor: ClassWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ClassScalarFieldEnumSchema,ClassScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ClassAggregateArgsSchema: z.ZodType<Prisma.ClassAggregateArgs> = z.object({
  where: ClassWhereInputSchema.optional(),
  orderBy: z.union([ ClassOrderByWithRelationInputSchema.array(),ClassOrderByWithRelationInputSchema ]).optional(),
  cursor: ClassWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ClassGroupByArgsSchema: z.ZodType<Prisma.ClassGroupByArgs> = z.object({
  where: ClassWhereInputSchema.optional(),
  orderBy: z.union([ ClassOrderByWithAggregationInputSchema.array(),ClassOrderByWithAggregationInputSchema ]).optional(),
  by: ClassScalarFieldEnumSchema.array(),
  having: ClassScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ClassFindUniqueArgsSchema: z.ZodType<Prisma.ClassFindUniqueArgs> = z.object({
  select: ClassSelectSchema.optional(),
  include: ClassIncludeSchema.optional(),
  where: ClassWhereUniqueInputSchema,
}).strict() ;

export const ClassFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ClassFindUniqueOrThrowArgs> = z.object({
  select: ClassSelectSchema.optional(),
  include: ClassIncludeSchema.optional(),
  where: ClassWhereUniqueInputSchema,
}).strict() ;

export const RaceFindFirstArgsSchema: z.ZodType<Prisma.RaceFindFirstArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RaceScalarFieldEnumSchema,RaceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RaceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RaceFindFirstOrThrowArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RaceScalarFieldEnumSchema,RaceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RaceFindManyArgsSchema: z.ZodType<Prisma.RaceFindManyArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RaceScalarFieldEnumSchema,RaceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RaceAggregateArgsSchema: z.ZodType<Prisma.RaceAggregateArgs> = z.object({
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithRelationInputSchema.array(),RaceOrderByWithRelationInputSchema ]).optional(),
  cursor: RaceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RaceGroupByArgsSchema: z.ZodType<Prisma.RaceGroupByArgs> = z.object({
  where: RaceWhereInputSchema.optional(),
  orderBy: z.union([ RaceOrderByWithAggregationInputSchema.array(),RaceOrderByWithAggregationInputSchema ]).optional(),
  by: RaceScalarFieldEnumSchema.array(),
  having: RaceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RaceFindUniqueArgsSchema: z.ZodType<Prisma.RaceFindUniqueArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
}).strict() ;

export const RaceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RaceFindUniqueOrThrowArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
}).strict() ;

export const CharacterFindFirstArgsSchema: z.ZodType<Prisma.CharacterFindFirstArgs> = z.object({
  select: CharacterSelectSchema.optional(),
  include: CharacterIncludeSchema.optional(),
  where: CharacterWhereInputSchema.optional(),
  orderBy: z.union([ CharacterOrderByWithRelationInputSchema.array(),CharacterOrderByWithRelationInputSchema ]).optional(),
  cursor: CharacterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CharacterScalarFieldEnumSchema,CharacterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CharacterFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CharacterFindFirstOrThrowArgs> = z.object({
  select: CharacterSelectSchema.optional(),
  include: CharacterIncludeSchema.optional(),
  where: CharacterWhereInputSchema.optional(),
  orderBy: z.union([ CharacterOrderByWithRelationInputSchema.array(),CharacterOrderByWithRelationInputSchema ]).optional(),
  cursor: CharacterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CharacterScalarFieldEnumSchema,CharacterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CharacterFindManyArgsSchema: z.ZodType<Prisma.CharacterFindManyArgs> = z.object({
  select: CharacterSelectSchema.optional(),
  include: CharacterIncludeSchema.optional(),
  where: CharacterWhereInputSchema.optional(),
  orderBy: z.union([ CharacterOrderByWithRelationInputSchema.array(),CharacterOrderByWithRelationInputSchema ]).optional(),
  cursor: CharacterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CharacterScalarFieldEnumSchema,CharacterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CharacterAggregateArgsSchema: z.ZodType<Prisma.CharacterAggregateArgs> = z.object({
  where: CharacterWhereInputSchema.optional(),
  orderBy: z.union([ CharacterOrderByWithRelationInputSchema.array(),CharacterOrderByWithRelationInputSchema ]).optional(),
  cursor: CharacterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CharacterGroupByArgsSchema: z.ZodType<Prisma.CharacterGroupByArgs> = z.object({
  where: CharacterWhereInputSchema.optional(),
  orderBy: z.union([ CharacterOrderByWithAggregationInputSchema.array(),CharacterOrderByWithAggregationInputSchema ]).optional(),
  by: CharacterScalarFieldEnumSchema.array(),
  having: CharacterScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CharacterFindUniqueArgsSchema: z.ZodType<Prisma.CharacterFindUniqueArgs> = z.object({
  select: CharacterSelectSchema.optional(),
  include: CharacterIncludeSchema.optional(),
  where: CharacterWhereUniqueInputSchema,
}).strict() ;

export const CharacterFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CharacterFindUniqueOrThrowArgs> = z.object({
  select: CharacterSelectSchema.optional(),
  include: CharacterIncludeSchema.optional(),
  where: CharacterWhereUniqueInputSchema,
}).strict() ;

export const AbilityScoreFindFirstArgsSchema: z.ZodType<Prisma.AbilityScoreFindFirstArgs> = z.object({
  select: AbilityScoreSelectSchema.optional(),
  include: AbilityScoreIncludeSchema.optional(),
  where: AbilityScoreWhereInputSchema.optional(),
  orderBy: z.union([ AbilityScoreOrderByWithRelationInputSchema.array(),AbilityScoreOrderByWithRelationInputSchema ]).optional(),
  cursor: AbilityScoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AbilityScoreScalarFieldEnumSchema,AbilityScoreScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AbilityScoreFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AbilityScoreFindFirstOrThrowArgs> = z.object({
  select: AbilityScoreSelectSchema.optional(),
  include: AbilityScoreIncludeSchema.optional(),
  where: AbilityScoreWhereInputSchema.optional(),
  orderBy: z.union([ AbilityScoreOrderByWithRelationInputSchema.array(),AbilityScoreOrderByWithRelationInputSchema ]).optional(),
  cursor: AbilityScoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AbilityScoreScalarFieldEnumSchema,AbilityScoreScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AbilityScoreFindManyArgsSchema: z.ZodType<Prisma.AbilityScoreFindManyArgs> = z.object({
  select: AbilityScoreSelectSchema.optional(),
  include: AbilityScoreIncludeSchema.optional(),
  where: AbilityScoreWhereInputSchema.optional(),
  orderBy: z.union([ AbilityScoreOrderByWithRelationInputSchema.array(),AbilityScoreOrderByWithRelationInputSchema ]).optional(),
  cursor: AbilityScoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AbilityScoreScalarFieldEnumSchema,AbilityScoreScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AbilityScoreAggregateArgsSchema: z.ZodType<Prisma.AbilityScoreAggregateArgs> = z.object({
  where: AbilityScoreWhereInputSchema.optional(),
  orderBy: z.union([ AbilityScoreOrderByWithRelationInputSchema.array(),AbilityScoreOrderByWithRelationInputSchema ]).optional(),
  cursor: AbilityScoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AbilityScoreGroupByArgsSchema: z.ZodType<Prisma.AbilityScoreGroupByArgs> = z.object({
  where: AbilityScoreWhereInputSchema.optional(),
  orderBy: z.union([ AbilityScoreOrderByWithAggregationInputSchema.array(),AbilityScoreOrderByWithAggregationInputSchema ]).optional(),
  by: AbilityScoreScalarFieldEnumSchema.array(),
  having: AbilityScoreScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AbilityScoreFindUniqueArgsSchema: z.ZodType<Prisma.AbilityScoreFindUniqueArgs> = z.object({
  select: AbilityScoreSelectSchema.optional(),
  include: AbilityScoreIncludeSchema.optional(),
  where: AbilityScoreWhereUniqueInputSchema,
}).strict() ;

export const AbilityScoreFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AbilityScoreFindUniqueOrThrowArgs> = z.object({
  select: AbilityScoreSelectSchema.optional(),
  include: AbilityScoreIncludeSchema.optional(),
  where: AbilityScoreWhereUniqueInputSchema,
}).strict() ;

export const SkillFindFirstArgsSchema: z.ZodType<Prisma.SkillFindFirstArgs> = z.object({
  select: SkillSelectSchema.optional(),
  include: SkillIncludeSchema.optional(),
  where: SkillWhereInputSchema.optional(),
  orderBy: z.union([ SkillOrderByWithRelationInputSchema.array(),SkillOrderByWithRelationInputSchema ]).optional(),
  cursor: SkillWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SkillScalarFieldEnumSchema,SkillScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SkillFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SkillFindFirstOrThrowArgs> = z.object({
  select: SkillSelectSchema.optional(),
  include: SkillIncludeSchema.optional(),
  where: SkillWhereInputSchema.optional(),
  orderBy: z.union([ SkillOrderByWithRelationInputSchema.array(),SkillOrderByWithRelationInputSchema ]).optional(),
  cursor: SkillWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SkillScalarFieldEnumSchema,SkillScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SkillFindManyArgsSchema: z.ZodType<Prisma.SkillFindManyArgs> = z.object({
  select: SkillSelectSchema.optional(),
  include: SkillIncludeSchema.optional(),
  where: SkillWhereInputSchema.optional(),
  orderBy: z.union([ SkillOrderByWithRelationInputSchema.array(),SkillOrderByWithRelationInputSchema ]).optional(),
  cursor: SkillWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SkillScalarFieldEnumSchema,SkillScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SkillAggregateArgsSchema: z.ZodType<Prisma.SkillAggregateArgs> = z.object({
  where: SkillWhereInputSchema.optional(),
  orderBy: z.union([ SkillOrderByWithRelationInputSchema.array(),SkillOrderByWithRelationInputSchema ]).optional(),
  cursor: SkillWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SkillGroupByArgsSchema: z.ZodType<Prisma.SkillGroupByArgs> = z.object({
  where: SkillWhereInputSchema.optional(),
  orderBy: z.union([ SkillOrderByWithAggregationInputSchema.array(),SkillOrderByWithAggregationInputSchema ]).optional(),
  by: SkillScalarFieldEnumSchema.array(),
  having: SkillScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SkillFindUniqueArgsSchema: z.ZodType<Prisma.SkillFindUniqueArgs> = z.object({
  select: SkillSelectSchema.optional(),
  include: SkillIncludeSchema.optional(),
  where: SkillWhereUniqueInputSchema,
}).strict() ;

export const SkillFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SkillFindUniqueOrThrowArgs> = z.object({
  select: SkillSelectSchema.optional(),
  include: SkillIncludeSchema.optional(),
  where: SkillWhereUniqueInputSchema,
}).strict() ;

export const LanguageFindFirstArgsSchema: z.ZodType<Prisma.LanguageFindFirstArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LanguageScalarFieldEnumSchema,LanguageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LanguageFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LanguageFindFirstOrThrowArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LanguageScalarFieldEnumSchema,LanguageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LanguageFindManyArgsSchema: z.ZodType<Prisma.LanguageFindManyArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LanguageScalarFieldEnumSchema,LanguageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LanguageAggregateArgsSchema: z.ZodType<Prisma.LanguageAggregateArgs> = z.object({
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LanguageGroupByArgsSchema: z.ZodType<Prisma.LanguageGroupByArgs> = z.object({
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithAggregationInputSchema.array(),LanguageOrderByWithAggregationInputSchema ]).optional(),
  by: LanguageScalarFieldEnumSchema.array(),
  having: LanguageScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LanguageFindUniqueArgsSchema: z.ZodType<Prisma.LanguageFindUniqueArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const LanguageFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LanguageFindUniqueOrThrowArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const ProficiencyFindFirstArgsSchema: z.ZodType<Prisma.ProficiencyFindFirstArgs> = z.object({
  select: ProficiencySelectSchema.optional(),
  include: ProficiencyIncludeSchema.optional(),
  where: ProficiencyWhereInputSchema.optional(),
  orderBy: z.union([ ProficiencyOrderByWithRelationInputSchema.array(),ProficiencyOrderByWithRelationInputSchema ]).optional(),
  cursor: ProficiencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProficiencyScalarFieldEnumSchema,ProficiencyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProficiencyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProficiencyFindFirstOrThrowArgs> = z.object({
  select: ProficiencySelectSchema.optional(),
  include: ProficiencyIncludeSchema.optional(),
  where: ProficiencyWhereInputSchema.optional(),
  orderBy: z.union([ ProficiencyOrderByWithRelationInputSchema.array(),ProficiencyOrderByWithRelationInputSchema ]).optional(),
  cursor: ProficiencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProficiencyScalarFieldEnumSchema,ProficiencyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProficiencyFindManyArgsSchema: z.ZodType<Prisma.ProficiencyFindManyArgs> = z.object({
  select: ProficiencySelectSchema.optional(),
  include: ProficiencyIncludeSchema.optional(),
  where: ProficiencyWhereInputSchema.optional(),
  orderBy: z.union([ ProficiencyOrderByWithRelationInputSchema.array(),ProficiencyOrderByWithRelationInputSchema ]).optional(),
  cursor: ProficiencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProficiencyScalarFieldEnumSchema,ProficiencyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProficiencyAggregateArgsSchema: z.ZodType<Prisma.ProficiencyAggregateArgs> = z.object({
  where: ProficiencyWhereInputSchema.optional(),
  orderBy: z.union([ ProficiencyOrderByWithRelationInputSchema.array(),ProficiencyOrderByWithRelationInputSchema ]).optional(),
  cursor: ProficiencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProficiencyGroupByArgsSchema: z.ZodType<Prisma.ProficiencyGroupByArgs> = z.object({
  where: ProficiencyWhereInputSchema.optional(),
  orderBy: z.union([ ProficiencyOrderByWithAggregationInputSchema.array(),ProficiencyOrderByWithAggregationInputSchema ]).optional(),
  by: ProficiencyScalarFieldEnumSchema.array(),
  having: ProficiencyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProficiencyFindUniqueArgsSchema: z.ZodType<Prisma.ProficiencyFindUniqueArgs> = z.object({
  select: ProficiencySelectSchema.optional(),
  include: ProficiencyIncludeSchema.optional(),
  where: ProficiencyWhereUniqueInputSchema,
}).strict() ;

export const ProficiencyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProficiencyFindUniqueOrThrowArgs> = z.object({
  select: ProficiencySelectSchema.optional(),
  include: ProficiencyIncludeSchema.optional(),
  where: ProficiencyWhereUniqueInputSchema,
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const FriendsCreateArgsSchema: z.ZodType<Prisma.FriendsCreateArgs> = z.object({
  select: FriendsSelectSchema.optional(),
  include: FriendsIncludeSchema.optional(),
  data: z.union([ FriendsCreateInputSchema,FriendsUncheckedCreateInputSchema ]),
}).strict() ;

export const FriendsUpsertArgsSchema: z.ZodType<Prisma.FriendsUpsertArgs> = z.object({
  select: FriendsSelectSchema.optional(),
  include: FriendsIncludeSchema.optional(),
  where: FriendsWhereUniqueInputSchema,
  create: z.union([ FriendsCreateInputSchema,FriendsUncheckedCreateInputSchema ]),
  update: z.union([ FriendsUpdateInputSchema,FriendsUncheckedUpdateInputSchema ]),
}).strict() ;

export const FriendsCreateManyArgsSchema: z.ZodType<Prisma.FriendsCreateManyArgs> = z.object({
  data: z.union([ FriendsCreateManyInputSchema,FriendsCreateManyInputSchema.array() ]),
}).strict() ;

export const FriendsDeleteArgsSchema: z.ZodType<Prisma.FriendsDeleteArgs> = z.object({
  select: FriendsSelectSchema.optional(),
  include: FriendsIncludeSchema.optional(),
  where: FriendsWhereUniqueInputSchema,
}).strict() ;

export const FriendsUpdateArgsSchema: z.ZodType<Prisma.FriendsUpdateArgs> = z.object({
  select: FriendsSelectSchema.optional(),
  include: FriendsIncludeSchema.optional(),
  data: z.union([ FriendsUpdateInputSchema,FriendsUncheckedUpdateInputSchema ]),
  where: FriendsWhereUniqueInputSchema,
}).strict() ;

export const FriendsUpdateManyArgsSchema: z.ZodType<Prisma.FriendsUpdateManyArgs> = z.object({
  data: z.union([ FriendsUpdateManyMutationInputSchema,FriendsUncheckedUpdateManyInputSchema ]),
  where: FriendsWhereInputSchema.optional(),
}).strict() ;

export const FriendsDeleteManyArgsSchema: z.ZodType<Prisma.FriendsDeleteManyArgs> = z.object({
  where: FriendsWhereInputSchema.optional(),
}).strict() ;

export const RequestedFriendsCreateArgsSchema: z.ZodType<Prisma.RequestedFriendsCreateArgs> = z.object({
  select: RequestedFriendsSelectSchema.optional(),
  include: RequestedFriendsIncludeSchema.optional(),
  data: z.union([ RequestedFriendsCreateInputSchema,RequestedFriendsUncheckedCreateInputSchema ]),
}).strict() ;

export const RequestedFriendsUpsertArgsSchema: z.ZodType<Prisma.RequestedFriendsUpsertArgs> = z.object({
  select: RequestedFriendsSelectSchema.optional(),
  include: RequestedFriendsIncludeSchema.optional(),
  where: RequestedFriendsWhereUniqueInputSchema,
  create: z.union([ RequestedFriendsCreateInputSchema,RequestedFriendsUncheckedCreateInputSchema ]),
  update: z.union([ RequestedFriendsUpdateInputSchema,RequestedFriendsUncheckedUpdateInputSchema ]),
}).strict() ;

export const RequestedFriendsCreateManyArgsSchema: z.ZodType<Prisma.RequestedFriendsCreateManyArgs> = z.object({
  data: z.union([ RequestedFriendsCreateManyInputSchema,RequestedFriendsCreateManyInputSchema.array() ]),
}).strict() ;

export const RequestedFriendsDeleteArgsSchema: z.ZodType<Prisma.RequestedFriendsDeleteArgs> = z.object({
  select: RequestedFriendsSelectSchema.optional(),
  include: RequestedFriendsIncludeSchema.optional(),
  where: RequestedFriendsWhereUniqueInputSchema,
}).strict() ;

export const RequestedFriendsUpdateArgsSchema: z.ZodType<Prisma.RequestedFriendsUpdateArgs> = z.object({
  select: RequestedFriendsSelectSchema.optional(),
  include: RequestedFriendsIncludeSchema.optional(),
  data: z.union([ RequestedFriendsUpdateInputSchema,RequestedFriendsUncheckedUpdateInputSchema ]),
  where: RequestedFriendsWhereUniqueInputSchema,
}).strict() ;

export const RequestedFriendsUpdateManyArgsSchema: z.ZodType<Prisma.RequestedFriendsUpdateManyArgs> = z.object({
  data: z.union([ RequestedFriendsUpdateManyMutationInputSchema,RequestedFriendsUncheckedUpdateManyInputSchema ]),
  where: RequestedFriendsWhereInputSchema.optional(),
}).strict() ;

export const RequestedFriendsDeleteManyArgsSchema: z.ZodType<Prisma.RequestedFriendsDeleteManyArgs> = z.object({
  where: RequestedFriendsWhereInputSchema.optional(),
}).strict() ;

export const SentRequestsCreateArgsSchema: z.ZodType<Prisma.SentRequestsCreateArgs> = z.object({
  select: SentRequestsSelectSchema.optional(),
  include: SentRequestsIncludeSchema.optional(),
  data: z.union([ SentRequestsCreateInputSchema,SentRequestsUncheckedCreateInputSchema ]),
}).strict() ;

export const SentRequestsUpsertArgsSchema: z.ZodType<Prisma.SentRequestsUpsertArgs> = z.object({
  select: SentRequestsSelectSchema.optional(),
  include: SentRequestsIncludeSchema.optional(),
  where: SentRequestsWhereUniqueInputSchema,
  create: z.union([ SentRequestsCreateInputSchema,SentRequestsUncheckedCreateInputSchema ]),
  update: z.union([ SentRequestsUpdateInputSchema,SentRequestsUncheckedUpdateInputSchema ]),
}).strict() ;

export const SentRequestsCreateManyArgsSchema: z.ZodType<Prisma.SentRequestsCreateManyArgs> = z.object({
  data: z.union([ SentRequestsCreateManyInputSchema,SentRequestsCreateManyInputSchema.array() ]),
}).strict() ;

export const SentRequestsDeleteArgsSchema: z.ZodType<Prisma.SentRequestsDeleteArgs> = z.object({
  select: SentRequestsSelectSchema.optional(),
  include: SentRequestsIncludeSchema.optional(),
  where: SentRequestsWhereUniqueInputSchema,
}).strict() ;

export const SentRequestsUpdateArgsSchema: z.ZodType<Prisma.SentRequestsUpdateArgs> = z.object({
  select: SentRequestsSelectSchema.optional(),
  include: SentRequestsIncludeSchema.optional(),
  data: z.union([ SentRequestsUpdateInputSchema,SentRequestsUncheckedUpdateInputSchema ]),
  where: SentRequestsWhereUniqueInputSchema,
}).strict() ;

export const SentRequestsUpdateManyArgsSchema: z.ZodType<Prisma.SentRequestsUpdateManyArgs> = z.object({
  data: z.union([ SentRequestsUpdateManyMutationInputSchema,SentRequestsUncheckedUpdateManyInputSchema ]),
  where: SentRequestsWhereInputSchema.optional(),
}).strict() ;

export const SentRequestsDeleteManyArgsSchema: z.ZodType<Prisma.SentRequestsDeleteManyArgs> = z.object({
  where: SentRequestsWhereInputSchema.optional(),
}).strict() ;

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict() ;

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
}).strict() ;

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
}).strict() ;

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
}).strict() ;

export const KeyCreateArgsSchema: z.ZodType<Prisma.KeyCreateArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  data: z.union([ KeyCreateInputSchema,KeyUncheckedCreateInputSchema ]),
}).strict() ;

export const KeyUpsertArgsSchema: z.ZodType<Prisma.KeyUpsertArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
  create: z.union([ KeyCreateInputSchema,KeyUncheckedCreateInputSchema ]),
  update: z.union([ KeyUpdateInputSchema,KeyUncheckedUpdateInputSchema ]),
}).strict() ;

export const KeyCreateManyArgsSchema: z.ZodType<Prisma.KeyCreateManyArgs> = z.object({
  data: z.union([ KeyCreateManyInputSchema,KeyCreateManyInputSchema.array() ]),
}).strict() ;

export const KeyDeleteArgsSchema: z.ZodType<Prisma.KeyDeleteArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  where: KeyWhereUniqueInputSchema,
}).strict() ;

export const KeyUpdateArgsSchema: z.ZodType<Prisma.KeyUpdateArgs> = z.object({
  select: KeySelectSchema.optional(),
  include: KeyIncludeSchema.optional(),
  data: z.union([ KeyUpdateInputSchema,KeyUncheckedUpdateInputSchema ]),
  where: KeyWhereUniqueInputSchema,
}).strict() ;

export const KeyUpdateManyArgsSchema: z.ZodType<Prisma.KeyUpdateManyArgs> = z.object({
  data: z.union([ KeyUpdateManyMutationInputSchema,KeyUncheckedUpdateManyInputSchema ]),
  where: KeyWhereInputSchema.optional(),
}).strict() ;

export const KeyDeleteManyArgsSchema: z.ZodType<Prisma.KeyDeleteManyArgs> = z.object({
  where: KeyWhereInputSchema.optional(),
}).strict() ;

export const SpellbookCreateArgsSchema: z.ZodType<Prisma.SpellbookCreateArgs> = z.object({
  select: SpellbookSelectSchema.optional(),
  include: SpellbookIncludeSchema.optional(),
  data: z.union([ SpellbookCreateInputSchema,SpellbookUncheckedCreateInputSchema ]),
}).strict() ;

export const SpellbookUpsertArgsSchema: z.ZodType<Prisma.SpellbookUpsertArgs> = z.object({
  select: SpellbookSelectSchema.optional(),
  include: SpellbookIncludeSchema.optional(),
  where: SpellbookWhereUniqueInputSchema,
  create: z.union([ SpellbookCreateInputSchema,SpellbookUncheckedCreateInputSchema ]),
  update: z.union([ SpellbookUpdateInputSchema,SpellbookUncheckedUpdateInputSchema ]),
}).strict() ;

export const SpellbookCreateManyArgsSchema: z.ZodType<Prisma.SpellbookCreateManyArgs> = z.object({
  data: z.union([ SpellbookCreateManyInputSchema,SpellbookCreateManyInputSchema.array() ]),
}).strict() ;

export const SpellbookDeleteArgsSchema: z.ZodType<Prisma.SpellbookDeleteArgs> = z.object({
  select: SpellbookSelectSchema.optional(),
  include: SpellbookIncludeSchema.optional(),
  where: SpellbookWhereUniqueInputSchema,
}).strict() ;

export const SpellbookUpdateArgsSchema: z.ZodType<Prisma.SpellbookUpdateArgs> = z.object({
  select: SpellbookSelectSchema.optional(),
  include: SpellbookIncludeSchema.optional(),
  data: z.union([ SpellbookUpdateInputSchema,SpellbookUncheckedUpdateInputSchema ]),
  where: SpellbookWhereUniqueInputSchema,
}).strict() ;

export const SpellbookUpdateManyArgsSchema: z.ZodType<Prisma.SpellbookUpdateManyArgs> = z.object({
  data: z.union([ SpellbookUpdateManyMutationInputSchema,SpellbookUncheckedUpdateManyInputSchema ]),
  where: SpellbookWhereInputSchema.optional(),
}).strict() ;

export const SpellbookDeleteManyArgsSchema: z.ZodType<Prisma.SpellbookDeleteManyArgs> = z.object({
  where: SpellbookWhereInputSchema.optional(),
}).strict() ;

export const CampaignCreateArgsSchema: z.ZodType<Prisma.CampaignCreateArgs> = z.object({
  select: CampaignSelectSchema.optional(),
  include: CampaignIncludeSchema.optional(),
  data: z.union([ CampaignCreateInputSchema,CampaignUncheckedCreateInputSchema ]),
}).strict() ;

export const CampaignUpsertArgsSchema: z.ZodType<Prisma.CampaignUpsertArgs> = z.object({
  select: CampaignSelectSchema.optional(),
  include: CampaignIncludeSchema.optional(),
  where: CampaignWhereUniqueInputSchema,
  create: z.union([ CampaignCreateInputSchema,CampaignUncheckedCreateInputSchema ]),
  update: z.union([ CampaignUpdateInputSchema,CampaignUncheckedUpdateInputSchema ]),
}).strict() ;

export const CampaignCreateManyArgsSchema: z.ZodType<Prisma.CampaignCreateManyArgs> = z.object({
  data: z.union([ CampaignCreateManyInputSchema,CampaignCreateManyInputSchema.array() ]),
}).strict() ;

export const CampaignDeleteArgsSchema: z.ZodType<Prisma.CampaignDeleteArgs> = z.object({
  select: CampaignSelectSchema.optional(),
  include: CampaignIncludeSchema.optional(),
  where: CampaignWhereUniqueInputSchema,
}).strict() ;

export const CampaignUpdateArgsSchema: z.ZodType<Prisma.CampaignUpdateArgs> = z.object({
  select: CampaignSelectSchema.optional(),
  include: CampaignIncludeSchema.optional(),
  data: z.union([ CampaignUpdateInputSchema,CampaignUncheckedUpdateInputSchema ]),
  where: CampaignWhereUniqueInputSchema,
}).strict() ;

export const CampaignUpdateManyArgsSchema: z.ZodType<Prisma.CampaignUpdateManyArgs> = z.object({
  data: z.union([ CampaignUpdateManyMutationInputSchema,CampaignUncheckedUpdateManyInputSchema ]),
  where: CampaignWhereInputSchema.optional(),
}).strict() ;

export const CampaignDeleteManyArgsSchema: z.ZodType<Prisma.CampaignDeleteManyArgs> = z.object({
  where: CampaignWhereInputSchema.optional(),
}).strict() ;

export const SpellCreateArgsSchema: z.ZodType<Prisma.SpellCreateArgs> = z.object({
  select: SpellSelectSchema.optional(),
  include: SpellIncludeSchema.optional(),
  data: z.union([ SpellCreateInputSchema,SpellUncheckedCreateInputSchema ]),
}).strict() ;

export const SpellUpsertArgsSchema: z.ZodType<Prisma.SpellUpsertArgs> = z.object({
  select: SpellSelectSchema.optional(),
  include: SpellIncludeSchema.optional(),
  where: SpellWhereUniqueInputSchema,
  create: z.union([ SpellCreateInputSchema,SpellUncheckedCreateInputSchema ]),
  update: z.union([ SpellUpdateInputSchema,SpellUncheckedUpdateInputSchema ]),
}).strict() ;

export const SpellCreateManyArgsSchema: z.ZodType<Prisma.SpellCreateManyArgs> = z.object({
  data: z.union([ SpellCreateManyInputSchema,SpellCreateManyInputSchema.array() ]),
}).strict() ;

export const SpellDeleteArgsSchema: z.ZodType<Prisma.SpellDeleteArgs> = z.object({
  select: SpellSelectSchema.optional(),
  include: SpellIncludeSchema.optional(),
  where: SpellWhereUniqueInputSchema,
}).strict() ;

export const SpellUpdateArgsSchema: z.ZodType<Prisma.SpellUpdateArgs> = z.object({
  select: SpellSelectSchema.optional(),
  include: SpellIncludeSchema.optional(),
  data: z.union([ SpellUpdateInputSchema,SpellUncheckedUpdateInputSchema ]),
  where: SpellWhereUniqueInputSchema,
}).strict() ;

export const SpellUpdateManyArgsSchema: z.ZodType<Prisma.SpellUpdateManyArgs> = z.object({
  data: z.union([ SpellUpdateManyMutationInputSchema,SpellUncheckedUpdateManyInputSchema ]),
  where: SpellWhereInputSchema.optional(),
}).strict() ;

export const SpellDeleteManyArgsSchema: z.ZodType<Prisma.SpellDeleteManyArgs> = z.object({
  where: SpellWhereInputSchema.optional(),
}).strict() ;

export const ClassCreateArgsSchema: z.ZodType<Prisma.ClassCreateArgs> = z.object({
  select: ClassSelectSchema.optional(),
  include: ClassIncludeSchema.optional(),
  data: z.union([ ClassCreateInputSchema,ClassUncheckedCreateInputSchema ]),
}).strict() ;

export const ClassUpsertArgsSchema: z.ZodType<Prisma.ClassUpsertArgs> = z.object({
  select: ClassSelectSchema.optional(),
  include: ClassIncludeSchema.optional(),
  where: ClassWhereUniqueInputSchema,
  create: z.union([ ClassCreateInputSchema,ClassUncheckedCreateInputSchema ]),
  update: z.union([ ClassUpdateInputSchema,ClassUncheckedUpdateInputSchema ]),
}).strict() ;

export const ClassCreateManyArgsSchema: z.ZodType<Prisma.ClassCreateManyArgs> = z.object({
  data: z.union([ ClassCreateManyInputSchema,ClassCreateManyInputSchema.array() ]),
}).strict() ;

export const ClassDeleteArgsSchema: z.ZodType<Prisma.ClassDeleteArgs> = z.object({
  select: ClassSelectSchema.optional(),
  include: ClassIncludeSchema.optional(),
  where: ClassWhereUniqueInputSchema,
}).strict() ;

export const ClassUpdateArgsSchema: z.ZodType<Prisma.ClassUpdateArgs> = z.object({
  select: ClassSelectSchema.optional(),
  include: ClassIncludeSchema.optional(),
  data: z.union([ ClassUpdateInputSchema,ClassUncheckedUpdateInputSchema ]),
  where: ClassWhereUniqueInputSchema,
}).strict() ;

export const ClassUpdateManyArgsSchema: z.ZodType<Prisma.ClassUpdateManyArgs> = z.object({
  data: z.union([ ClassUpdateManyMutationInputSchema,ClassUncheckedUpdateManyInputSchema ]),
  where: ClassWhereInputSchema.optional(),
}).strict() ;

export const ClassDeleteManyArgsSchema: z.ZodType<Prisma.ClassDeleteManyArgs> = z.object({
  where: ClassWhereInputSchema.optional(),
}).strict() ;

export const RaceCreateArgsSchema: z.ZodType<Prisma.RaceCreateArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  data: z.union([ RaceCreateInputSchema,RaceUncheckedCreateInputSchema ]),
}).strict() ;

export const RaceUpsertArgsSchema: z.ZodType<Prisma.RaceUpsertArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
  create: z.union([ RaceCreateInputSchema,RaceUncheckedCreateInputSchema ]),
  update: z.union([ RaceUpdateInputSchema,RaceUncheckedUpdateInputSchema ]),
}).strict() ;

export const RaceCreateManyArgsSchema: z.ZodType<Prisma.RaceCreateManyArgs> = z.object({
  data: z.union([ RaceCreateManyInputSchema,RaceCreateManyInputSchema.array() ]),
}).strict() ;

export const RaceDeleteArgsSchema: z.ZodType<Prisma.RaceDeleteArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  where: RaceWhereUniqueInputSchema,
}).strict() ;

export const RaceUpdateArgsSchema: z.ZodType<Prisma.RaceUpdateArgs> = z.object({
  select: RaceSelectSchema.optional(),
  include: RaceIncludeSchema.optional(),
  data: z.union([ RaceUpdateInputSchema,RaceUncheckedUpdateInputSchema ]),
  where: RaceWhereUniqueInputSchema,
}).strict() ;

export const RaceUpdateManyArgsSchema: z.ZodType<Prisma.RaceUpdateManyArgs> = z.object({
  data: z.union([ RaceUpdateManyMutationInputSchema,RaceUncheckedUpdateManyInputSchema ]),
  where: RaceWhereInputSchema.optional(),
}).strict() ;

export const RaceDeleteManyArgsSchema: z.ZodType<Prisma.RaceDeleteManyArgs> = z.object({
  where: RaceWhereInputSchema.optional(),
}).strict() ;

export const CharacterCreateArgsSchema: z.ZodType<Prisma.CharacterCreateArgs> = z.object({
  select: CharacterSelectSchema.optional(),
  include: CharacterIncludeSchema.optional(),
  data: z.union([ CharacterCreateInputSchema,CharacterUncheckedCreateInputSchema ]),
}).strict() ;

export const CharacterUpsertArgsSchema: z.ZodType<Prisma.CharacterUpsertArgs> = z.object({
  select: CharacterSelectSchema.optional(),
  include: CharacterIncludeSchema.optional(),
  where: CharacterWhereUniqueInputSchema,
  create: z.union([ CharacterCreateInputSchema,CharacterUncheckedCreateInputSchema ]),
  update: z.union([ CharacterUpdateInputSchema,CharacterUncheckedUpdateInputSchema ]),
}).strict() ;

export const CharacterCreateManyArgsSchema: z.ZodType<Prisma.CharacterCreateManyArgs> = z.object({
  data: z.union([ CharacterCreateManyInputSchema,CharacterCreateManyInputSchema.array() ]),
}).strict() ;

export const CharacterDeleteArgsSchema: z.ZodType<Prisma.CharacterDeleteArgs> = z.object({
  select: CharacterSelectSchema.optional(),
  include: CharacterIncludeSchema.optional(),
  where: CharacterWhereUniqueInputSchema,
}).strict() ;

export const CharacterUpdateArgsSchema: z.ZodType<Prisma.CharacterUpdateArgs> = z.object({
  select: CharacterSelectSchema.optional(),
  include: CharacterIncludeSchema.optional(),
  data: z.union([ CharacterUpdateInputSchema,CharacterUncheckedUpdateInputSchema ]),
  where: CharacterWhereUniqueInputSchema,
}).strict() ;

export const CharacterUpdateManyArgsSchema: z.ZodType<Prisma.CharacterUpdateManyArgs> = z.object({
  data: z.union([ CharacterUpdateManyMutationInputSchema,CharacterUncheckedUpdateManyInputSchema ]),
  where: CharacterWhereInputSchema.optional(),
}).strict() ;

export const CharacterDeleteManyArgsSchema: z.ZodType<Prisma.CharacterDeleteManyArgs> = z.object({
  where: CharacterWhereInputSchema.optional(),
}).strict() ;

export const AbilityScoreCreateArgsSchema: z.ZodType<Prisma.AbilityScoreCreateArgs> = z.object({
  select: AbilityScoreSelectSchema.optional(),
  include: AbilityScoreIncludeSchema.optional(),
  data: z.union([ AbilityScoreCreateInputSchema,AbilityScoreUncheckedCreateInputSchema ]),
}).strict() ;

export const AbilityScoreUpsertArgsSchema: z.ZodType<Prisma.AbilityScoreUpsertArgs> = z.object({
  select: AbilityScoreSelectSchema.optional(),
  include: AbilityScoreIncludeSchema.optional(),
  where: AbilityScoreWhereUniqueInputSchema,
  create: z.union([ AbilityScoreCreateInputSchema,AbilityScoreUncheckedCreateInputSchema ]),
  update: z.union([ AbilityScoreUpdateInputSchema,AbilityScoreUncheckedUpdateInputSchema ]),
}).strict() ;

export const AbilityScoreCreateManyArgsSchema: z.ZodType<Prisma.AbilityScoreCreateManyArgs> = z.object({
  data: z.union([ AbilityScoreCreateManyInputSchema,AbilityScoreCreateManyInputSchema.array() ]),
}).strict() ;

export const AbilityScoreDeleteArgsSchema: z.ZodType<Prisma.AbilityScoreDeleteArgs> = z.object({
  select: AbilityScoreSelectSchema.optional(),
  include: AbilityScoreIncludeSchema.optional(),
  where: AbilityScoreWhereUniqueInputSchema,
}).strict() ;

export const AbilityScoreUpdateArgsSchema: z.ZodType<Prisma.AbilityScoreUpdateArgs> = z.object({
  select: AbilityScoreSelectSchema.optional(),
  include: AbilityScoreIncludeSchema.optional(),
  data: z.union([ AbilityScoreUpdateInputSchema,AbilityScoreUncheckedUpdateInputSchema ]),
  where: AbilityScoreWhereUniqueInputSchema,
}).strict() ;

export const AbilityScoreUpdateManyArgsSchema: z.ZodType<Prisma.AbilityScoreUpdateManyArgs> = z.object({
  data: z.union([ AbilityScoreUpdateManyMutationInputSchema,AbilityScoreUncheckedUpdateManyInputSchema ]),
  where: AbilityScoreWhereInputSchema.optional(),
}).strict() ;

export const AbilityScoreDeleteManyArgsSchema: z.ZodType<Prisma.AbilityScoreDeleteManyArgs> = z.object({
  where: AbilityScoreWhereInputSchema.optional(),
}).strict() ;

export const SkillCreateArgsSchema: z.ZodType<Prisma.SkillCreateArgs> = z.object({
  select: SkillSelectSchema.optional(),
  include: SkillIncludeSchema.optional(),
  data: z.union([ SkillCreateInputSchema,SkillUncheckedCreateInputSchema ]),
}).strict() ;

export const SkillUpsertArgsSchema: z.ZodType<Prisma.SkillUpsertArgs> = z.object({
  select: SkillSelectSchema.optional(),
  include: SkillIncludeSchema.optional(),
  where: SkillWhereUniqueInputSchema,
  create: z.union([ SkillCreateInputSchema,SkillUncheckedCreateInputSchema ]),
  update: z.union([ SkillUpdateInputSchema,SkillUncheckedUpdateInputSchema ]),
}).strict() ;

export const SkillCreateManyArgsSchema: z.ZodType<Prisma.SkillCreateManyArgs> = z.object({
  data: z.union([ SkillCreateManyInputSchema,SkillCreateManyInputSchema.array() ]),
}).strict() ;

export const SkillDeleteArgsSchema: z.ZodType<Prisma.SkillDeleteArgs> = z.object({
  select: SkillSelectSchema.optional(),
  include: SkillIncludeSchema.optional(),
  where: SkillWhereUniqueInputSchema,
}).strict() ;

export const SkillUpdateArgsSchema: z.ZodType<Prisma.SkillUpdateArgs> = z.object({
  select: SkillSelectSchema.optional(),
  include: SkillIncludeSchema.optional(),
  data: z.union([ SkillUpdateInputSchema,SkillUncheckedUpdateInputSchema ]),
  where: SkillWhereUniqueInputSchema,
}).strict() ;

export const SkillUpdateManyArgsSchema: z.ZodType<Prisma.SkillUpdateManyArgs> = z.object({
  data: z.union([ SkillUpdateManyMutationInputSchema,SkillUncheckedUpdateManyInputSchema ]),
  where: SkillWhereInputSchema.optional(),
}).strict() ;

export const SkillDeleteManyArgsSchema: z.ZodType<Prisma.SkillDeleteManyArgs> = z.object({
  where: SkillWhereInputSchema.optional(),
}).strict() ;

export const LanguageCreateArgsSchema: z.ZodType<Prisma.LanguageCreateArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  data: z.union([ LanguageCreateInputSchema,LanguageUncheckedCreateInputSchema ]),
}).strict() ;

export const LanguageUpsertArgsSchema: z.ZodType<Prisma.LanguageUpsertArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
  create: z.union([ LanguageCreateInputSchema,LanguageUncheckedCreateInputSchema ]),
  update: z.union([ LanguageUpdateInputSchema,LanguageUncheckedUpdateInputSchema ]),
}).strict() ;

export const LanguageCreateManyArgsSchema: z.ZodType<Prisma.LanguageCreateManyArgs> = z.object({
  data: z.union([ LanguageCreateManyInputSchema,LanguageCreateManyInputSchema.array() ]),
}).strict() ;

export const LanguageDeleteArgsSchema: z.ZodType<Prisma.LanguageDeleteArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const LanguageUpdateArgsSchema: z.ZodType<Prisma.LanguageUpdateArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  data: z.union([ LanguageUpdateInputSchema,LanguageUncheckedUpdateInputSchema ]),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const LanguageUpdateManyArgsSchema: z.ZodType<Prisma.LanguageUpdateManyArgs> = z.object({
  data: z.union([ LanguageUpdateManyMutationInputSchema,LanguageUncheckedUpdateManyInputSchema ]),
  where: LanguageWhereInputSchema.optional(),
}).strict() ;

export const LanguageDeleteManyArgsSchema: z.ZodType<Prisma.LanguageDeleteManyArgs> = z.object({
  where: LanguageWhereInputSchema.optional(),
}).strict() ;

export const ProficiencyCreateArgsSchema: z.ZodType<Prisma.ProficiencyCreateArgs> = z.object({
  select: ProficiencySelectSchema.optional(),
  include: ProficiencyIncludeSchema.optional(),
  data: z.union([ ProficiencyCreateInputSchema,ProficiencyUncheckedCreateInputSchema ]),
}).strict() ;

export const ProficiencyUpsertArgsSchema: z.ZodType<Prisma.ProficiencyUpsertArgs> = z.object({
  select: ProficiencySelectSchema.optional(),
  include: ProficiencyIncludeSchema.optional(),
  where: ProficiencyWhereUniqueInputSchema,
  create: z.union([ ProficiencyCreateInputSchema,ProficiencyUncheckedCreateInputSchema ]),
  update: z.union([ ProficiencyUpdateInputSchema,ProficiencyUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProficiencyCreateManyArgsSchema: z.ZodType<Prisma.ProficiencyCreateManyArgs> = z.object({
  data: z.union([ ProficiencyCreateManyInputSchema,ProficiencyCreateManyInputSchema.array() ]),
}).strict() ;

export const ProficiencyDeleteArgsSchema: z.ZodType<Prisma.ProficiencyDeleteArgs> = z.object({
  select: ProficiencySelectSchema.optional(),
  include: ProficiencyIncludeSchema.optional(),
  where: ProficiencyWhereUniqueInputSchema,
}).strict() ;

export const ProficiencyUpdateArgsSchema: z.ZodType<Prisma.ProficiencyUpdateArgs> = z.object({
  select: ProficiencySelectSchema.optional(),
  include: ProficiencyIncludeSchema.optional(),
  data: z.union([ ProficiencyUpdateInputSchema,ProficiencyUncheckedUpdateInputSchema ]),
  where: ProficiencyWhereUniqueInputSchema,
}).strict() ;

export const ProficiencyUpdateManyArgsSchema: z.ZodType<Prisma.ProficiencyUpdateManyArgs> = z.object({
  data: z.union([ ProficiencyUpdateManyMutationInputSchema,ProficiencyUncheckedUpdateManyInputSchema ]),
  where: ProficiencyWhereInputSchema.optional(),
}).strict() ;

export const ProficiencyDeleteManyArgsSchema: z.ZodType<Prisma.ProficiencyDeleteManyArgs> = z.object({
  where: ProficiencyWhereInputSchema.optional(),
}).strict() ;